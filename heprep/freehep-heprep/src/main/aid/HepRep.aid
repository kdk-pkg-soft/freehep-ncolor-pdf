// Copyright 2000-2005, FreeHEP.
package hep.graphics.heprep;

@cpp {
// Include all other HepRep header files here for convenience
#include "HEPREP/HasHepRep.h"
#include "HEPREP/HepRepAction.h"
#include "HEPREP/HepRepAttDef.h"
#include "HEPREP/HepRepAttribute.h"
#include "HEPREP/HepRepAttributeListener.h"
#include "HEPREP/HepRepAttValue.h"
#include "HEPREP/HepRepConstants.h"
#include "HEPREP/HepRepDefinition.h"
#include "HEPREP/HepRepFactory.h"
#include "HEPREP/HepRepFrameListener.h"
#include "HEPREP/HepRepInstance.h"
#include "HEPREP/HepRepInstanceTree.h"
#include "HEPREP/HepRepIterator.h"
#include "HEPREP/HepRepPoint.h"
#include "HEPREP/HepRepSelectFilter.h"
#include "HEPREP/HepRepTreeID.h"
#include "HEPREP/HepRepType.h"
#include "HEPREP/HepRepTypeTree.h"
#include "HEPREP/HepRepWriter.h"
}

@java {
import java.util.Set;
}

/**
 * The HepRep interface.
 *
 * Any of these methods may throw a UnsupportedOperationException in Java.
 *
 * @author Mark Donszelmann
 */
@cvs {
 * @version $Id: HepRep.aid 8617 2006-08-16 07:39:12Z duns $
}

interface HepRep {

    /**
     * Constructor for the JHepRep interface.
     *
     * @param factory HepRepFactory with which this object was created.
     * @param obj related Java object.
     */
    HepRep(HepRepFactory *factory, jobject obj);

    /**
     * Add a layer to the list of layers in this heprep.
     * The layer is added to the back of the list.
     *
     * @param layer name of layer to be added to the back of the list.
     */
    void addLayer(String layer);

    /**
     * Returns the list of layers.
     *
     * @return the known layer names, in the order back-to-front.
     */
    List<String> getLayerOrder();

    /**
     * Add a typetree to this heprep.
     *
     * @param typeTree to be added.
     */
    void addTypeTree(HepRepTypeTree* typeTree);

    /**
     * Remove a typetree from this heprep.
     *
     * @param typeTree to be removed.
     */
    void removeTypeTree(HepRepTypeTree* typeTree);

@java {
    /**
     * Returns the collection of all typetrees of this heprep.
     *
     * @deprecated, use getTypeTreeList()
     * @return collection of HepRepTypeTrees.
     */
    Set/*<HepRepTypeTree>*/ getTypeTrees();
}

    /**
     * Returns the collection of all typetrees of this heprep.
     *
     * @return collection of HepRepTypeTrees.
     */
    List<HepRepTypeTree*> getTypeTreeList();

    /**
     * Returns a named and versioned typetree.
     *
     * @param name name of the typetree.
     * @param version version of the typetree.
     * @return named and versioned HepRepTypeTree.
     */
    HepRepTypeTree* getTypeTree(String name, String version);

@commented {
    /**
     * Searches for a named type in any of the typetrees.
     * The first occurrence found is returned.
     *
     * @param name name of type.
     * @return named HepRepType.
     */
    HepRepType* getType(String name);
}
    /**
     * Adds an instancetree to this heprep.
     *
     * @param instanceTree to be added.
     */
    void addInstanceTree(HepRepInstanceTree* instanceTree);

    /**
     * Overlays an instancetree to this heprep, overriding attributes and adding children.
     *
     * @param instanceTree to be overlaid.
     */
    void overlayInstanceTree(HepRepInstanceTree* instanceTree);

    /**
     * Remove an instanectree from this heprep.
     *
     * @param instanceTree to be removed.
     */
    void removeInstanceTree(HepRepInstanceTree* instanceTree);

@java {
    /**
     * Returns a collection of instancetrees.
     *
     * @deprecated, use getInstaceTreeList()
     * @return collection of HepRepInstanceTrees.
     */
    Set/*<HepRepInstanceTree>*/ getInstanceTrees();
}

    /**
     * Returns a collection of instancetrees.
     *
     * @return collection of HepRepInstanceTrees.
     */
    List<HepRepInstanceTree*> getInstanceTreeList();

    /**
     * Returns a named and versioned instancetree.
     * FIXME: doc is incorrect here, should only return TOP of the tree. Filling
     * in should be done by getInstances calls.
     * <p>
     * This tree needs to be added to the heprep afterwards.
     *
     * @param name name of the instancetree.
     * @param version version of the instancetree.
     * @return HepRepIntanceTree
     */
    HepRepInstanceTree* getInstanceTreeTop(String name, String version);

    /**
     * Returns a named and versioned instancetree for a list of typenames.
     * <p>
     * This tree needs to be added to the heprep afterwards.
     *
     * @param name name of the instancetree.
     * @param version version of the instancetree.
     * @param typeNames a list of typenames for which we need instancetrees.
     * @return HepRepIntanceTree
     */
    HepRepInstanceTree* getInstances(String name, String version, String[] typeNames);

    /**
     * Returns a named and versioned instancetree for a list of typenames
     * after executing some action and for specific filters.
     *
     * This tree needs to be added to the heprep afterwards.
     * <p>
     * The inversion effect of invertAtts depends on the values of
     * GetDrawAtts and GetNonDrawAtts as follows:
     * <UL>
     * <LI>GetDrawAtts	GetNonDrawAtts	effect of InvertAtts
     * <LI>FALSE		FALSE			all Attributes specified will be downloaded
     * <LI>TRUE		    FALSE			Draw Attributes specified will be omitted, NonDraw Attributes specified will be included
     * <LI>FALSE		TRUE			Draw Attributes specified will be included, NonDraw Attributes specified will be omitted
     * <LI>TRUE		    TRUE			all Attributes specified will be omitted
     * </UL>
     *
     * @param name name of the instancetree.
     * @param version version of the instancetree.
     * @param typeNames a list of typenames for which we need instancetrees.
     * @param actions execute this list of actions before returning.
     * @param getPoints include the HepRepPoints in the instance tree.
     * @param getDrawAtts include the Draw attributes in the instance tree.
     * @param getNonDrawAtts include the Non-Draw attributes in the instance tree.
     * @param invertAtts list of attributes to be included or not depending on getDrawAtts and getNonDrawAtts.
     * @return HepRepIntanceTree
     */
    HepRepInstanceTree* getInstancesAfterAction(
                                    String name,
                                    String version,
                                    String[] typeNames,
                                    HepRepAction*[] actions,
                                    boolean getPoints,
                                    boolean getDrawAtts,
                                    boolean getNonDrawAtts,
                                    String[] invertAtts);

    /**
     * Returns last exception thrown and clears it. Useful for implementations without
     * exception handling.
     *
     * @return last exception and clears it.
     */
    String checkForException();

    /**
     * Returns a deep copy of the heprep, with all its attached trees, where
     * instances are filtered using a HepRepSelectFilter.
     *
     * @param filter to be used for filtering instances.
     * @return copy of heprep.
     * @throws CloneNotSupportedException in case copy is not possible
     */
    HepRep* copy(HepRepSelectFilter* filter = null) throws CloneNotSupportedException;
}
