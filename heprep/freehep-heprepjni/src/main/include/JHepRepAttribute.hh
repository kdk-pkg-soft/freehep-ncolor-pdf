// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it.
// =========================================================================
#ifndef HEPREP_JHEPREPATTRIBUTE_H
#define HEPREP_JHEPREPATTRIBUTE_H 1

// Copyright 2000-2002, FreeHEP.

#include <jni.h>
#include <string>
#include <vector>
#include <set>

#include "HEPREP/HepRepAttribute.h"
#include "HEPREP/HepRepAttValue.h"

#include "JHepRepRef.hh"

/**
 *
 * @author M.Donszelmann
 * @author J.Perl
 *
 */
class JHepRepAttribute: public JHepRepRef, public virtual HEPREP::HepRepAttribute {

private:
    jmethodID addStringValueMethod;
    jmethodID addDoubleValueMethod;
    jmethodID addIntValueMethod;
    jmethodID addLongValueMethod;
    jmethodID addBooleanValueMethod;
    jmethodID addColorStringMethod;
    jmethodID addColorValueMethod;

protected:
    inline JHepRepAttribute() { };
    inline JHepRepAttribute(const JHepRepAttribute& r) { };
    inline JHepRepAttribute& operator=(const JHepRepAttribute&) { return *this; };

public:
    JNIEXPORT JHepRepAttribute(HEPREP::HepRepFactory* f, jobject obj);

    /// Destructor.
    JNIEXPORT virtual ~JHepRepAttribute();

    JNIEXPORT virtual void addAttValue(std::string key, char *value, int showLabel);
    JNIEXPORT virtual void addAttValue(std::string key, std::string value, int showLabel);
    JNIEXPORT virtual void addAttValue(std::string key, int value, int showLabel);
    JNIEXPORT virtual void addAttValue(std::string key, HEPREP::int64 value, int showLabel);
    JNIEXPORT virtual void addAttValue(std::string key, double value, int showLabel);
    JNIEXPORT virtual void addAttValue(std::string key, bool value, int showLabel);
    JNIEXPORT virtual void addAttValue(std::string key, std::vector<double> value, int showLabel);
    JNIEXPORT virtual void addAttValue(std::string key, double red, double green, double blue, double alpha, int showLabel);
    JNIEXPORT virtual void addAttValue(HEPREP::HepRepAttValue * hepRepAttValue);

    JNIEXPORT virtual HEPREP::HepRepAttValue * removeAttValue(std::string key);
    JNIEXPORT virtual HEPREP::HepRepAttValue * getAttValue(std::string name);
    JNIEXPORT virtual std::set<HEPREP::HepRepAttValue *> getAttValuesFromNode();
    JNIEXPORT virtual HEPREP::HepRepAttValue * getAttValueFromNode(std::string lowerCaseName);

}; // class

#endif /* ifndef HEPREP_JHEPREPATTRIBUTE_H */
