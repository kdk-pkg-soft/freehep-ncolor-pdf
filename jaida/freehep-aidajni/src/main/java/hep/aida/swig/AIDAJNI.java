/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package hep.aida.swig;

import hep.aida.jni.AIDAJNIUtil;

class AIDAJNI {
  public final static native void delete_IAnnotation(long jarg1);
  public final static native void IAnnotation_addItem__SWIG_0(long jarg1, hep.aida.IAnnotation jarg1_, String jarg2, String jarg3, boolean jarg4);
  public final static native void IAnnotation_addItem__SWIG_1(long jarg1, hep.aida.IAnnotation jarg1_, String jarg2, String jarg3);
  public final static native void IAnnotation_removeItem(long jarg1, hep.aida.IAnnotation jarg1_, String jarg2);
  public final static native String IAnnotation_value__SWIG_0(long jarg1, hep.aida.IAnnotation jarg1_, String jarg2);
  public final static native void IAnnotation_setValue(long jarg1, hep.aida.IAnnotation jarg1_, String jarg2, String jarg3);
  public final static native void IAnnotation_setSticky(long jarg1, hep.aida.IAnnotation jarg1_, String jarg2, boolean jarg3);
  public final static native int IAnnotation_size(long jarg1, hep.aida.IAnnotation jarg1_);
  public final static native String IAnnotation_key(long jarg1, hep.aida.IAnnotation jarg1_, int jarg2);
  public final static native String IAnnotation_value__SWIG_1(long jarg1, hep.aida.IAnnotation jarg1_, int jarg2);
  public final static native void IAnnotation_reset(long jarg1, hep.aida.IAnnotation jarg1_);
  public final static native long new_IAnnotation();
  public final static native void IAnnotation_director_connect(hep.aida.IAnnotation obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IAnnotation_change_ownership(hep.aida.IAnnotation obj, long cptr, boolean take_or_release);
  public final static native String AIDA_VERSION_get();
  public final static native int AIDA_VERSION_MAJOR_get();
  public final static native int AIDA_VERSION_MINOR_get();
  public final static native void delete_IManagedObject(long jarg1);
  public final static native String IManagedObject_name(long jarg1, hep.aida.IManagedObject jarg1_);
  public final static native long new_IManagedObject();
  public final static native void IManagedObject_director_connect(hep.aida.IManagedObject obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IManagedObject_change_ownership(hep.aida.IManagedObject obj, long cptr, boolean take_or_release);
  public final static native void delete_IAxis(long jarg1);
  public final static native boolean IAxis_isFixedBinning(long jarg1, hep.aida.IAxis jarg1_);
  public final static native double IAxis_lowerEdge(long jarg1, hep.aida.IAxis jarg1_);
  public final static native double IAxis_upperEdge(long jarg1, hep.aida.IAxis jarg1_);
  public final static native int IAxis_bins(long jarg1, hep.aida.IAxis jarg1_);
  public final static native double IAxis_binLowerEdge(long jarg1, hep.aida.IAxis jarg1_, int jarg2);
  public final static native double IAxis_binUpperEdge(long jarg1, hep.aida.IAxis jarg1_, int jarg2);
  public final static native double IAxis_binWidth(long jarg1, hep.aida.IAxis jarg1_, int jarg2);
  public final static native int IAxis_coordToIndex(long jarg1, hep.aida.IAxis jarg1_, double jarg2);
  public final static native int IAxis_UNDERFLOW_BIN_get();
  public final static native int IAxis_OVERFLOW_BIN_get();
  public final static native long new_IAxis();
  public final static native void IAxis_director_connect(hep.aida.IAxis obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IAxis_change_ownership(hep.aida.IAxis obj, long cptr, boolean take_or_release);
  public final static native void delete_IBaseHistogram(long jarg1);
  public final static native String IBaseHistogram_title(long jarg1, hep.aida.IBaseHistogram jarg1_);
  public final static native void IBaseHistogram_setTitle(long jarg1, hep.aida.IBaseHistogram jarg1_, String jarg2);
  public final static native long IBaseHistogram_annotation(long jarg1, hep.aida.IBaseHistogram jarg1_);
  public final static native int IBaseHistogram_dimension(long jarg1, hep.aida.IBaseHistogram jarg1_);
  public final static native void IBaseHistogram_reset(long jarg1, hep.aida.IBaseHistogram jarg1_);
  public final static native int IBaseHistogram_entries(long jarg1, hep.aida.IBaseHistogram jarg1_);
  public final static native long new_IBaseHistogram();
  public final static native void IBaseHistogram_director_connect(hep.aida.IBaseHistogram obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IBaseHistogram_change_ownership(hep.aida.IBaseHistogram obj, long cptr, boolean take_or_release);
  public final static native void delete_IHistogram(long jarg1);
  public final static native int IHistogram_allEntries(long jarg1, hep.aida.IHistogram jarg1_);
  public final static native int IHistogram_extraEntries(long jarg1, hep.aida.IHistogram jarg1_);
  public final static native double IHistogram_equivalentBinEntries(long jarg1, hep.aida.IHistogram jarg1_);
  public final static native double IHistogram_sumBinHeights(long jarg1, hep.aida.IHistogram jarg1_);
  public final static native double IHistogram_sumAllBinHeights(long jarg1, hep.aida.IHistogram jarg1_);
  public final static native double IHistogram_sumExtraBinHeights(long jarg1, hep.aida.IHistogram jarg1_);
  public final static native double IHistogram_minBinHeight(long jarg1, hep.aida.IHistogram jarg1_);
  public final static native double IHistogram_maxBinHeight(long jarg1, hep.aida.IHistogram jarg1_);
  public final static native void IHistogram_scale(long jarg1, hep.aida.IHistogram jarg1_, double jarg2);
  public final static native long new_IHistogram();
  public final static native void IHistogram_director_connect(hep.aida.IHistogram obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IHistogram_change_ownership(hep.aida.IHistogram obj, long cptr, boolean take_or_release);
  public final static native void delete_IHistogram1D(long jarg1);
  public final static native void IHistogram1D_fill__SWIG_0(long jarg1, hep.aida.IHistogram1D jarg1_, double jarg2, double jarg3);
  public final static native void IHistogram1D_fill__SWIG_1(long jarg1, hep.aida.IHistogram1D jarg1_, double jarg2);
  public final static native double IHistogram1D_binMean(long jarg1, hep.aida.IHistogram1D jarg1_, int jarg2);
  public final static native int IHistogram1D_binEntries(long jarg1, hep.aida.IHistogram1D jarg1_, int jarg2);
  public final static native double IHistogram1D_binHeight(long jarg1, hep.aida.IHistogram1D jarg1_, int jarg2);
  public final static native double IHistogram1D_binError(long jarg1, hep.aida.IHistogram1D jarg1_, int jarg2);
  public final static native double IHistogram1D_mean(long jarg1, hep.aida.IHistogram1D jarg1_);
  public final static native double IHistogram1D_rms(long jarg1, hep.aida.IHistogram1D jarg1_);
  public final static native long IHistogram1D_axis(long jarg1, hep.aida.IHistogram1D jarg1_);
  public final static native int IHistogram1D_coordToIndex(long jarg1, hep.aida.IHistogram1D jarg1_, double jarg2);
  public final static native void IHistogram1D_add(long jarg1, hep.aida.IHistogram1D jarg1_, long jarg2, hep.aida.IHistogram1D jarg2_);
  public final static native long new_IHistogram1D();
  public final static native void IHistogram1D_director_connect(hep.aida.IHistogram1D obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IHistogram1D_change_ownership(hep.aida.IHistogram1D obj, long cptr, boolean take_or_release);
  public final static native void delete_IHistogram2D(long jarg1);
  public final static native void IHistogram2D_fill__SWIG_0(long jarg1, hep.aida.IHistogram2D jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void IHistogram2D_fill__SWIG_1(long jarg1, hep.aida.IHistogram2D jarg1_, double jarg2, double jarg3);
  public final static native double IHistogram2D_binMeanX(long jarg1, hep.aida.IHistogram2D jarg1_, int jarg2, int jarg3);
  public final static native double IHistogram2D_binMeanY(long jarg1, hep.aida.IHistogram2D jarg1_, int jarg2, int jarg3);
  public final static native int IHistogram2D_binEntries(long jarg1, hep.aida.IHistogram2D jarg1_, int jarg2, int jarg3);
  public final static native int IHistogram2D_binEntriesX(long jarg1, hep.aida.IHistogram2D jarg1_, int jarg2);
  public final static native int IHistogram2D_binEntriesY(long jarg1, hep.aida.IHistogram2D jarg1_, int jarg2);
  public final static native double IHistogram2D_binHeight(long jarg1, hep.aida.IHistogram2D jarg1_, int jarg2, int jarg3);
  public final static native double IHistogram2D_binHeightX(long jarg1, hep.aida.IHistogram2D jarg1_, int jarg2);
  public final static native double IHistogram2D_binHeightY(long jarg1, hep.aida.IHistogram2D jarg1_, int jarg2);
  public final static native double IHistogram2D_binError(long jarg1, hep.aida.IHistogram2D jarg1_, int jarg2, int jarg3);
  public final static native double IHistogram2D_meanX(long jarg1, hep.aida.IHistogram2D jarg1_);
  public final static native double IHistogram2D_meanY(long jarg1, hep.aida.IHistogram2D jarg1_);
  public final static native double IHistogram2D_rmsX(long jarg1, hep.aida.IHistogram2D jarg1_);
  public final static native double IHistogram2D_rmsY(long jarg1, hep.aida.IHistogram2D jarg1_);
  public final static native long IHistogram2D_xAxis(long jarg1, hep.aida.IHistogram2D jarg1_);
  public final static native long IHistogram2D_yAxis(long jarg1, hep.aida.IHistogram2D jarg1_);
  public final static native int IHistogram2D_coordToIndexX(long jarg1, hep.aida.IHistogram2D jarg1_, double jarg2);
  public final static native int IHistogram2D_coordToIndexY(long jarg1, hep.aida.IHistogram2D jarg1_, double jarg2);
  public final static native void IHistogram2D_add(long jarg1, hep.aida.IHistogram2D jarg1_, long jarg2, hep.aida.IHistogram2D jarg2_);
  public final static native long new_IHistogram2D();
  public final static native void IHistogram2D_director_connect(hep.aida.IHistogram2D obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IHistogram2D_change_ownership(hep.aida.IHistogram2D obj, long cptr, boolean take_or_release);
  public final static native void delete_IHistogram3D(long jarg1);
  public final static native void IHistogram3D_fill__SWIG_0(long jarg1, hep.aida.IHistogram3D jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native void IHistogram3D_fill__SWIG_1(long jarg1, hep.aida.IHistogram3D jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native double IHistogram3D_binMeanX(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native double IHistogram3D_binMeanY(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native double IHistogram3D_binMeanZ(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native int IHistogram3D_binEntries(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native int IHistogram3D_binEntriesX(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2);
  public final static native int IHistogram3D_binEntriesY(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2);
  public final static native int IHistogram3D_binEntriesZ(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2);
  public final static native double IHistogram3D_binHeight(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native double IHistogram3D_binHeightX(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2);
  public final static native double IHistogram3D_binHeightY(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2);
  public final static native double IHistogram3D_binHeightZ(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2);
  public final static native double IHistogram3D_binError(long jarg1, hep.aida.IHistogram3D jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native double IHistogram3D_meanX(long jarg1, hep.aida.IHistogram3D jarg1_);
  public final static native double IHistogram3D_meanY(long jarg1, hep.aida.IHistogram3D jarg1_);
  public final static native double IHistogram3D_meanZ(long jarg1, hep.aida.IHistogram3D jarg1_);
  public final static native double IHistogram3D_rmsX(long jarg1, hep.aida.IHistogram3D jarg1_);
  public final static native double IHistogram3D_rmsY(long jarg1, hep.aida.IHistogram3D jarg1_);
  public final static native double IHistogram3D_rmsZ(long jarg1, hep.aida.IHistogram3D jarg1_);
  public final static native long IHistogram3D_xAxis(long jarg1, hep.aida.IHistogram3D jarg1_);
  public final static native long IHistogram3D_yAxis(long jarg1, hep.aida.IHistogram3D jarg1_);
  public final static native long IHistogram3D_zAxis(long jarg1, hep.aida.IHistogram3D jarg1_);
  public final static native int IHistogram3D_coordToIndexX(long jarg1, hep.aida.IHistogram3D jarg1_, double jarg2);
  public final static native int IHistogram3D_coordToIndexY(long jarg1, hep.aida.IHistogram3D jarg1_, double jarg2);
  public final static native int IHistogram3D_coordToIndexZ(long jarg1, hep.aida.IHistogram3D jarg1_, double jarg2);
  public final static native void IHistogram3D_add(long jarg1, hep.aida.IHistogram3D jarg1_, long jarg2, hep.aida.IHistogram3D jarg2_);
  public final static native long new_IHistogram3D();
  public final static native void IHistogram3D_director_connect(hep.aida.IHistogram3D obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IHistogram3D_change_ownership(hep.aida.IHistogram3D obj, long cptr, boolean take_or_release);
  public final static native void delete_ICloud(long jarg1);
  public final static native double ICloud_sumOfWeights(long jarg1, hep.aida.ICloud jarg1_);
  public final static native void ICloud_convertToHistogram(long jarg1, hep.aida.ICloud jarg1_);
  public final static native boolean ICloud_isConverted(long jarg1, hep.aida.ICloud jarg1_);
  public final static native int ICloud_maxEntries(long jarg1, hep.aida.ICloud jarg1_);
  public final static native void ICloud_scale(long jarg1, hep.aida.ICloud jarg1_, double jarg2);
  public final static native long new_ICloud();
  public final static native void ICloud_director_connect(hep.aida.ICloud obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ICloud_change_ownership(hep.aida.ICloud obj, long cptr, boolean take_or_release);
  public final static native void delete_ICloud1D(long jarg1);
  public final static native void ICloud1D_fill__SWIG_0(long jarg1, hep.aida.ICloud1D jarg1_, double jarg2, double jarg3);
  public final static native void ICloud1D_fill__SWIG_1(long jarg1, hep.aida.ICloud1D jarg1_, double jarg2);
  public final static native double ICloud1D_lowerEdge(long jarg1, hep.aida.ICloud1D jarg1_);
  public final static native double ICloud1D_upperEdge(long jarg1, hep.aida.ICloud1D jarg1_);
  public final static native double ICloud1D_value(long jarg1, hep.aida.ICloud1D jarg1_, int jarg2);
  public final static native double ICloud1D_weight(long jarg1, hep.aida.ICloud1D jarg1_, int jarg2);
  public final static native double ICloud1D_mean(long jarg1, hep.aida.ICloud1D jarg1_);
  public final static native double ICloud1D_rms(long jarg1, hep.aida.ICloud1D jarg1_);
  public final static native void ICloud1D_convert__SWIG_0(long jarg1, hep.aida.ICloud1D jarg1_, int jarg2, double jarg3, double jarg4);
  public final static native void ICloud1D_convert__SWIG_1(long jarg1, hep.aida.ICloud1D jarg1_, double[] jarg2);
  public final static native long ICloud1D_histogram(long jarg1, hep.aida.ICloud1D jarg1_);
  public final static native void ICloud1D_fillHistogram(long jarg1, hep.aida.ICloud1D jarg1_, long jarg2, hep.aida.IHistogram1D jarg2_);
  public final static native long new_ICloud1D();
  public final static native void ICloud1D_director_connect(hep.aida.ICloud1D obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ICloud1D_change_ownership(hep.aida.ICloud1D obj, long cptr, boolean take_or_release);
  public final static native void delete_ICloud2D(long jarg1);
  public final static native void ICloud2D_fill__SWIG_0(long jarg1, hep.aida.ICloud2D jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void ICloud2D_fill__SWIG_1(long jarg1, hep.aida.ICloud2D jarg1_, double jarg2, double jarg3);
  public final static native double ICloud2D_lowerEdgeX(long jarg1, hep.aida.ICloud2D jarg1_);
  public final static native double ICloud2D_lowerEdgeY(long jarg1, hep.aida.ICloud2D jarg1_);
  public final static native double ICloud2D_upperEdgeX(long jarg1, hep.aida.ICloud2D jarg1_);
  public final static native double ICloud2D_upperEdgeY(long jarg1, hep.aida.ICloud2D jarg1_);
  public final static native double ICloud2D_valueX(long jarg1, hep.aida.ICloud2D jarg1_, int jarg2);
  public final static native double ICloud2D_valueY(long jarg1, hep.aida.ICloud2D jarg1_, int jarg2);
  public final static native double ICloud2D_weight(long jarg1, hep.aida.ICloud2D jarg1_, int jarg2);
  public final static native double ICloud2D_meanX(long jarg1, hep.aida.ICloud2D jarg1_);
  public final static native double ICloud2D_meanY(long jarg1, hep.aida.ICloud2D jarg1_);
  public final static native double ICloud2D_rmsX(long jarg1, hep.aida.ICloud2D jarg1_);
  public final static native double ICloud2D_rmsY(long jarg1, hep.aida.ICloud2D jarg1_);
  public final static native void ICloud2D_convert__SWIG_0(long jarg1, hep.aida.ICloud2D jarg1_, int jarg2, double jarg3, double jarg4, int jarg5, double jarg6, double jarg7);
  public final static native void ICloud2D_convert__SWIG_1(long jarg1, hep.aida.ICloud2D jarg1_, double[] jarg2, double[] jarg3);
  public final static native long ICloud2D_histogram(long jarg1, hep.aida.ICloud2D jarg1_);
  public final static native void ICloud2D_fillHistogram(long jarg1, hep.aida.ICloud2D jarg1_, long jarg2, hep.aida.IHistogram2D jarg2_);
  public final static native long new_ICloud2D();
  public final static native void ICloud2D_director_connect(hep.aida.ICloud2D obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ICloud2D_change_ownership(hep.aida.ICloud2D obj, long cptr, boolean take_or_release);
  public final static native void delete_ICloud3D(long jarg1);
  public final static native void ICloud3D_fill__SWIG_0(long jarg1, hep.aida.ICloud3D jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native void ICloud3D_fill__SWIG_1(long jarg1, hep.aida.ICloud3D jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native double ICloud3D_lowerEdgeX(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_lowerEdgeY(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_lowerEdgeZ(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_upperEdgeX(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_upperEdgeY(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_upperEdgeZ(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_valueX(long jarg1, hep.aida.ICloud3D jarg1_, int jarg2);
  public final static native double ICloud3D_valueY(long jarg1, hep.aida.ICloud3D jarg1_, int jarg2);
  public final static native double ICloud3D_valueZ(long jarg1, hep.aida.ICloud3D jarg1_, int jarg2);
  public final static native double ICloud3D_weight(long jarg1, hep.aida.ICloud3D jarg1_, int jarg2);
  public final static native double ICloud3D_meanX(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_meanY(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_meanZ(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_rmsX(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_rmsY(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native double ICloud3D_rmsZ(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native void ICloud3D_convert__SWIG_0(long jarg1, hep.aida.ICloud3D jarg1_, int jarg2, double jarg3, double jarg4, int jarg5, double jarg6, double jarg7, int jarg8, double jarg9, double jarg10);
  public final static native void ICloud3D_convert__SWIG_1(long jarg1, hep.aida.ICloud3D jarg1_, double[] jarg2, double[] jarg3, double[] jarg4);
  public final static native long ICloud3D_histogram(long jarg1, hep.aida.ICloud3D jarg1_);
  public final static native void ICloud3D_fillHistogram(long jarg1, hep.aida.ICloud3D jarg1_, long jarg2, hep.aida.IHistogram3D jarg2_);
  public final static native long new_ICloud3D();
  public final static native void ICloud3D_director_connect(hep.aida.ICloud3D obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ICloud3D_change_ownership(hep.aida.ICloud3D obj, long cptr, boolean take_or_release);
  public final static native void delete_IProfile(long jarg1);
  public final static native int IProfile_allEntries(long jarg1, hep.aida.IProfile jarg1_);
  public final static native int IProfile_extraEntries(long jarg1, hep.aida.IProfile jarg1_);
  public final static native double IProfile_sumBinHeights(long jarg1, hep.aida.IProfile jarg1_);
  public final static native double IProfile_sumAllBinHeights(long jarg1, hep.aida.IProfile jarg1_);
  public final static native double IProfile_sumExtraBinHeights(long jarg1, hep.aida.IProfile jarg1_);
  public final static native double IProfile_minBinHeight(long jarg1, hep.aida.IProfile jarg1_);
  public final static native double IProfile_maxBinHeight(long jarg1, hep.aida.IProfile jarg1_);
  public final static native long new_IProfile();
  public final static native void IProfile_director_connect(hep.aida.IProfile obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IProfile_change_ownership(hep.aida.IProfile obj, long cptr, boolean take_or_release);
  public final static native void delete_IProfile1D(long jarg1);
  public final static native void IProfile1D_fill__SWIG_0(long jarg1, hep.aida.IProfile1D jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native void IProfile1D_fill__SWIG_1(long jarg1, hep.aida.IProfile1D jarg1_, double jarg2, double jarg3);
  public final static native double IProfile1D_binMean(long jarg1, hep.aida.IProfile1D jarg1_, int jarg2);
  public final static native int IProfile1D_binEntries(long jarg1, hep.aida.IProfile1D jarg1_, int jarg2);
  public final static native double IProfile1D_binHeight(long jarg1, hep.aida.IProfile1D jarg1_, int jarg2);
  public final static native double IProfile1D_binError(long jarg1, hep.aida.IProfile1D jarg1_, int jarg2);
  public final static native double IProfile1D_binRms(long jarg1, hep.aida.IProfile1D jarg1_, int jarg2);
  public final static native double IProfile1D_mean(long jarg1, hep.aida.IProfile1D jarg1_);
  public final static native double IProfile1D_rms(long jarg1, hep.aida.IProfile1D jarg1_);
  public final static native long IProfile1D_axis(long jarg1, hep.aida.IProfile1D jarg1_);
  public final static native int IProfile1D_coordToIndex(long jarg1, hep.aida.IProfile1D jarg1_, double jarg2);
  public final static native void IProfile1D_add(long jarg1, hep.aida.IProfile1D jarg1_, long jarg2, hep.aida.IProfile1D jarg2_);
  public final static native long new_IProfile1D();
  public final static native void IProfile1D_director_connect(hep.aida.IProfile1D obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IProfile1D_change_ownership(hep.aida.IProfile1D obj, long cptr, boolean take_or_release);
  public final static native void delete_IProfile2D(long jarg1);
  public final static native void IProfile2D_fill__SWIG_0(long jarg1, hep.aida.IProfile2D jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native void IProfile2D_fill__SWIG_1(long jarg1, hep.aida.IProfile2D jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native double IProfile2D_binMeanX(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2, int jarg3);
  public final static native double IProfile2D_binMeanY(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2, int jarg3);
  public final static native int IProfile2D_binEntries(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2, int jarg3);
  public final static native int IProfile2D_binEntriesX(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2);
  public final static native int IProfile2D_binEntriesY(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2);
  public final static native double IProfile2D_binHeight(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2, int jarg3);
  public final static native double IProfile2D_binHeightX(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2);
  public final static native double IProfile2D_binHeightY(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2);
  public final static native double IProfile2D_binError(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2, int jarg3);
  public final static native double IProfile2D_binRms(long jarg1, hep.aida.IProfile2D jarg1_, int jarg2, int jarg3);
  public final static native double IProfile2D_meanX(long jarg1, hep.aida.IProfile2D jarg1_);
  public final static native double IProfile2D_meanY(long jarg1, hep.aida.IProfile2D jarg1_);
  public final static native double IProfile2D_rmsX(long jarg1, hep.aida.IProfile2D jarg1_);
  public final static native double IProfile2D_rmsY(long jarg1, hep.aida.IProfile2D jarg1_);
  public final static native long IProfile2D_xAxis(long jarg1, hep.aida.IProfile2D jarg1_);
  public final static native long IProfile2D_yAxis(long jarg1, hep.aida.IProfile2D jarg1_);
  public final static native int IProfile2D_coordToIndexX(long jarg1, hep.aida.IProfile2D jarg1_, double jarg2);
  public final static native int IProfile2D_coordToIndexY(long jarg1, hep.aida.IProfile2D jarg1_, double jarg2);
  public final static native void IProfile2D_add(long jarg1, hep.aida.IProfile2D jarg1_, long jarg2, hep.aida.IProfile2D jarg2_);
  public final static native long new_IProfile2D();
  public final static native void IProfile2D_director_connect(hep.aida.IProfile2D obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IProfile2D_change_ownership(hep.aida.IProfile2D obj, long cptr, boolean take_or_release);
  public final static native void delete_IHistogramFactory(long jarg1);
  public final static native void IHistogramFactory_destroy(long jarg1, hep.aida.IHistogramFactory jarg1_, long jarg2, hep.aida.IBaseHistogram jarg2_);
  public final static native long IHistogramFactory_createCloud1D__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, String jarg5);
  public final static native long IHistogramFactory_createCloud1D__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native long IHistogramFactory_createCloud1D__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3);
  public final static native long IHistogramFactory_createCloud1D__SWIG_3(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2);
  public final static native long IHistogramFactory_createCopy__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.ICloud1D jarg3_);
  public final static native long IHistogramFactory_createCloud2D__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, String jarg5);
  public final static native long IHistogramFactory_createCloud2D__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native long IHistogramFactory_createCloud2D__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3);
  public final static native long IHistogramFactory_createCloud2D__SWIG_3(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2);
  public final static native long IHistogramFactory_createCopy__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.ICloud2D jarg3_);
  public final static native long IHistogramFactory_createCloud3D__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, String jarg5);
  public final static native long IHistogramFactory_createCloud3D__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native long IHistogramFactory_createCloud3D__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3);
  public final static native long IHistogramFactory_createCloud3D__SWIG_3(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2);
  public final static native long IHistogramFactory_createCopy__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.ICloud3D jarg3_);
  public final static native long IHistogramFactory_createHistogram1D__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, String jarg7);
  public final static native long IHistogramFactory_createHistogram1D__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6);
  public final static native long IHistogramFactory_createHistogram1D__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, int jarg3, double jarg4, double jarg5);
  public final static native long IHistogramFactory_createHistogram1D__SWIG_3(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, String jarg5);
  public final static native long IHistogramFactory_createHistogram1D__SWIG_4(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4);
  public final static native long IHistogramFactory_createCopy__SWIG_3(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram1D jarg3_);
  public final static native long IHistogramFactory_createHistogram2D__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, int jarg7, double jarg8, double jarg9, String jarg10);
  public final static native long IHistogramFactory_createHistogram2D__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, int jarg7, double jarg8, double jarg9);
  public final static native long IHistogramFactory_createHistogram2D__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, int jarg3, double jarg4, double jarg5, int jarg6, double jarg7, double jarg8);
  public final static native long IHistogramFactory_createHistogram2D__SWIG_3(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, String jarg6);
  public final static native long IHistogramFactory_createHistogram2D__SWIG_4(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5);
  public final static native long IHistogramFactory_createCopy__SWIG_4(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_);
  public final static native long IHistogramFactory_createHistogram3D__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, int jarg7, double jarg8, double jarg9, int jarg10, double jarg11, double jarg12, String jarg13);
  public final static native long IHistogramFactory_createHistogram3D__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, int jarg7, double jarg8, double jarg9, int jarg10, double jarg11, double jarg12);
  public final static native long IHistogramFactory_createHistogram3D__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, int jarg3, double jarg4, double jarg5, int jarg6, double jarg7, double jarg8, int jarg9, double jarg10, double jarg11);
  public final static native long IHistogramFactory_createHistogram3D__SWIG_3(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double[] jarg6, String jarg7);
  public final static native long IHistogramFactory_createHistogram3D__SWIG_4(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double[] jarg6);
  public final static native long IHistogramFactory_createCopy__SWIG_5(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_);
  public final static native long IHistogramFactory_createProfile1D__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, String jarg7);
  public final static native long IHistogramFactory_createProfile1D__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6);
  public final static native long IHistogramFactory_createProfile1D__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, double jarg7, double jarg8, String jarg9);
  public final static native long IHistogramFactory_createProfile1D__SWIG_3(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, double jarg7, double jarg8);
  public final static native long IHistogramFactory_createProfile1D__SWIG_4(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, String jarg5);
  public final static native long IHistogramFactory_createProfile1D__SWIG_5(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4);
  public final static native long IHistogramFactory_createProfile1D__SWIG_6(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double jarg5, double jarg6, String jarg7);
  public final static native long IHistogramFactory_createProfile1D__SWIG_7(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double jarg5, double jarg6);
  public final static native long IHistogramFactory_createProfile1D__SWIG_8(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, int jarg3, double jarg4, double jarg5);
  public final static native long IHistogramFactory_createProfile1D__SWIG_9(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, int jarg3, double jarg4, double jarg5, double jarg6, double jarg7);
  public final static native long IHistogramFactory_createCopy__SWIG_6(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IProfile1D jarg3_);
  public final static native long IHistogramFactory_createProfile2D__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, int jarg7, double jarg8, double jarg9, String jarg10);
  public final static native long IHistogramFactory_createProfile2D__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, int jarg7, double jarg8, double jarg9);
  public final static native long IHistogramFactory_createProfile2D__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, int jarg7, double jarg8, double jarg9, double jarg10, double jarg11, String jarg12);
  public final static native long IHistogramFactory_createProfile2D__SWIG_3(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, int jarg4, double jarg5, double jarg6, int jarg7, double jarg8, double jarg9, double jarg10, double jarg11);
  public final static native long IHistogramFactory_createProfile2D__SWIG_4(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, String jarg6);
  public final static native long IHistogramFactory_createProfile2D__SWIG_5(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5);
  public final static native long IHistogramFactory_createProfile2D__SWIG_6(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double jarg6, double jarg7, String jarg8);
  public final static native long IHistogramFactory_createProfile2D__SWIG_7(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double jarg6, double jarg7);
  public final static native long IHistogramFactory_createProfile2D__SWIG_8(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, int jarg3, double jarg4, double jarg5, int jarg6, double jarg7, double jarg8);
  public final static native long IHistogramFactory_createProfile2D__SWIG_9(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, int jarg3, double jarg4, double jarg5, int jarg6, double jarg7, double jarg8, double jarg9, double jarg10);
  public final static native long IHistogramFactory_createCopy__SWIG_7(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IProfile2D jarg3_);
  public final static native long IHistogramFactory_add__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram1D jarg3_, long jarg4, hep.aida.IHistogram1D jarg4_);
  public final static native long IHistogramFactory_subtract__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram1D jarg3_, long jarg4, hep.aida.IHistogram1D jarg4_);
  public final static native long IHistogramFactory_multiply__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram1D jarg3_, long jarg4, hep.aida.IHistogram1D jarg4_);
  public final static native long IHistogramFactory_divide__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram1D jarg3_, long jarg4, hep.aida.IHistogram1D jarg4_);
  public final static native long IHistogramFactory_add__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_, long jarg4, hep.aida.IHistogram2D jarg4_);
  public final static native long IHistogramFactory_subtract__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_, long jarg4, hep.aida.IHistogram2D jarg4_);
  public final static native long IHistogramFactory_multiply__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_, long jarg4, hep.aida.IHistogram2D jarg4_);
  public final static native long IHistogramFactory_divide__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_, long jarg4, hep.aida.IHistogram2D jarg4_);
  public final static native long IHistogramFactory_add__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_, long jarg4, hep.aida.IHistogram3D jarg4_);
  public final static native long IHistogramFactory_subtract__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_, long jarg4, hep.aida.IHistogram3D jarg4_);
  public final static native long IHistogramFactory_multiply__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_, long jarg4, hep.aida.IHistogram3D jarg4_);
  public final static native long IHistogramFactory_divide__SWIG_2(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_, long jarg4, hep.aida.IHistogram3D jarg4_);
  public final static native long IHistogramFactory_projectionX(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_);
  public final static native long IHistogramFactory_projectionY(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_);
  public final static native long IHistogramFactory_sliceX__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_, int jarg4);
  public final static native long IHistogramFactory_sliceY__SWIG_0(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_, int jarg4);
  public final static native long IHistogramFactory_sliceX__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_, int jarg4, int jarg5);
  public final static native long IHistogramFactory_sliceY__SWIG_1(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_, int jarg4, int jarg5);
  public final static native long IHistogramFactory_projectionXY(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_);
  public final static native long IHistogramFactory_projectionXZ(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_);
  public final static native long IHistogramFactory_projectionYZ(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_);
  public final static native long IHistogramFactory_sliceXY(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_, int jarg4, int jarg5);
  public final static native long IHistogramFactory_sliceXZ(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_, int jarg4, int jarg5);
  public final static native long IHistogramFactory_sliceYZ(long jarg1, hep.aida.IHistogramFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_, int jarg4, int jarg5);
  public final static native long new_IHistogramFactory();
  public final static native void IHistogramFactory_director_connect(hep.aida.IHistogramFactory obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IHistogramFactory_change_ownership(hep.aida.IHistogramFactory obj, long cptr, boolean take_or_release);
  public final static native void delete_IDataPoint(long jarg1);
  public final static native int IDataPoint_dimension(long jarg1, hep.aida.IDataPoint jarg1_);
  public final static native long IDataPoint_coordinate(long jarg1, hep.aida.IDataPoint jarg1_, int jarg2);
  public final static native long new_IDataPoint();
  public final static native void IDataPoint_director_connect(hep.aida.IDataPoint obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IDataPoint_change_ownership(hep.aida.IDataPoint obj, long cptr, boolean take_or_release);
  public final static native void delete_IDataPointSet(long jarg1);
  public final static native long IDataPointSet_annotation(long jarg1, hep.aida.IDataPointSet jarg1_);
  public final static native String IDataPointSet_title(long jarg1, hep.aida.IDataPointSet jarg1_);
  public final static native void IDataPointSet_setTitle(long jarg1, hep.aida.IDataPointSet jarg1_, String jarg2);
  public final static native int IDataPointSet_dimension(long jarg1, hep.aida.IDataPointSet jarg1_);
  public final static native void IDataPointSet_clear(long jarg1, hep.aida.IDataPointSet jarg1_);
  public final static native int IDataPointSet_size(long jarg1, hep.aida.IDataPointSet jarg1_);
  public final static native void IDataPointSet_setCoordinate__SWIG_0(long jarg1, hep.aida.IDataPointSet jarg1_, int jarg2, double[] jarg3, double[] jarg4);
  public final static native void IDataPointSet_setCoordinate__SWIG_1(long jarg1, hep.aida.IDataPointSet jarg1_, int jarg2, double[] jarg3, double[] jarg4, double[] jarg5);
  public final static native long IDataPointSet_point(long jarg1, hep.aida.IDataPointSet jarg1_, int jarg2);
  public final static native long IDataPointSet_addPoint__SWIG_0(long jarg1, hep.aida.IDataPointSet jarg1_);
  public final static native void IDataPointSet_addPoint__SWIG_1(long jarg1, hep.aida.IDataPointSet jarg1_, long jarg2, hep.aida.IDataPoint jarg2_);
  public final static native void IDataPointSet_removePoint(long jarg1, hep.aida.IDataPointSet jarg1_, int jarg2);
  public final static native double IDataPointSet_lowerExtent(long jarg1, hep.aida.IDataPointSet jarg1_, int jarg2);
  public final static native double IDataPointSet_upperExtent(long jarg1, hep.aida.IDataPointSet jarg1_, int jarg2);
  public final static native void IDataPointSet_scale(long jarg1, hep.aida.IDataPointSet jarg1_, double jarg2);
  public final static native void IDataPointSet_scaleValues(long jarg1, hep.aida.IDataPointSet jarg1_, double jarg2);
  public final static native void IDataPointSet_scaleErrors(long jarg1, hep.aida.IDataPointSet jarg1_, double jarg2);
  public final static native long new_IDataPointSet();
  public final static native void IDataPointSet_director_connect(hep.aida.IDataPointSet obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IDataPointSet_change_ownership(hep.aida.IDataPointSet obj, long cptr, boolean take_or_release);
  public final static native void delete_IDataPointSetFactory(long jarg1);
  public final static native long IDataPointSetFactory_create__SWIG_0(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, String jarg3, int jarg4);
  public final static native long IDataPointSetFactory_create__SWIG_1(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, int jarg3);
  public final static native long IDataPointSetFactory_createY__SWIG_0(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5);
  public final static native long IDataPointSetFactory_createY__SWIG_1(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double[] jarg6);
  public final static native long IDataPointSetFactory_createY__SWIG_2(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, double[] jarg3, double[] jarg4);
  public final static native long IDataPointSetFactory_createY__SWIG_3(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, double[] jarg3, double[] jarg4, double[] jarg5);
  public final static native long IDataPointSetFactory_createX__SWIG_0(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5);
  public final static native long IDataPointSetFactory_createX__SWIG_1(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double[] jarg6);
  public final static native long IDataPointSetFactory_createX__SWIG_2(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, double[] jarg3, double[] jarg4);
  public final static native long IDataPointSetFactory_createX__SWIG_3(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, double[] jarg3, double[] jarg4, double[] jarg5);
  public final static native long IDataPointSetFactory_createXY__SWIG_0(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, double[] jarg9);
  public final static native long IDataPointSetFactory_createXY__SWIG_1(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7);
  public final static native long IDataPointSetFactory_createXY__SWIG_2(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8);
  public final static native long IDataPointSetFactory_createXY__SWIG_3(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6);
  public final static native long IDataPointSetFactory_createXYZ__SWIG_0(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, double[] jarg9, double[] jarg10, double[] jarg11, double[] jarg12);
  public final static native long IDataPointSetFactory_createXYZ__SWIG_1(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, String jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, double[] jarg9);
  public final static native long IDataPointSetFactory_createXYZ__SWIG_2(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, double[] jarg9, double[] jarg10, double[] jarg11);
  public final static native long IDataPointSetFactory_createXYZ__SWIG_3(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8);
  public final static native long IDataPointSetFactory_createCopy(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IDataPointSet jarg3_);
  public final static native void IDataPointSetFactory_destroy(long jarg1, hep.aida.IDataPointSetFactory jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_);
  public final static native long IDataPointSetFactory_create__SWIG_2(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram1D jarg3_, String jarg4);
  public final static native long IDataPointSetFactory_create__SWIG_3(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram1D jarg3_);
  public final static native long IDataPointSetFactory_create__SWIG_4(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_, String jarg4);
  public final static native long IDataPointSetFactory_create__SWIG_5(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram2D jarg3_);
  public final static native long IDataPointSetFactory_create__SWIG_6(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_, String jarg4);
  public final static native long IDataPointSetFactory_create__SWIG_7(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IHistogram3D jarg3_);
  public final static native long IDataPointSetFactory_create__SWIG_8(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.ICloud1D jarg3_, String jarg4);
  public final static native long IDataPointSetFactory_create__SWIG_9(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.ICloud1D jarg3_);
  public final static native long IDataPointSetFactory_create__SWIG_10(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.ICloud2D jarg3_, String jarg4);
  public final static native long IDataPointSetFactory_create__SWIG_11(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.ICloud2D jarg3_);
  public final static native long IDataPointSetFactory_create__SWIG_12(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.ICloud3D jarg3_, String jarg4);
  public final static native long IDataPointSetFactory_create__SWIG_13(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.ICloud3D jarg3_);
  public final static native long IDataPointSetFactory_create__SWIG_14(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IProfile1D jarg3_, String jarg4);
  public final static native long IDataPointSetFactory_create__SWIG_15(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IProfile1D jarg3_);
  public final static native long IDataPointSetFactory_create__SWIG_16(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IProfile2D jarg3_, String jarg4);
  public final static native long IDataPointSetFactory_create__SWIG_17(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IProfile2D jarg3_);
  public final static native long IDataPointSetFactory_add(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IDataPointSet jarg3_, long jarg4, hep.aida.IDataPointSet jarg4_);
  public final static native long IDataPointSetFactory_subtract(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IDataPointSet jarg3_, long jarg4, hep.aida.IDataPointSet jarg4_);
  public final static native long IDataPointSetFactory_multiply(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IDataPointSet jarg3_, long jarg4, hep.aida.IDataPointSet jarg4_);
  public final static native long IDataPointSetFactory_divide(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IDataPointSet jarg3_, long jarg4, hep.aida.IDataPointSet jarg4_);
  public final static native long IDataPointSetFactory_weightedMean(long jarg1, hep.aida.IDataPointSetFactory jarg1_, String jarg2, long jarg3, hep.aida.IDataPointSet jarg3_, long jarg4, hep.aida.IDataPointSet jarg4_);
  public final static native long new_IDataPointSetFactory();
  public final static native void IDataPointSetFactory_director_connect(hep.aida.IDataPointSetFactory obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IDataPointSetFactory_change_ownership(hep.aida.IDataPointSetFactory obj, long cptr, boolean take_or_release);
  public final static native void delete_ITree(long jarg1);
  public final static native String ITree_storeName(long jarg1, hep.aida.ITree jarg1_);
  public final static native long ITree_find(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native long ITree_findTree(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native void ITree_cd(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native String ITree_pwd(long jarg1, hep.aida.ITree jarg1_);
  public final static native long ITree_listObjectNames__SWIG_0(long jarg1, hep.aida.ITree jarg1_, String jarg2, boolean jarg3);
  public final static native long ITree_listObjectNames__SWIG_1(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native long ITree_listObjectNames__SWIG_2(long jarg1, hep.aida.ITree jarg1_);
  public final static native long ITree_listObjectTypes__SWIG_0(long jarg1, hep.aida.ITree jarg1_, String jarg2, boolean jarg3);
  public final static native long ITree_listObjectTypes__SWIG_1(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native long ITree_listObjectTypes__SWIG_2(long jarg1, hep.aida.ITree jarg1_);
  public final static native void ITree_mkdir(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native void ITree_mkdirs(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native void ITree_rmdir(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native void ITree_rm(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native String ITree_findPath(long jarg1, hep.aida.ITree jarg1_, long jarg2, hep.aida.IManagedObject jarg2_);
  public final static native void ITree_mv(long jarg1, hep.aida.ITree jarg1_, String jarg2, String jarg3);
  public final static native void ITree_commit(long jarg1, hep.aida.ITree jarg1_);
  public final static native void ITree_setOverwrite__SWIG_0(long jarg1, hep.aida.ITree jarg1_, boolean jarg2);
  public final static native void ITree_setOverwrite__SWIG_1(long jarg1, hep.aida.ITree jarg1_);
  public final static native void ITree_cp__SWIG_0(long jarg1, hep.aida.ITree jarg1_, String jarg2, String jarg3, boolean jarg4);
  public final static native void ITree_cp__SWIG_1(long jarg1, hep.aida.ITree jarg1_, String jarg2, String jarg3);
  public final static native void ITree_symlink(long jarg1, hep.aida.ITree jarg1_, String jarg2, String jarg3);
  public final static native void ITree_mount(long jarg1, hep.aida.ITree jarg1_, String jarg2, long jarg3, hep.aida.ITree jarg3_, String jarg4);
  public final static native void ITree_unmount(long jarg1, hep.aida.ITree jarg1_, String jarg2);
  public final static native void ITree_close(long jarg1, hep.aida.ITree jarg1_);
  public final static native long new_ITree();
  public final static native void ITree_director_connect(hep.aida.ITree obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITree_change_ownership(hep.aida.ITree obj, long cptr, boolean take_or_release);
  public final static native void delete_ITreeFactory(long jarg1);
  public final static native long ITreeFactory_create__SWIG_0(long jarg1, hep.aida.ITreeFactory jarg1_);
  public final static native long ITreeFactory_create__SWIG_1(long jarg1, hep.aida.ITreeFactory jarg1_, String jarg2, String jarg3, boolean jarg4, boolean jarg5, String jarg6);
  public final static native long ITreeFactory_create__SWIG_2(long jarg1, hep.aida.ITreeFactory jarg1_, String jarg2, String jarg3, boolean jarg4, boolean jarg5);
  public final static native long ITreeFactory_create__SWIG_3(long jarg1, hep.aida.ITreeFactory jarg1_, String jarg2, String jarg3, boolean jarg4);
  public final static native long ITreeFactory_create__SWIG_4(long jarg1, hep.aida.ITreeFactory jarg1_, String jarg2, String jarg3);
  public final static native long ITreeFactory_create__SWIG_5(long jarg1, hep.aida.ITreeFactory jarg1_, String jarg2);
  public final static native long new_ITreeFactory();
  public final static native void ITreeFactory_director_connect(hep.aida.ITreeFactory obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITreeFactory_change_ownership(hep.aida.ITreeFactory obj, long cptr, boolean take_or_release);
  public final static native void delete_IFilter(long jarg1);
  public final static native void IFilter_initialize(long jarg1, hep.aida.IFilter jarg1_, long jarg2, hep.aida.ITuple jarg2_);
  public final static native boolean IFilter_accept(long jarg1, hep.aida.IFilter jarg1_);
  public final static native String IFilter_expression(long jarg1, hep.aida.IFilter jarg1_);
  public final static native long new_IFilter();
  public final static native void IFilter_director_connect(hep.aida.IFilter obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFilter_change_ownership(hep.aida.IFilter obj, long cptr, boolean take_or_release);
  public final static native void delete_ITupleEntry(long jarg1);
  public final static native long new_ITupleEntry();
  public final static native void ITupleEntry_director_connect(hep.aida.ITupleEntry obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITupleEntry_change_ownership(hep.aida.ITupleEntry obj, long cptr, boolean take_or_release);
  public final static native void delete_IEvaluator(long jarg1);
  public final static native void IEvaluator_initialize(long jarg1, hep.aida.IEvaluator jarg1_, long jarg2, hep.aida.ITuple jarg2_);
  public final static native double IEvaluator_evaluateDouble(long jarg1, hep.aida.IEvaluator jarg1_);
  public final static native String IEvaluator_expression(long jarg1, hep.aida.IEvaluator jarg1_);
  public final static native long new_IEvaluator();
  public final static native void IEvaluator_director_connect(hep.aida.IEvaluator obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IEvaluator_change_ownership(hep.aida.IEvaluator obj, long cptr, boolean take_or_release);
  public final static native void delete_ITuple(long jarg1);
  public final static native String ITuple_title(long jarg1, hep.aida.ITuple jarg1_);
  public final static native void ITuple_setTitle(long jarg1, hep.aida.ITuple jarg1_, String jarg2);
  public final static native long ITuple_annotation(long jarg1, hep.aida.ITuple jarg1_);
  public final static native void ITuple_fill__SWIG_0(long jarg1, hep.aida.ITuple jarg1_, int jarg2, double jarg3);
  public final static native void ITuple_fill__SWIG_1(long jarg1, hep.aida.ITuple jarg1_, int jarg2, float jarg3);
  public final static native void ITuple_fill__SWIG_2(long jarg1, hep.aida.ITuple jarg1_, int jarg2, int jarg3);
  public final static native void ITuple_fill__SWIG_3(long jarg1, hep.aida.ITuple jarg1_, int jarg2, short jarg3);
  public final static native void ITuple_fill__SWIG_4(long jarg1, hep.aida.ITuple jarg1_, int jarg2, long jarg3);
  public final static native void ITuple_fill__SWIG_5(long jarg1, hep.aida.ITuple jarg1_, int jarg2, char jarg3);
  public final static native void ITuple_fill__SWIG_6(long jarg1, hep.aida.ITuple jarg1_, int jarg2, boolean jarg3);
  public final static native void ITuple_fill__SWIG_7(long jarg1, hep.aida.ITuple jarg1_, int jarg2, String jarg3);
  public final static native void ITuple_fill__SWIG_8(long jarg1, hep.aida.ITuple jarg1_, int jarg2, long jarg3, hep.aida.ITupleEntry jarg3_);
  public final static native void ITuple_fill__SWIG_9(long jarg1, hep.aida.ITuple jarg1_, double[] jarg2);
  public final static native void ITuple_fill__SWIG_10(long jarg1, hep.aida.ITuple jarg1_, float[] jarg2);
  public final static native void ITuple_addRow(long jarg1, hep.aida.ITuple jarg1_);
  public final static native void ITuple_resetRow(long jarg1, hep.aida.ITuple jarg1_);
  public final static native void ITuple_reset(long jarg1, hep.aida.ITuple jarg1_);
  public final static native int ITuple_rows(long jarg1, hep.aida.ITuple jarg1_);
  public final static native void ITuple_start(long jarg1, hep.aida.ITuple jarg1_);
  public final static native void ITuple_skip(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native boolean ITuple_next(long jarg1, hep.aida.ITuple jarg1_);
  public final static native void ITuple_setRow(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native int ITuple_findColumn(long jarg1, hep.aida.ITuple jarg1_, String jarg2);
  public final static native double ITuple_getDouble(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native float ITuple_getFloat(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native int ITuple_getInt(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native short ITuple_getShort(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native long ITuple_getLong(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native char ITuple_getChar(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native boolean ITuple_getBoolean(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native String ITuple_getString(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native long ITuple_getObject(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native long ITuple_getTuple(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native int ITuple_columns(long jarg1, hep.aida.ITuple jarg1_);
  public final static native String ITuple_columnName(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native long ITuple_columnNames(long jarg1, hep.aida.ITuple jarg1_);
  public final static native String ITuple_columnType(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native long ITuple_columnTypes(long jarg1, hep.aida.ITuple jarg1_);
  public final static native double ITuple_columnMin(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native double ITuple_columnMax(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native double ITuple_columnMean(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native double ITuple_columnRms(long jarg1, hep.aida.ITuple jarg1_, int jarg2);
  public final static native void ITuple_project__SWIG_0(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_);
  public final static native void ITuple_project__SWIG_1(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IFilter jarg4_);
  public final static native void ITuple_project__SWIG_2(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_);
  public final static native void ITuple_project__SWIG_3(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IFilter jarg4_, long jarg5, hep.aida.IEvaluator jarg5_);
  public final static native void ITuple_project__SWIG_4(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_);
  public final static native void ITuple_project__SWIG_5(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IFilter jarg5_);
  public final static native void ITuple_project__SWIG_6(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_);
  public final static native void ITuple_project__SWIG_7(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IFilter jarg5_, long jarg6, hep.aida.IEvaluator jarg6_);
  public final static native void ITuple_project__SWIG_8(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram3D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_);
  public final static native void ITuple_project__SWIG_9(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram3D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_, long jarg6, hep.aida.IFilter jarg6_);
  public final static native void ITuple_project__SWIG_10(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram3D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_, long jarg6, hep.aida.IEvaluator jarg6_);
  public final static native void ITuple_project__SWIG_11(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IHistogram3D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_, long jarg6, hep.aida.IFilter jarg6_, long jarg7, hep.aida.IEvaluator jarg7_);
  public final static native void ITuple_project__SWIG_12(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_);
  public final static native void ITuple_project__SWIG_13(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IFilter jarg4_);
  public final static native void ITuple_project__SWIG_14(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_);
  public final static native void ITuple_project__SWIG_15(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IFilter jarg4_, long jarg5, hep.aida.IEvaluator jarg5_);
  public final static native void ITuple_project__SWIG_16(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_);
  public final static native void ITuple_project__SWIG_17(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IFilter jarg5_);
  public final static native void ITuple_project__SWIG_18(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_);
  public final static native void ITuple_project__SWIG_19(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IFilter jarg5_, long jarg6, hep.aida.IEvaluator jarg6_);
  public final static native void ITuple_project__SWIG_20(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud3D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_);
  public final static native void ITuple_project__SWIG_21(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud3D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_, long jarg6, hep.aida.IFilter jarg6_);
  public final static native void ITuple_project__SWIG_22(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud3D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_, long jarg6, hep.aida.IEvaluator jarg6_);
  public final static native void ITuple_project__SWIG_23(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.ICloud3D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_, long jarg6, hep.aida.IFilter jarg6_, long jarg7, hep.aida.IEvaluator jarg7_);
  public final static native void ITuple_project__SWIG_24(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IProfile1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_);
  public final static native void ITuple_project__SWIG_25(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IProfile1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IFilter jarg5_);
  public final static native void ITuple_project__SWIG_26(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IProfile1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_);
  public final static native void ITuple_project__SWIG_27(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IProfile1D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IFilter jarg5_, long jarg6, hep.aida.IEvaluator jarg6_);
  public final static native void ITuple_project__SWIG_28(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IProfile2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_);
  public final static native void ITuple_project__SWIG_29(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IProfile2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_, long jarg6, hep.aida.IFilter jarg6_);
  public final static native void ITuple_project__SWIG_30(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IProfile2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_, long jarg6, hep.aida.IEvaluator jarg6_);
  public final static native void ITuple_project__SWIG_31(long jarg1, hep.aida.ITuple jarg1_, long jarg2, hep.aida.IProfile2D jarg2_, long jarg3, hep.aida.IEvaluator jarg3_, long jarg4, hep.aida.IEvaluator jarg4_, long jarg5, hep.aida.IEvaluator jarg5_, long jarg6, hep.aida.IFilter jarg6_, long jarg7, hep.aida.IEvaluator jarg7_);
  public final static native long new_ITuple();
  public final static native void ITuple_director_connect(hep.aida.ITuple obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITuple_change_ownership(hep.aida.ITuple obj, long cptr, boolean take_or_release);
  public final static native void delete_ITupleFactory(long jarg1);
  public final static native long ITupleFactory_create__SWIG_0(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, String jarg3, long jarg4, long jarg5, String jarg6);
  public final static native long ITupleFactory_create__SWIG_1(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, String jarg3, long jarg4, long jarg5);
  public final static native long ITupleFactory_create__SWIG_2(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, String jarg3, String jarg4, String jarg5);
  public final static native long ITupleFactory_create__SWIG_3(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native long ITupleFactory_createChained__SWIG_0(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, String jarg3, long jarg4);
  public final static native long ITupleFactory_createChained__SWIG_1(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, String jarg3, long jarg4);
  public final static native long ITupleFactory_createFiltered__SWIG_0(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, long jarg3, hep.aida.ITuple jarg3_, long jarg4, hep.aida.IFilter jarg4_);
  public final static native long ITupleFactory_createFiltered__SWIG_1(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, long jarg3, hep.aida.ITuple jarg3_, long jarg4, hep.aida.IFilter jarg4_, long jarg5);
  public final static native long ITupleFactory_createFilter__SWIG_0(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2);
  public final static native long ITupleFactory_createFilter__SWIG_1(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, int jarg3, int jarg4);
  public final static native long ITupleFactory_createFilter__SWIG_2(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2, int jarg3);
  public final static native long ITupleFactory_createEvaluator(long jarg1, hep.aida.ITupleFactory jarg1_, String jarg2);
  public final static native long new_ITupleFactory();
  public final static native void ITupleFactory_director_connect(hep.aida.ITupleFactory obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITupleFactory_change_ownership(hep.aida.ITupleFactory obj, long cptr, boolean take_or_release);
  public final static native void delete_IMeasurement(long jarg1);
  public final static native double IMeasurement_value(long jarg1, hep.aida.IMeasurement jarg1_);
  public final static native double IMeasurement_errorPlus(long jarg1, hep.aida.IMeasurement jarg1_);
  public final static native double IMeasurement_errorMinus(long jarg1, hep.aida.IMeasurement jarg1_);
  public final static native void IMeasurement_setValue(long jarg1, hep.aida.IMeasurement jarg1_, double jarg2);
  public final static native void IMeasurement_setErrorPlus(long jarg1, hep.aida.IMeasurement jarg1_, double jarg2);
  public final static native void IMeasurement_setErrorMinus(long jarg1, hep.aida.IMeasurement jarg1_, double jarg2);
  public final static native long new_IMeasurement();
  public final static native void IMeasurement_director_connect(hep.aida.IMeasurement obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IMeasurement_change_ownership(hep.aida.IMeasurement obj, long cptr, boolean take_or_release);
  public final static native void delete_IRangeSet(long jarg1);
  public final static native double[] IRangeSet_lowerBounds(long jarg1, hep.aida.IRangeSet jarg1_);
  public final static native double[] IRangeSet_upperBounds(long jarg1, hep.aida.IRangeSet jarg1_);
  public final static native void IRangeSet_include(long jarg1, hep.aida.IRangeSet jarg1_, double jarg2, double jarg3);
  public final static native void IRangeSet_exclude(long jarg1, hep.aida.IRangeSet jarg1_, double jarg2, double jarg3);
  public final static native void IRangeSet_includeAll(long jarg1, hep.aida.IRangeSet jarg1_);
  public final static native void IRangeSet_excludeAll(long jarg1, hep.aida.IRangeSet jarg1_);
  public final static native boolean IRangeSet_isInRange(long jarg1, hep.aida.IRangeSet jarg1_, double jarg2);
  public final static native int IRangeSet_size(long jarg1, hep.aida.IRangeSet jarg1_);
  public final static native double IRangeSet_PLUS_INF(long jarg1, hep.aida.IRangeSet jarg1_);
  public final static native double IRangeSet_MINUS_INF(long jarg1, hep.aida.IRangeSet jarg1_);
  public final static native long new_IRangeSet();
  public final static native void IRangeSet_director_connect(hep.aida.IRangeSet obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IRangeSet_change_ownership(hep.aida.IRangeSet obj, long cptr, boolean take_or_release);
  public final static native void delete_IFitData(long jarg1);
  public final static native void IFitData_create1DConnection__SWIG_0(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IHistogram1D jarg2_);
  public final static native void IFitData_create1DConnection__SWIG_1(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.ICloud1D jarg2_);
  public final static native void IFitData_create1DConnection__SWIG_2(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IProfile1D jarg2_);
  public final static native void IFitData_create1DConnection__SWIG_3(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, int jarg3, int jarg4);
  public final static native void IFitData_create2DConnection__SWIG_0(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IHistogram2D jarg2_);
  public final static native void IFitData_create2DConnection__SWIG_1(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IHistogram2D jarg2_, int jarg3, int jarg4);
  public final static native void IFitData_create2DConnection__SWIG_2(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.ICloud2D jarg2_);
  public final static native void IFitData_create2DConnection__SWIG_3(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.ICloud2D jarg2_, int jarg3, int jarg4);
  public final static native void IFitData_create2DConnection__SWIG_4(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IProfile2D jarg2_);
  public final static native void IFitData_create2DConnection__SWIG_5(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IProfile2D jarg2_, int jarg3, int jarg4);
  public final static native void IFitData_create2DConnection__SWIG_6(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, int jarg3, int jarg4, int jarg5);
  public final static native void IFitData_create3DConnection__SWIG_0(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IHistogram3D jarg2_);
  public final static native void IFitData_create3DConnection__SWIG_1(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IHistogram3D jarg2_, int jarg3, int jarg4, int jarg5);
  public final static native void IFitData_create3DConnection__SWIG_2(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.ICloud3D jarg2_);
  public final static native void IFitData_create3DConnection__SWIG_3(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.ICloud3D jarg2_, int jarg3, int jarg4, int jarg5);
  public final static native void IFitData_create3DConnection__SWIG_4(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, int jarg3, int jarg4, int jarg5, int jarg6);
  public final static native void IFitData_createConnection__SWIG_0(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.ITuple jarg2_, long jarg3);
  public final static native void IFitData_createConnection__SWIG_1(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.ITuple jarg2_, long jarg3);
  public final static native void IFitData_createConnection__SWIG_2(long jarg1, hep.aida.IFitData jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, int[] jarg3, int jarg4);
  public final static native void IFitData_reset(long jarg1, hep.aida.IFitData jarg1_);
  public final static native int IFitData_dimension(long jarg1, hep.aida.IFitData jarg1_);
  public final static native String IFitData_dataDescription(long jarg1, hep.aida.IFitData jarg1_);
  public final static native long IFitData_range(long jarg1, hep.aida.IFitData jarg1_, int jarg2);
  public final static native long new_IFitData();
  public final static native void IFitData_director_connect(hep.aida.IFitData obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFitData_change_ownership(hep.aida.IFitData obj, long cptr, boolean take_or_release);
  public final static native void delete_IFunction(long jarg1);
  public final static native String IFunction_title(long jarg1, hep.aida.IFunction jarg1_);
  public final static native void IFunction_setTitle(long jarg1, hep.aida.IFunction jarg1_, String jarg2);
  public final static native double IFunction_value(long jarg1, hep.aida.IFunction jarg1_, double[] jarg2);
  public final static native int IFunction_dimension(long jarg1, hep.aida.IFunction jarg1_);
  public final static native boolean IFunction_isEqual(long jarg1, hep.aida.IFunction jarg1_, long jarg2, hep.aida.IFunction jarg2_);
  public final static native double[] IFunction_gradient(long jarg1, hep.aida.IFunction jarg1_, double[] jarg2);
  public final static native boolean IFunction_providesGradient(long jarg1, hep.aida.IFunction jarg1_);
  public final static native String IFunction_variableName(long jarg1, hep.aida.IFunction jarg1_, int jarg2);
  public final static native long IFunction_variableNames(long jarg1, hep.aida.IFunction jarg1_);
  public final static native void IFunction_setParameters(long jarg1, hep.aida.IFunction jarg1_, double[] jarg2);
  public final static native double[] IFunction_parameters(long jarg1, hep.aida.IFunction jarg1_);
  public final static native int IFunction_numberOfParameters(long jarg1, hep.aida.IFunction jarg1_);
  public final static native long IFunction_parameterNames(long jarg1, hep.aida.IFunction jarg1_);
  public final static native void IFunction_setParameter(long jarg1, hep.aida.IFunction jarg1_, String jarg2, double jarg3);
  public final static native double IFunction_parameter(long jarg1, hep.aida.IFunction jarg1_, String jarg2);
  public final static native int IFunction_indexOfParameter(long jarg1, hep.aida.IFunction jarg1_, String jarg2);
  public final static native long IFunction_annotation(long jarg1, hep.aida.IFunction jarg1_);
  public final static native String IFunction_codeletString(long jarg1, hep.aida.IFunction jarg1_);
  public final static native long new_IFunction();
  public final static native void IFunction_director_connect(hep.aida.IFunction obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFunction_change_ownership(hep.aida.IFunction obj, long cptr, boolean take_or_release);
  public final static native int AIDA_IFITPARAMETERSETTINGS_H_get();
  public final static native void delete_IFitParameterSettings(long jarg1);
  public final static native String IFitParameterSettings_name(long jarg1, hep.aida.IFitParameterSettings jarg1_);
  public final static native double IFitParameterSettings_stepSize(long jarg1, hep.aida.IFitParameterSettings jarg1_);
  public final static native double IFitParameterSettings_upperBound(long jarg1, hep.aida.IFitParameterSettings jarg1_);
  public final static native double IFitParameterSettings_lowerBound(long jarg1, hep.aida.IFitParameterSettings jarg1_);
  public final static native boolean IFitParameterSettings_isBound(long jarg1, hep.aida.IFitParameterSettings jarg1_);
  public final static native boolean IFitParameterSettings_isFixed(long jarg1, hep.aida.IFitParameterSettings jarg1_);
  public final static native void IFitParameterSettings_setStepSize(long jarg1, hep.aida.IFitParameterSettings jarg1_, double jarg2);
  public final static native void IFitParameterSettings_setBounds(long jarg1, hep.aida.IFitParameterSettings jarg1_, double jarg2, double jarg3);
  public final static native void IFitParameterSettings_removeBounds(long jarg1, hep.aida.IFitParameterSettings jarg1_);
  public final static native void IFitParameterSettings_setFixed(long jarg1, hep.aida.IFitParameterSettings jarg1_, boolean jarg2);
  public final static native void IFitParameterSettings_setLowerBound(long jarg1, hep.aida.IFitParameterSettings jarg1_, double jarg2);
  public final static native void IFitParameterSettings_setUpperBound(long jarg1, hep.aida.IFitParameterSettings jarg1_, double jarg2);
  public final static native void IFitParameterSettings_reset(long jarg1, hep.aida.IFitParameterSettings jarg1_);
  public final static native long new_IFitParameterSettings();
  public final static native void IFitParameterSettings_director_connect(hep.aida.IFitParameterSettings obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFitParameterSettings_change_ownership(hep.aida.IFitParameterSettings obj, long cptr, boolean take_or_release);
  public final static native void delete_IFitResult(long jarg1);
  public final static native boolean IFitResult_isValid(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native int IFitResult_fitStatus(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native long IFitResult_fittedFunction(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native double IFitResult_quality(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native int IFitResult_ndf(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native double IFitResult_covMatrixElement(long jarg1, hep.aida.IFitResult jarg1_, int jarg2, int jarg3);
  public final static native String IFitResult_fitMethodName(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native String IFitResult_engineName(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native String IFitResult_dataDescription(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native long IFitResult_constraints(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native long IFitResult_fitParameterSettings(long jarg1, hep.aida.IFitResult jarg1_, String jarg2);
  public final static native double[] IFitResult_fittedParameters(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native long IFitResult_fittedParameterNames(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native double IFitResult_fittedParameter(long jarg1, hep.aida.IFitResult jarg1_, String jarg2);
  public final static native double[] IFitResult_errors(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native double[] IFitResult_errorsPlus(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native double[] IFitResult_errorsMinus(long jarg1, hep.aida.IFitResult jarg1_);
  public final static native long new_IFitResult();
  public final static native void IFitResult_director_connect(hep.aida.IFitResult obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFitResult_change_ownership(hep.aida.IFitResult obj, long cptr, boolean take_or_release);
  public final static native void delete_IFitter(long jarg1);
  public final static native long IFitter_fit__SWIG_0(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IFitData jarg2_, long jarg3, hep.aida.IFunction jarg3_);
  public final static native long IFitter_fit__SWIG_1(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IBaseHistogram jarg2_, long jarg3, hep.aida.IFunction jarg3_);
  public final static native long IFitter_fit__SWIG_2(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IBaseHistogram jarg2_, String jarg3);
  public final static native long IFitter_fit__SWIG_3(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IBaseHistogram jarg2_, String jarg3, double[] jarg4);
  public final static native long IFitter_fit__SWIG_4(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, long jarg3, hep.aida.IFunction jarg3_);
  public final static native long IFitter_fit__SWIG_5(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, String jarg3);
  public final static native long IFitter_fit__SWIG_6(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, String jarg3, double[] jarg4);
  public final static native long IFitter_fit__SWIG_7(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IFitData jarg2_, String jarg3);
  public final static native long IFitter_fit__SWIG_8(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IFitData jarg2_, String jarg3, double[] jarg4);
  public final static native void IFitter_setEngine(long jarg1, hep.aida.IFitter jarg1_, String jarg2);
  public final static native String IFitter_engineName(long jarg1, hep.aida.IFitter jarg1_);
  public final static native long IFitter_fitParameterSettings(long jarg1, hep.aida.IFitter jarg1_, String jarg2);
  public final static native long IFitter_listParameterSettings(long jarg1, hep.aida.IFitter jarg1_);
  public final static native void IFitter_resetParameterSettings(long jarg1, hep.aida.IFitter jarg1_);
  public final static native void IFitter_setConstraint(long jarg1, hep.aida.IFitter jarg1_, String jarg2);
  public final static native long IFitter_constraints(long jarg1, hep.aida.IFitter jarg1_);
  public final static native void IFitter_resetConstraints(long jarg1, hep.aida.IFitter jarg1_);
  public final static native void IFitter_setFitMethod(long jarg1, hep.aida.IFitter jarg1_, String jarg2);
  public final static native String IFitter_fitMethodName(long jarg1, hep.aida.IFitter jarg1_);
  public final static native long IFitter_createScan1D(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IFitData jarg2_, long jarg3, hep.aida.IFunction jarg3_, String jarg4, int jarg5, double jarg6, double jarg7);
  public final static native long IFitter_createContour(long jarg1, hep.aida.IFitter jarg1_, long jarg2, hep.aida.IFitData jarg2_, long jarg3, hep.aida.IFitResult jarg3_, String jarg4, String jarg5, int jarg6, double jarg7);
  public final static native void IFitter_setUseFunctionGradient(long jarg1, hep.aida.IFitter jarg1_, boolean jarg2);
  public final static native boolean IFitter_useFunctionGradient(long jarg1, hep.aida.IFitter jarg1_);
  public final static native long new_IFitter();
  public final static native void IFitter_director_connect(hep.aida.IFitter obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFitter_change_ownership(hep.aida.IFitter obj, long cptr, boolean take_or_release);
  public final static native void delete_IFitFactory(long jarg1);
  public final static native long IFitFactory_createFitData(long jarg1, hep.aida.IFitFactory jarg1_);
  public final static native long IFitFactory_createFitter__SWIG_0(long jarg1, hep.aida.IFitFactory jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native long IFitFactory_createFitter__SWIG_1(long jarg1, hep.aida.IFitFactory jarg1_, String jarg2, String jarg3);
  public final static native long IFitFactory_createFitter__SWIG_2(long jarg1, hep.aida.IFitFactory jarg1_, String jarg2);
  public final static native long IFitFactory_createFitter__SWIG_3(long jarg1, hep.aida.IFitFactory jarg1_);
  public final static native long new_IFitFactory();
  public final static native void IFitFactory_director_connect(hep.aida.IFitFactory obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFitFactory_change_ownership(hep.aida.IFitFactory obj, long cptr, boolean take_or_release);
  public final static native void delete_IModelFunction(long jarg1);
  public final static native boolean IModelFunction_providesNormalization(long jarg1, hep.aida.IModelFunction jarg1_);
  public final static native void IModelFunction_normalize(long jarg1, hep.aida.IModelFunction jarg1_, boolean jarg2);
  public final static native boolean IModelFunction_isNormalized(long jarg1, hep.aida.IModelFunction jarg1_);
  public final static native double[] IModelFunction_parameterGradient(long jarg1, hep.aida.IModelFunction jarg1_, double[] jarg2);
  public final static native boolean IModelFunction_providesParameterGradient(long jarg1, hep.aida.IModelFunction jarg1_);
  public final static native long IModelFunction_normalizationRange(long jarg1, hep.aida.IModelFunction jarg1_, int jarg2);
  public final static native void IModelFunction_includeNormalizationAll(long jarg1, hep.aida.IModelFunction jarg1_);
  public final static native void IModelFunction_excludeNormalizationAll(long jarg1, hep.aida.IModelFunction jarg1_);
  public final static native long new_IModelFunction();
  public final static native void IModelFunction_director_connect(hep.aida.IModelFunction obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IModelFunction_change_ownership(hep.aida.IModelFunction obj, long cptr, boolean take_or_release);
  public final static native void delete_IFunctionCatalog(long jarg1);
  public final static native boolean IFunctionCatalog_add__SWIG_0(long jarg1, hep.aida.IFunctionCatalog jarg1_, String jarg2, long jarg3, hep.aida.IFunction jarg3_);
  public final static native boolean IFunctionCatalog_add__SWIG_1(long jarg1, hep.aida.IFunctionCatalog jarg1_, String jarg2, String jarg3);
  public final static native long IFunctionCatalog_list(long jarg1, hep.aida.IFunctionCatalog jarg1_);
  public final static native void IFunctionCatalog_remove(long jarg1, hep.aida.IFunctionCatalog jarg1_, String jarg2);
  public final static native void IFunctionCatalog_storeAll(long jarg1, hep.aida.IFunctionCatalog jarg1_, String jarg2);
  public final static native void IFunctionCatalog_loadAll(long jarg1, hep.aida.IFunctionCatalog jarg1_, String jarg2);
  public final static native long new_IFunctionCatalog();
  public final static native void IFunctionCatalog_director_connect(hep.aida.IFunctionCatalog obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFunctionCatalog_change_ownership(hep.aida.IFunctionCatalog obj, long cptr, boolean take_or_release);
  public final static native void delete_IFunctionFactory(long jarg1);
  public final static native long IFunctionFactory_createFunctionByName(long jarg1, hep.aida.IFunctionFactory jarg1_, String jarg2, String jarg3);
  public final static native long IFunctionFactory_createFunctionFromScript__SWIG_0(long jarg1, hep.aida.IFunctionFactory jarg1_, String jarg2, int jarg3, String jarg4, String jarg5, String jarg6, String jarg7);
  public final static native long IFunctionFactory_createFunctionFromScript__SWIG_1(long jarg1, hep.aida.IFunctionFactory jarg1_, String jarg2, int jarg3, String jarg4, String jarg5, String jarg6);
  public final static native long IFunctionFactory_cloneFunction(long jarg1, hep.aida.IFunctionFactory jarg1_, String jarg2, long jarg3, hep.aida.IFunction jarg3_);
  public final static native long IFunctionFactory_catalog(long jarg1, hep.aida.IFunctionFactory jarg1_);
  public final static native long new_IFunctionFactory();
  public final static native void IFunctionFactory_director_connect(hep.aida.IFunctionFactory obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFunctionFactory_change_ownership(hep.aida.IFunctionFactory obj, long cptr, boolean take_or_release);
  public final static native void delete_IBaseStyle(long jarg1);
  public final static native void IBaseStyle_reset(long jarg1, hep.aida.IBaseStyle jarg1_);
  public final static native boolean IBaseStyle_setParameter__SWIG_0(long jarg1, hep.aida.IBaseStyle jarg1_, String jarg2, String jarg3);
  public final static native boolean IBaseStyle_setParameter__SWIG_1(long jarg1, hep.aida.IBaseStyle jarg1_, String jarg2);
  public final static native String IBaseStyle_parameterValue(long jarg1, hep.aida.IBaseStyle jarg1_, String jarg2);
  public final static native long IBaseStyle_availableParameters(long jarg1, hep.aida.IBaseStyle jarg1_);
  public final static native long IBaseStyle_availableParameterOptions(long jarg1, hep.aida.IBaseStyle jarg1_, String jarg2);
  public final static native long new_IBaseStyle();
  public final static native void IBaseStyle_director_connect(hep.aida.IBaseStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IBaseStyle_change_ownership(hep.aida.IBaseStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_IBrushStyle(long jarg1);
  public final static native long IBrushStyle_availableColors(long jarg1, hep.aida.IBrushStyle jarg1_);
  public final static native String IBrushStyle_color(long jarg1, hep.aida.IBrushStyle jarg1_);
  public final static native double IBrushStyle_opacity(long jarg1, hep.aida.IBrushStyle jarg1_);
  public final static native boolean IBrushStyle_setColor(long jarg1, hep.aida.IBrushStyle jarg1_, String jarg2);
  public final static native boolean IBrushStyle_setOpacity(long jarg1, hep.aida.IBrushStyle jarg1_, double jarg2);
  public final static native long new_IBrushStyle();
  public final static native void IBrushStyle_director_connect(hep.aida.IBrushStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IBrushStyle_change_ownership(hep.aida.IBrushStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_ILineStyle(long jarg1);
  public final static native long ILineStyle_availableLineTypes(long jarg1, hep.aida.ILineStyle jarg1_);
  public final static native String ILineStyle_lineType(long jarg1, hep.aida.ILineStyle jarg1_);
  public final static native int ILineStyle_thickness(long jarg1, hep.aida.ILineStyle jarg1_);
  public final static native boolean ILineStyle_setLineType(long jarg1, hep.aida.ILineStyle jarg1_, String jarg2);
  public final static native boolean ILineStyle_setThickness(long jarg1, hep.aida.ILineStyle jarg1_, int jarg2);
  public final static native long new_ILineStyle();
  public final static native void ILineStyle_director_connect(hep.aida.ILineStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ILineStyle_change_ownership(hep.aida.ILineStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_ITextStyle(long jarg1);
  public final static native long ITextStyle_availableFonts(long jarg1, hep.aida.ITextStyle jarg1_);
  public final static native double ITextStyle_fontSize(long jarg1, hep.aida.ITextStyle jarg1_);
  public final static native boolean ITextStyle_setFontSize(long jarg1, hep.aida.ITextStyle jarg1_, double jarg2);
  public final static native String ITextStyle_font(long jarg1, hep.aida.ITextStyle jarg1_);
  public final static native boolean ITextStyle_setFont(long jarg1, hep.aida.ITextStyle jarg1_, String jarg2);
  public final static native boolean ITextStyle_isBold(long jarg1, hep.aida.ITextStyle jarg1_);
  public final static native boolean ITextStyle_isItalic(long jarg1, hep.aida.ITextStyle jarg1_);
  public final static native boolean ITextStyle_isUnderlined(long jarg1, hep.aida.ITextStyle jarg1_);
  public final static native boolean ITextStyle_setBold__SWIG_0(long jarg1, hep.aida.ITextStyle jarg1_, boolean jarg2);
  public final static native boolean ITextStyle_setBold__SWIG_1(long jarg1, hep.aida.ITextStyle jarg1_);
  public final static native boolean ITextStyle_setItalic__SWIG_0(long jarg1, hep.aida.ITextStyle jarg1_, boolean jarg2);
  public final static native boolean ITextStyle_setItalic__SWIG_1(long jarg1, hep.aida.ITextStyle jarg1_);
  public final static native boolean ITextStyle_setUnderlined__SWIG_0(long jarg1, hep.aida.ITextStyle jarg1_, boolean jarg2);
  public final static native boolean ITextStyle_setUnderlined__SWIG_1(long jarg1, hep.aida.ITextStyle jarg1_);
  public final static native long new_ITextStyle();
  public final static native void ITextStyle_director_connect(hep.aida.ITextStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITextStyle_change_ownership(hep.aida.ITextStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_IAxisStyle(long jarg1);
  public final static native long IAxisStyle_lineStyle(long jarg1, hep.aida.IAxisStyle jarg1_);
  public final static native long IAxisStyle_tickLabelStyle(long jarg1, hep.aida.IAxisStyle jarg1_);
  public final static native long IAxisStyle_labelStyle(long jarg1, hep.aida.IAxisStyle jarg1_);
  public final static native boolean IAxisStyle_setlineStyle(long jarg1, hep.aida.IAxisStyle jarg1_, long jarg2, hep.aida.ILineStyle jarg2_);
  public final static native boolean IAxisStyle_setTickLabelStyle(long jarg1, hep.aida.IAxisStyle jarg1_, long jarg2, hep.aida.ITextStyle jarg2_);
  public final static native boolean IAxisStyle_setLabelStyle(long jarg1, hep.aida.IAxisStyle jarg1_, long jarg2, hep.aida.ITextStyle jarg2_);
  public final static native void IAxisStyle_setLabel(long jarg1, hep.aida.IAxisStyle jarg1_, String jarg2);
  public final static native long new_IAxisStyle();
  public final static native void IAxisStyle_director_connect(hep.aida.IAxisStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IAxisStyle_change_ownership(hep.aida.IAxisStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_IFillStyle(long jarg1);
  public final static native long IFillStyle_availablePatterns(long jarg1, hep.aida.IFillStyle jarg1_);
  public final static native String IFillStyle_pattern(long jarg1, hep.aida.IFillStyle jarg1_);
  public final static native boolean IFillStyle_setPattern(long jarg1, hep.aida.IFillStyle jarg1_, String jarg2);
  public final static native long new_IFillStyle();
  public final static native void IFillStyle_director_connect(hep.aida.IFillStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IFillStyle_change_ownership(hep.aida.IFillStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_IMarkerStyle(long jarg1);
  public final static native long IMarkerStyle_availableShapes(long jarg1, hep.aida.IMarkerStyle jarg1_);
  public final static native String IMarkerStyle_shape(long jarg1, hep.aida.IMarkerStyle jarg1_);
  public final static native boolean IMarkerStyle_setShape(long jarg1, hep.aida.IMarkerStyle jarg1_, String jarg2);
  public final static native long new_IMarkerStyle();
  public final static native void IMarkerStyle_director_connect(hep.aida.IMarkerStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IMarkerStyle_change_ownership(hep.aida.IMarkerStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_IDataStyle(long jarg1);
  public final static native long IDataStyle_lineStyle(long jarg1, hep.aida.IDataStyle jarg1_);
  public final static native long IDataStyle_markerStyle(long jarg1, hep.aida.IDataStyle jarg1_);
  public final static native long IDataStyle_fillStyle(long jarg1, hep.aida.IDataStyle jarg1_);
  public final static native boolean IDataStyle_setLineStyle(long jarg1, hep.aida.IDataStyle jarg1_, long jarg2, hep.aida.ILineStyle jarg2_);
  public final static native boolean IDataStyle_setMarkerStyle(long jarg1, hep.aida.IDataStyle jarg1_, long jarg2, hep.aida.IMarkerStyle jarg2_);
  public final static native boolean IDataStyle_setFillStyle(long jarg1, hep.aida.IDataStyle jarg1_, long jarg2, hep.aida.IFillStyle jarg2_);
  public final static native long new_IDataStyle();
  public final static native void IDataStyle_director_connect(hep.aida.IDataStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IDataStyle_change_ownership(hep.aida.IDataStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_IInfoStyle(long jarg1);
  public final static native long IInfoStyle_textStyle(long jarg1, hep.aida.IInfoStyle jarg1_);
  public final static native boolean IInfoStyle_setTextStyle(long jarg1, hep.aida.IInfoStyle jarg1_, long jarg2, hep.aida.ITextStyle jarg2_);
  public final static native long new_IInfoStyle();
  public final static native void IInfoStyle_director_connect(hep.aida.IInfoStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IInfoStyle_change_ownership(hep.aida.IInfoStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_ITitleStyle(long jarg1);
  public final static native long ITitleStyle_textStyle(long jarg1, hep.aida.ITitleStyle jarg1_);
  public final static native boolean ITitleStyle_setTextStyle(long jarg1, hep.aida.ITitleStyle jarg1_, long jarg2, hep.aida.ITextStyle jarg2_);
  public final static native long new_ITitleStyle();
  public final static native void ITitleStyle_director_connect(hep.aida.ITitleStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void ITitleStyle_change_ownership(hep.aida.ITitleStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_IPlotterStyle(long jarg1);
  public final static native long IPlotterStyle_dataStyle(long jarg1, hep.aida.IPlotterStyle jarg1_);
  public final static native long IPlotterStyle_xAxisStyle(long jarg1, hep.aida.IPlotterStyle jarg1_);
  public final static native long IPlotterStyle_yAxisStyle(long jarg1, hep.aida.IPlotterStyle jarg1_);
  public final static native long IPlotterStyle_zAxisStyle(long jarg1, hep.aida.IPlotterStyle jarg1_);
  public final static native long IPlotterStyle_titleStyle(long jarg1, hep.aida.IPlotterStyle jarg1_);
  public final static native long IPlotterStyle_infoStyle(long jarg1, hep.aida.IPlotterStyle jarg1_);
  public final static native boolean IPlotterStyle_setDataStyle(long jarg1, hep.aida.IPlotterStyle jarg1_, long jarg2, hep.aida.IDataStyle jarg2_);
  public final static native boolean IPlotterStyle_setAxisStyleX(long jarg1, hep.aida.IPlotterStyle jarg1_, long jarg2, hep.aida.IAxisStyle jarg2_);
  public final static native boolean IPlotterStyle_setAxisStyleY(long jarg1, hep.aida.IPlotterStyle jarg1_, long jarg2, hep.aida.IAxisStyle jarg2_);
  public final static native boolean IPlotterStyle_setAxisStyleZ(long jarg1, hep.aida.IPlotterStyle jarg1_, long jarg2, hep.aida.IAxisStyle jarg2_);
  public final static native boolean IPlotterStyle_setTitleStyle(long jarg1, hep.aida.IPlotterStyle jarg1_, long jarg2, hep.aida.ITitleStyle jarg2_);
  public final static native boolean IPlotterStyle_setInfoStyle(long jarg1, hep.aida.IPlotterStyle jarg1_, long jarg2, hep.aida.IInfoStyle jarg2_);
  public final static native long new_IPlotterStyle();
  public final static native void IPlotterStyle_director_connect(hep.aida.IPlotterStyle obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IPlotterStyle_change_ownership(hep.aida.IPlotterStyle obj, long cptr, boolean take_or_release);
  public final static native void delete_IInfo(long jarg1);
  public final static native void IInfo_clear(long jarg1, hep.aida.IInfo jarg1_);
  public final static native void IInfo_addText(long jarg1, hep.aida.IInfo jarg1_, String jarg2);
  public final static native void IInfo_addLegend__SWIG_0(long jarg1, hep.aida.IInfo jarg1_, long jarg2, hep.aida.IMarkerStyle jarg2_, String jarg3);
  public final static native void IInfo_addLegend__SWIG_1(long jarg1, hep.aida.IInfo jarg1_, long jarg2, hep.aida.ILineStyle jarg2_, String jarg3);
  public final static native void IInfo_addLegend__SWIG_2(long jarg1, hep.aida.IInfo jarg1_, long jarg2, hep.aida.IFillStyle jarg2_, String jarg3);
  public final static native long new_IInfo();
  public final static native void IInfo_director_connect(hep.aida.IInfo obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IInfo_change_ownership(hep.aida.IInfo obj, long cptr, boolean take_or_release);
  public final static native void delete_IPlotterLayout(long jarg1);
  public final static native void IPlotterLayout_reset(long jarg1, hep.aida.IPlotterLayout jarg1_);
  public final static native boolean IPlotterLayout_setParameter(long jarg1, hep.aida.IPlotterLayout jarg1_, String jarg2, double jarg3);
  public final static native double IPlotterLayout_parameterValue(long jarg1, hep.aida.IPlotterLayout jarg1_, String jarg2);
  public final static native long IPlotterLayout_availableParameters(long jarg1, hep.aida.IPlotterLayout jarg1_);
  public final static native long new_IPlotterLayout();
  public final static native void IPlotterLayout_director_connect(hep.aida.IPlotterLayout obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IPlotterLayout_change_ownership(hep.aida.IPlotterLayout obj, long cptr, boolean take_or_release);
  public final static native void delete_IPlotterRegion(long jarg1);
  public final static native void IPlotterRegion_plot__SWIG_0(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IBaseHistogram jarg2_, String jarg3);
  public final static native void IPlotterRegion_plot__SWIG_1(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IBaseHistogram jarg2_);
  public final static native void IPlotterRegion_plot__SWIG_2(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IBaseHistogram jarg2_, long jarg3, hep.aida.IPlotterStyle jarg3_, String jarg4);
  public final static native void IPlotterRegion_plot__SWIG_3(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IBaseHistogram jarg2_, long jarg3, hep.aida.IPlotterStyle jarg3_);
  public final static native void IPlotterRegion_plot__SWIG_4(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IFunction jarg2_, String jarg3);
  public final static native void IPlotterRegion_plot__SWIG_5(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IFunction jarg2_);
  public final static native void IPlotterRegion_plot__SWIG_6(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IFunction jarg2_, long jarg3, hep.aida.IPlotterStyle jarg3_, String jarg4);
  public final static native void IPlotterRegion_plot__SWIG_7(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IFunction jarg2_, long jarg3, hep.aida.IPlotterStyle jarg3_);
  public final static native void IPlotterRegion_plot__SWIG_8(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, String jarg3);
  public final static native void IPlotterRegion_plot__SWIG_9(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_);
  public final static native void IPlotterRegion_plot__SWIG_10(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, long jarg3, hep.aida.IPlotterStyle jarg3_, String jarg4);
  public final static native void IPlotterRegion_plot__SWIG_11(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_, long jarg3, hep.aida.IPlotterStyle jarg3_);
  public final static native void IPlotterRegion_remove__SWIG_0(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IBaseHistogram jarg2_);
  public final static native void IPlotterRegion_remove__SWIG_1(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IFunction jarg2_);
  public final static native void IPlotterRegion_remove__SWIG_2(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IDataPointSet jarg2_);
  public final static native void IPlotterRegion_clear(long jarg1, hep.aida.IPlotterRegion jarg1_);
  public final static native void IPlotterRegion_setParameter__SWIG_0(long jarg1, hep.aida.IPlotterRegion jarg1_, String jarg2, String jarg3);
  public final static native void IPlotterRegion_setParameter__SWIG_1(long jarg1, hep.aida.IPlotterRegion jarg1_, String jarg2);
  public final static native String IPlotterRegion_parameterValue(long jarg1, hep.aida.IPlotterRegion jarg1_, String jarg2);
  public final static native long IPlotterRegion_availableParameterOptions(long jarg1, hep.aida.IPlotterRegion jarg1_, String jarg2);
  public final static native long IPlotterRegion_availableParameters(long jarg1, hep.aida.IPlotterRegion jarg1_);
  public final static native long IPlotterRegion_style(long jarg1, hep.aida.IPlotterRegion jarg1_);
  public final static native void IPlotterRegion_setStyle(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IPlotterStyle jarg2_);
  public final static native void IPlotterRegion_applyStyle(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IPlotterStyle jarg2_);
  public final static native void IPlotterRegion_setTitle(long jarg1, hep.aida.IPlotterRegion jarg1_, String jarg2);
  public final static native void IPlotterRegion_setXLimits__SWIG_0(long jarg1, hep.aida.IPlotterRegion jarg1_, double jarg2, double jarg3);
  public final static native void IPlotterRegion_setXLimits__SWIG_1(long jarg1, hep.aida.IPlotterRegion jarg1_, double jarg2);
  public final static native void IPlotterRegion_setXLimits__SWIG_2(long jarg1, hep.aida.IPlotterRegion jarg1_);
  public final static native void IPlotterRegion_setYLimits__SWIG_0(long jarg1, hep.aida.IPlotterRegion jarg1_, double jarg2, double jarg3);
  public final static native void IPlotterRegion_setYLimits__SWIG_1(long jarg1, hep.aida.IPlotterRegion jarg1_, double jarg2);
  public final static native void IPlotterRegion_setYLimits__SWIG_2(long jarg1, hep.aida.IPlotterRegion jarg1_);
  public final static native void IPlotterRegion_setZLimits__SWIG_0(long jarg1, hep.aida.IPlotterRegion jarg1_, double jarg2, double jarg3);
  public final static native void IPlotterRegion_setZLimits__SWIG_1(long jarg1, hep.aida.IPlotterRegion jarg1_, double jarg2);
  public final static native void IPlotterRegion_setZLimits__SWIG_2(long jarg1, hep.aida.IPlotterRegion jarg1_);
  public final static native long IPlotterRegion_layout(long jarg1, hep.aida.IPlotterRegion jarg1_);
  public final static native void IPlotterRegion_setLayout(long jarg1, hep.aida.IPlotterRegion jarg1_, long jarg2, hep.aida.IPlotterLayout jarg2_);
  public final static native long IPlotterRegion_info(long jarg1, hep.aida.IPlotterRegion jarg1_);
  public final static native long new_IPlotterRegion();
  public final static native void IPlotterRegion_director_connect(hep.aida.IPlotterRegion obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IPlotterRegion_change_ownership(hep.aida.IPlotterRegion obj, long cptr, boolean take_or_release);
  public final static native void delete_IPlotter(long jarg1);
  public final static native long IPlotter_createRegion__SWIG_0(long jarg1, hep.aida.IPlotter jarg1_, double jarg2, double jarg3, double jarg4, double jarg5);
  public final static native long IPlotter_createRegion__SWIG_1(long jarg1, hep.aida.IPlotter jarg1_, double jarg2, double jarg3, double jarg4);
  public final static native long IPlotter_createRegion__SWIG_2(long jarg1, hep.aida.IPlotter jarg1_, double jarg2, double jarg3);
  public final static native long IPlotter_createRegion__SWIG_3(long jarg1, hep.aida.IPlotter jarg1_, double jarg2);
  public final static native long IPlotter_createRegion__SWIG_4(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_createRegions__SWIG_0(long jarg1, hep.aida.IPlotter jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void IPlotter_createRegions__SWIG_1(long jarg1, hep.aida.IPlotter jarg1_, int jarg2, int jarg3);
  public final static native void IPlotter_createRegions__SWIG_2(long jarg1, hep.aida.IPlotter jarg1_, int jarg2);
  public final static native void IPlotter_createRegions__SWIG_3(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native long IPlotter_currentRegion(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native int IPlotter_currentRegionNumber(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native int IPlotter_numberOfRegions(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_setCurrentRegionNumber(long jarg1, hep.aida.IPlotter jarg1_, int jarg2);
  public final static native long IPlotter_next(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native long IPlotter_region(long jarg1, hep.aida.IPlotter jarg1_, int jarg2);
  public final static native void IPlotter_destroyRegions(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_clearRegions(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_setParameter__SWIG_0(long jarg1, hep.aida.IPlotter jarg1_, String jarg2, String jarg3);
  public final static native void IPlotter_setParameter__SWIG_1(long jarg1, hep.aida.IPlotter jarg1_, String jarg2);
  public final static native String IPlotter_parameterValue(long jarg1, hep.aida.IPlotter jarg1_, String jarg2);
  public final static native long IPlotter_availableParameterOptions(long jarg1, hep.aida.IPlotter jarg1_, String jarg2);
  public final static native long IPlotter_availableParameters(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_show(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_refresh(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_hide(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_interact(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_writeToFile__SWIG_0(long jarg1, hep.aida.IPlotter jarg1_, String jarg2, String jarg3);
  public final static native void IPlotter_writeToFile__SWIG_1(long jarg1, hep.aida.IPlotter jarg1_, String jarg2);
  public final static native void IPlotter_setTitle(long jarg1, hep.aida.IPlotter jarg1_, String jarg2);
  public final static native long IPlotter_titleStyle(long jarg1, hep.aida.IPlotter jarg1_);
  public final static native void IPlotter_setTitleStyle(long jarg1, hep.aida.IPlotter jarg1_, long jarg2, hep.aida.ITitleStyle jarg2_);
  public final static native long new_IPlotter();
  public final static native void IPlotter_director_connect(hep.aida.IPlotter obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IPlotter_change_ownership(hep.aida.IPlotter obj, long cptr, boolean take_or_release);
  public final static native int AIDA_IPLOTTERFACTORY_H_get();
  public final static native void delete_IPlotterFactory(long jarg1);
  public final static native long IPlotterFactory_create__SWIG_0(long jarg1, hep.aida.IPlotterFactory jarg1_, String jarg2);
  public final static native long IPlotterFactory_create__SWIG_1(long jarg1, hep.aida.IPlotterFactory jarg1_);
  public final static native long IPlotterFactory_createMarkerStyle(long jarg1, hep.aida.IPlotterFactory jarg1_);
  public final static native long IPlotterFactory_createTextStyle(long jarg1, hep.aida.IPlotterFactory jarg1_);
  public final static native long IPlotterFactory_createLineStyle(long jarg1, hep.aida.IPlotterFactory jarg1_);
  public final static native long IPlotterFactory_createFillStyle(long jarg1, hep.aida.IPlotterFactory jarg1_);
  public final static native long IPlotterFactory_createDataStyle(long jarg1, hep.aida.IPlotterFactory jarg1_);
  public final static native long IPlotterFactory_createAxisStyle(long jarg1, hep.aida.IPlotterFactory jarg1_);
  public final static native long IPlotterFactory_createTitleStyle(long jarg1, hep.aida.IPlotterFactory jarg1_);
  public final static native long IPlotterFactory_createPlotterStyle(long jarg1, hep.aida.IPlotterFactory jarg1_);
  public final static native long new_IPlotterFactory();
  public final static native void IPlotterFactory_director_connect(hep.aida.IPlotterFactory obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IPlotterFactory_change_ownership(hep.aida.IPlotterFactory obj, long cptr, boolean take_or_release);
  public final static native void delete_IAnalysisFactory(long jarg1);
  public final static native long IAnalysisFactory_createTreeFactory(long jarg1, hep.aida.IAnalysisFactory jarg1_);
  public final static native long IAnalysisFactory_createHistogramFactory(long jarg1, hep.aida.IAnalysisFactory jarg1_, long jarg2, hep.aida.ITree jarg2_);
  public final static native long IAnalysisFactory_createDataPointSetFactory(long jarg1, hep.aida.IAnalysisFactory jarg1_, long jarg2, hep.aida.ITree jarg2_);
  public final static native long IAnalysisFactory_createTupleFactory(long jarg1, hep.aida.IAnalysisFactory jarg1_, long jarg2, hep.aida.ITree jarg2_);
  public final static native long IAnalysisFactory_createFunctionFactory(long jarg1, hep.aida.IAnalysisFactory jarg1_, long jarg2, hep.aida.ITree jarg2_);
  public final static native long IAnalysisFactory_createFitFactory(long jarg1, hep.aida.IAnalysisFactory jarg1_);
  public final static native long new_IAnalysisFactory();
  public final static native void IAnalysisFactory_director_connect(hep.aida.IAnalysisFactory obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void IAnalysisFactory_change_ownership(hep.aida.IAnalysisFactory obj, long cptr, boolean take_or_release);
  public final static native long AIDA_createAnalysisFactory();
  public final static native long getTestHistogram();
  public final static native long SWIGIHistogramUpcast(long jarg1);
  public final static native long SWIGIHistogram1DUpcast(long jarg1);
  public final static native long SWIGIHistogram2DUpcast(long jarg1);
  public final static native long SWIGIHistogram3DUpcast(long jarg1);
  public final static native long SWIGICloudUpcast(long jarg1);
  public final static native long SWIGICloud1DUpcast(long jarg1);
  public final static native long SWIGICloud2DUpcast(long jarg1);
  public final static native long SWIGICloud3DUpcast(long jarg1);
  public final static native long SWIGIProfileUpcast(long jarg1);
  public final static native long SWIGIProfile1DUpcast(long jarg1);
  public final static native long SWIGIProfile2DUpcast(long jarg1);
  public final static native long SWIGIModelFunctionUpcast(long jarg1);
  public final static native long SWIGIBrushStyleUpcast(long jarg1);
  public final static native long SWIGILineStyleUpcast(long jarg1);
  public final static native long SWIGITextStyleUpcast(long jarg1);
  public final static native long SWIGIAxisStyleUpcast(long jarg1);
  public final static native long SWIGIFillStyleUpcast(long jarg1);
  public final static native long SWIGIMarkerStyleUpcast(long jarg1);
  public final static native long SWIGIDataStyleUpcast(long jarg1);
  public final static native long SWIGIInfoStyleUpcast(long jarg1);
  public final static native long SWIGITitleStyleUpcast(long jarg1);
  public final static native long SWIGIPlotterStyleUpcast(long jarg1);

  public static void SwigDirector_IAnnotation_addItem__SWIG_0(hep.aida.IAnnotation self, String key, String value, boolean sticky) {
  try {
    self.addItem(key, value, sticky);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IAnnotation_addItem__SWIG_1(hep.aida.IAnnotation self, String key, String value) {
  try {
    self.addItem(key, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IAnnotation_removeItem(hep.aida.IAnnotation self, String key) {
  try {
    self.removeItem(key);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IAnnotation_value__SWIG_0(hep.aida.IAnnotation self, String key) {
  try {
    return self.value(key);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IAnnotation_setValue(hep.aida.IAnnotation self, String key, String value) {
  try {
    self.setValue(key, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IAnnotation_setSticky(hep.aida.IAnnotation self, String key, boolean sticky) {
  try {
    self.setSticky(key, sticky);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IAnnotation_size(hep.aida.IAnnotation self) {
  try {
    return self.size();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IAnnotation_key(hep.aida.IAnnotation self, int index) {
  try {
    return self.key(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IAnnotation_value__SWIG_1(hep.aida.IAnnotation self, int index) {
  try {
    return self.value(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IAnnotation_reset(hep.aida.IAnnotation self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IManagedObject_name(hep.aida.IManagedObject self) {
  try {
    return self.name();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IAxis_isFixedBinning(hep.aida.IAxis self) {
  try {
    return self.isFixedBinning();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IAxis_lowerEdge(hep.aida.IAxis self) {
  try {
    return self.lowerEdge();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IAxis_upperEdge(hep.aida.IAxis self) {
  try {
    return self.upperEdge();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IAxis_bins(hep.aida.IAxis self) {
  try {
    return self.bins();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IAxis_binLowerEdge(hep.aida.IAxis self, int index) {
  try {
    return self.binLowerEdge(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IAxis_binUpperEdge(hep.aida.IAxis self, int index) {
  try {
    return self.binUpperEdge(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IAxis_binWidth(hep.aida.IAxis self, int index) {
  try {
    return self.binWidth(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IAxis_coordToIndex(hep.aida.IAxis self, double coord) {
  try {
    return self.coordToIndex(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IBaseHistogram_title(hep.aida.IBaseHistogram self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IBaseHistogram_setTitle(hep.aida.IBaseHistogram self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IBaseHistogram_annotation(hep.aida.IBaseHistogram self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IBaseHistogram_dimension(hep.aida.IBaseHistogram self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IBaseHistogram_reset(hep.aida.IBaseHistogram self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IBaseHistogram_entries(hep.aida.IBaseHistogram self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IHistogram_title(hep.aida.IHistogram self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram_setTitle(hep.aida.IHistogram self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram_annotation(hep.aida.IHistogram self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram_dimension(hep.aida.IHistogram self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram_reset(hep.aida.IHistogram self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram_entries(hep.aida.IHistogram self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram_allEntries(hep.aida.IHistogram self) {
  try {
    return self.allEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram_extraEntries(hep.aida.IHistogram self) {
  try {
    return self.extraEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram_equivalentBinEntries(hep.aida.IHistogram self) {
  try {
    return self.equivalentBinEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram_sumBinHeights(hep.aida.IHistogram self) {
  try {
    return self.sumBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram_sumAllBinHeights(hep.aida.IHistogram self) {
  try {
    return self.sumAllBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram_sumExtraBinHeights(hep.aida.IHistogram self) {
  try {
    return self.sumExtraBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram_minBinHeight(hep.aida.IHistogram self) {
  try {
    return self.minBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram_maxBinHeight(hep.aida.IHistogram self) {
  try {
    return self.maxBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram_scale(hep.aida.IHistogram self, double scaleFactor) {
  try {
    self.scale(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IHistogram1D_title(hep.aida.IHistogram1D self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram1D_setTitle(hep.aida.IHistogram1D self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram1D_annotation(hep.aida.IHistogram1D self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram1D_dimension(hep.aida.IHistogram1D self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram1D_reset(hep.aida.IHistogram1D self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram1D_entries(hep.aida.IHistogram1D self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram1D_allEntries(hep.aida.IHistogram1D self) {
  try {
    return self.allEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram1D_extraEntries(hep.aida.IHistogram1D self) {
  try {
    return self.extraEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_equivalentBinEntries(hep.aida.IHistogram1D self) {
  try {
    return self.equivalentBinEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_sumBinHeights(hep.aida.IHistogram1D self) {
  try {
    return self.sumBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_sumAllBinHeights(hep.aida.IHistogram1D self) {
  try {
    return self.sumAllBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_sumExtraBinHeights(hep.aida.IHistogram1D self) {
  try {
    return self.sumExtraBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_minBinHeight(hep.aida.IHistogram1D self) {
  try {
    return self.minBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_maxBinHeight(hep.aida.IHistogram1D self) {
  try {
    return self.maxBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram1D_scale(hep.aida.IHistogram1D self, double scaleFactor) {
  try {
    self.scale(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram1D_fill__SWIG_0(hep.aida.IHistogram1D self, double x, double weight) {
  try {
    self.fill(x, weight);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram1D_fill__SWIG_1(hep.aida.IHistogram1D self, double x) {
  try {
    self.fill(x);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_binMean(hep.aida.IHistogram1D self, int index) {
  try {
    return self.binMean(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram1D_binEntries(hep.aida.IHistogram1D self, int index) {
  try {
    return self.binEntries(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_binHeight(hep.aida.IHistogram1D self, int index) {
  try {
    return self.binHeight(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_binError(hep.aida.IHistogram1D self, int index) {
  try {
    return self.binError(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_mean(hep.aida.IHistogram1D self) {
  try {
    return self.mean();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram1D_rms(hep.aida.IHistogram1D self) {
  try {
    return self.rms();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram1D_axis(hep.aida.IHistogram1D self) {
  try {
    return IAxis.getCPtr((hep.aida.IAxis)self.axis());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram1D_coordToIndex(hep.aida.IHistogram1D self, double coord) {
  try {
    return self.coordToIndex(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram1D_add(hep.aida.IHistogram1D self, long hist) {
  try {
    self.add(new IHistogram1D(hist, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IHistogram2D_title(hep.aida.IHistogram2D self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram2D_setTitle(hep.aida.IHistogram2D self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram2D_annotation(hep.aida.IHistogram2D self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram2D_dimension(hep.aida.IHistogram2D self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram2D_reset(hep.aida.IHistogram2D self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram2D_entries(hep.aida.IHistogram2D self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram2D_allEntries(hep.aida.IHistogram2D self) {
  try {
    return self.allEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram2D_extraEntries(hep.aida.IHistogram2D self) {
  try {
    return self.extraEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_equivalentBinEntries(hep.aida.IHistogram2D self) {
  try {
    return self.equivalentBinEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_sumBinHeights(hep.aida.IHistogram2D self) {
  try {
    return self.sumBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_sumAllBinHeights(hep.aida.IHistogram2D self) {
  try {
    return self.sumAllBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_sumExtraBinHeights(hep.aida.IHistogram2D self) {
  try {
    return self.sumExtraBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_minBinHeight(hep.aida.IHistogram2D self) {
  try {
    return self.minBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_maxBinHeight(hep.aida.IHistogram2D self) {
  try {
    return self.maxBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram2D_scale(hep.aida.IHistogram2D self, double scaleFactor) {
  try {
    self.scale(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram2D_fill__SWIG_0(hep.aida.IHistogram2D self, double x, double y, double weight) {
  try {
    self.fill(x, y, weight);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram2D_fill__SWIG_1(hep.aida.IHistogram2D self, double x, double y) {
  try {
    self.fill(x, y);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_binMeanX(hep.aida.IHistogram2D self, int indexX, int indexY) {
  try {
    return self.binMeanX(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_binMeanY(hep.aida.IHistogram2D self, int indexX, int indexY) {
  try {
    return self.binMeanY(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram2D_binEntries(hep.aida.IHistogram2D self, int indexX, int indexY) {
  try {
    return self.binEntries(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram2D_binEntriesX(hep.aida.IHistogram2D self, int index) {
  try {
    return self.binEntriesX(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram2D_binEntriesY(hep.aida.IHistogram2D self, int index) {
  try {
    return self.binEntriesY(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_binHeight(hep.aida.IHistogram2D self, int indexX, int indexY) {
  try {
    return self.binHeight(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_binHeightX(hep.aida.IHistogram2D self, int index) {
  try {
    return self.binHeightX(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_binHeightY(hep.aida.IHistogram2D self, int index) {
  try {
    return self.binHeightY(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_binError(hep.aida.IHistogram2D self, int indexX, int indexY) {
  try {
    return self.binError(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_meanX(hep.aida.IHistogram2D self) {
  try {
    return self.meanX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_meanY(hep.aida.IHistogram2D self) {
  try {
    return self.meanY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_rmsX(hep.aida.IHistogram2D self) {
  try {
    return self.rmsX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram2D_rmsY(hep.aida.IHistogram2D self) {
  try {
    return self.rmsY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram2D_xAxis(hep.aida.IHistogram2D self) {
  try {
    return IAxis.getCPtr((hep.aida.IAxis)self.xAxis());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram2D_yAxis(hep.aida.IHistogram2D self) {
  try {
    return IAxis.getCPtr((hep.aida.IAxis)self.yAxis());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram2D_coordToIndexX(hep.aida.IHistogram2D self, double coord) {
  try {
    return self.coordToIndexX(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram2D_coordToIndexY(hep.aida.IHistogram2D self, double coord) {
  try {
    return self.coordToIndexY(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram2D_add(hep.aida.IHistogram2D self, long hist) {
  try {
    self.add(new IHistogram2D(hist, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IHistogram3D_title(hep.aida.IHistogram3D self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram3D_setTitle(hep.aida.IHistogram3D self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram3D_annotation(hep.aida.IHistogram3D self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_dimension(hep.aida.IHistogram3D self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram3D_reset(hep.aida.IHistogram3D self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_entries(hep.aida.IHistogram3D self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_allEntries(hep.aida.IHistogram3D self) {
  try {
    return self.allEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_extraEntries(hep.aida.IHistogram3D self) {
  try {
    return self.extraEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_equivalentBinEntries(hep.aida.IHistogram3D self) {
  try {
    return self.equivalentBinEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_sumBinHeights(hep.aida.IHistogram3D self) {
  try {
    return self.sumBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_sumAllBinHeights(hep.aida.IHistogram3D self) {
  try {
    return self.sumAllBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_sumExtraBinHeights(hep.aida.IHistogram3D self) {
  try {
    return self.sumExtraBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_minBinHeight(hep.aida.IHistogram3D self) {
  try {
    return self.minBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_maxBinHeight(hep.aida.IHistogram3D self) {
  try {
    return self.maxBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram3D_scale(hep.aida.IHistogram3D self, double scaleFactor) {
  try {
    self.scale(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram3D_fill__SWIG_0(hep.aida.IHistogram3D self, double x, double y, double z, double weight) {
  try {
    self.fill(x, y, z, weight);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram3D_fill__SWIG_1(hep.aida.IHistogram3D self, double x, double y, double z) {
  try {
    self.fill(x, y, z);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_binMeanX(hep.aida.IHistogram3D self, int indexX, int indexY, int indexZ) {
  try {
    return self.binMeanX(indexX, indexY, indexZ);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_binMeanY(hep.aida.IHistogram3D self, int indexX, int indexY, int indexZ) {
  try {
    return self.binMeanY(indexX, indexY, indexZ);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_binMeanZ(hep.aida.IHistogram3D self, int indexX, int indexY, int indexZ) {
  try {
    return self.binMeanZ(indexX, indexY, indexZ);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_binEntries(hep.aida.IHistogram3D self, int indexX, int indexY, int indexZ) {
  try {
    return self.binEntries(indexX, indexY, indexZ);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_binEntriesX(hep.aida.IHistogram3D self, int index) {
  try {
    return self.binEntriesX(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_binEntriesY(hep.aida.IHistogram3D self, int index) {
  try {
    return self.binEntriesY(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_binEntriesZ(hep.aida.IHistogram3D self, int index) {
  try {
    return self.binEntriesZ(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_binHeight(hep.aida.IHistogram3D self, int indexX, int indexY, int indexZ) {
  try {
    return self.binHeight(indexX, indexY, indexZ);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_binHeightX(hep.aida.IHistogram3D self, int index) {
  try {
    return self.binHeightX(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_binHeightY(hep.aida.IHistogram3D self, int index) {
  try {
    return self.binHeightY(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_binHeightZ(hep.aida.IHistogram3D self, int index) {
  try {
    return self.binHeightZ(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_binError(hep.aida.IHistogram3D self, int indexX, int indexY, int indexZ) {
  try {
    return self.binError(indexX, indexY, indexZ);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_meanX(hep.aida.IHistogram3D self) {
  try {
    return self.meanX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_meanY(hep.aida.IHistogram3D self) {
  try {
    return self.meanY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_meanZ(hep.aida.IHistogram3D self) {
  try {
    return self.meanZ();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_rmsX(hep.aida.IHistogram3D self) {
  try {
    return self.rmsX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_rmsY(hep.aida.IHistogram3D self) {
  try {
    return self.rmsY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IHistogram3D_rmsZ(hep.aida.IHistogram3D self) {
  try {
    return self.rmsZ();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram3D_xAxis(hep.aida.IHistogram3D self) {
  try {
    return IAxis.getCPtr((hep.aida.IAxis)self.xAxis());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram3D_yAxis(hep.aida.IHistogram3D self) {
  try {
    return IAxis.getCPtr((hep.aida.IAxis)self.yAxis());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogram3D_zAxis(hep.aida.IHistogram3D self) {
  try {
    return IAxis.getCPtr((hep.aida.IAxis)self.zAxis());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_coordToIndexX(hep.aida.IHistogram3D self, double coord) {
  try {
    return self.coordToIndexX(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_coordToIndexY(hep.aida.IHistogram3D self, double coord) {
  try {
    return self.coordToIndexY(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IHistogram3D_coordToIndexZ(hep.aida.IHistogram3D self, double coord) {
  try {
    return self.coordToIndexZ(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogram3D_add(hep.aida.IHistogram3D self, long hist) {
  try {
    self.add(new IHistogram3D(hist, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ICloud_title(hep.aida.ICloud self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud_setTitle(hep.aida.ICloud self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ICloud_annotation(hep.aida.ICloud self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud_dimension(hep.aida.ICloud self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud_reset(hep.aida.ICloud self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud_entries(hep.aida.ICloud self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud_sumOfWeights(hep.aida.ICloud self) {
  try {
    return self.sumOfWeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud_convertToHistogram(hep.aida.ICloud self) {
  try {
    self.convertToHistogram();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ICloud_isConverted(hep.aida.ICloud self) {
  try {
    return self.isConverted();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud_maxEntries(hep.aida.ICloud self) {
  try {
    return self.maxEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud_scale(hep.aida.ICloud self, double scaleFactor) {
  try {
    self.scale(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ICloud1D_title(hep.aida.ICloud1D self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud1D_setTitle(hep.aida.ICloud1D self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ICloud1D_annotation(hep.aida.ICloud1D self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud1D_dimension(hep.aida.ICloud1D self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud1D_reset(hep.aida.ICloud1D self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud1D_entries(hep.aida.ICloud1D self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud1D_sumOfWeights(hep.aida.ICloud1D self) {
  try {
    return self.sumOfWeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud1D_convertToHistogram(hep.aida.ICloud1D self) {
  try {
    self.convertToHistogram();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ICloud1D_isConverted(hep.aida.ICloud1D self) {
  try {
    return self.isConverted();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud1D_maxEntries(hep.aida.ICloud1D self) {
  try {
    return self.maxEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud1D_scale(hep.aida.ICloud1D self, double scaleFactor) {
  try {
    self.scale(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud1D_fill__SWIG_0(hep.aida.ICloud1D self, double x, double weight) {
  try {
    self.fill(x, weight);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud1D_fill__SWIG_1(hep.aida.ICloud1D self, double x) {
  try {
    self.fill(x);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud1D_lowerEdge(hep.aida.ICloud1D self) {
  try {
    return self.lowerEdge();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud1D_upperEdge(hep.aida.ICloud1D self) {
  try {
    return self.upperEdge();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud1D_value(hep.aida.ICloud1D self, int index) {
  try {
    return self.value(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud1D_weight(hep.aida.ICloud1D self, int index) {
  try {
    return self.weight(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud1D_mean(hep.aida.ICloud1D self) {
  try {
    return self.mean();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud1D_rms(hep.aida.ICloud1D self) {
  try {
    return self.rms();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud1D_convert__SWIG_0(hep.aida.ICloud1D self, int nBins, double lowerEdge, double upperEdge) {
  try {
    self.convert(nBins, lowerEdge, upperEdge);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud1D_convert__SWIG_1(hep.aida.ICloud1D self, double[] binEdges) {
  try {
    self.convert(binEdges);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ICloud1D_histogram(hep.aida.ICloud1D self) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.histogram());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud1D_fillHistogram(hep.aida.ICloud1D self, long hist) {
  try {
    self.fillHistogram(new IHistogram1D(hist, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ICloud2D_title(hep.aida.ICloud2D self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud2D_setTitle(hep.aida.ICloud2D self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ICloud2D_annotation(hep.aida.ICloud2D self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud2D_dimension(hep.aida.ICloud2D self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud2D_reset(hep.aida.ICloud2D self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud2D_entries(hep.aida.ICloud2D self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_sumOfWeights(hep.aida.ICloud2D self) {
  try {
    return self.sumOfWeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud2D_convertToHistogram(hep.aida.ICloud2D self) {
  try {
    self.convertToHistogram();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ICloud2D_isConverted(hep.aida.ICloud2D self) {
  try {
    return self.isConverted();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud2D_maxEntries(hep.aida.ICloud2D self) {
  try {
    return self.maxEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud2D_scale(hep.aida.ICloud2D self, double scaleFactor) {
  try {
    self.scale(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud2D_fill__SWIG_0(hep.aida.ICloud2D self, double x, double y, double weight) {
  try {
    self.fill(x, y, weight);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud2D_fill__SWIG_1(hep.aida.ICloud2D self, double x, double y) {
  try {
    self.fill(x, y);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_lowerEdgeX(hep.aida.ICloud2D self) {
  try {
    return self.lowerEdgeX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_lowerEdgeY(hep.aida.ICloud2D self) {
  try {
    return self.lowerEdgeY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_upperEdgeX(hep.aida.ICloud2D self) {
  try {
    return self.upperEdgeX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_upperEdgeY(hep.aida.ICloud2D self) {
  try {
    return self.upperEdgeY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_valueX(hep.aida.ICloud2D self, int index) {
  try {
    return self.valueX(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_valueY(hep.aida.ICloud2D self, int index) {
  try {
    return self.valueY(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_weight(hep.aida.ICloud2D self, int index) {
  try {
    return self.weight(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_meanX(hep.aida.ICloud2D self) {
  try {
    return self.meanX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_meanY(hep.aida.ICloud2D self) {
  try {
    return self.meanY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_rmsX(hep.aida.ICloud2D self) {
  try {
    return self.rmsX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud2D_rmsY(hep.aida.ICloud2D self) {
  try {
    return self.rmsY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud2D_convert__SWIG_0(hep.aida.ICloud2D self, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY) {
  try {
    self.convert(nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud2D_convert__SWIG_1(hep.aida.ICloud2D self, double[] binEdgesX, double[] binEdgesY) {
  try {
    self.convert(binEdgesX, binEdgesY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ICloud2D_histogram(hep.aida.ICloud2D self) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.histogram());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud2D_fillHistogram(hep.aida.ICloud2D self, long hist) {
  try {
    self.fillHistogram(new IHistogram2D(hist, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ICloud3D_title(hep.aida.ICloud3D self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud3D_setTitle(hep.aida.ICloud3D self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ICloud3D_annotation(hep.aida.ICloud3D self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud3D_dimension(hep.aida.ICloud3D self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud3D_reset(hep.aida.ICloud3D self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud3D_entries(hep.aida.ICloud3D self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_sumOfWeights(hep.aida.ICloud3D self) {
  try {
    return self.sumOfWeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud3D_convertToHistogram(hep.aida.ICloud3D self) {
  try {
    self.convertToHistogram();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ICloud3D_isConverted(hep.aida.ICloud3D self) {
  try {
    return self.isConverted();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ICloud3D_maxEntries(hep.aida.ICloud3D self) {
  try {
    return self.maxEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud3D_scale(hep.aida.ICloud3D self, double scaleFactor) {
  try {
    self.scale(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud3D_fill__SWIG_0(hep.aida.ICloud3D self, double x, double y, double z, double weight) {
  try {
    self.fill(x, y, z, weight);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud3D_fill__SWIG_1(hep.aida.ICloud3D self, double x, double y, double z) {
  try {
    self.fill(x, y, z);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_lowerEdgeX(hep.aida.ICloud3D self) {
  try {
    return self.lowerEdgeX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_lowerEdgeY(hep.aida.ICloud3D self) {
  try {
    return self.lowerEdgeY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_lowerEdgeZ(hep.aida.ICloud3D self) {
  try {
    return self.lowerEdgeZ();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_upperEdgeX(hep.aida.ICloud3D self) {
  try {
    return self.upperEdgeX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_upperEdgeY(hep.aida.ICloud3D self) {
  try {
    return self.upperEdgeY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_upperEdgeZ(hep.aida.ICloud3D self) {
  try {
    return self.upperEdgeZ();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_valueX(hep.aida.ICloud3D self, int index) {
  try {
    return self.valueX(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_valueY(hep.aida.ICloud3D self, int index) {
  try {
    return self.valueY(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_valueZ(hep.aida.ICloud3D self, int index) {
  try {
    return self.valueZ(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_weight(hep.aida.ICloud3D self, int index) {
  try {
    return self.weight(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_meanX(hep.aida.ICloud3D self) {
  try {
    return self.meanX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_meanY(hep.aida.ICloud3D self) {
  try {
    return self.meanY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_meanZ(hep.aida.ICloud3D self) {
  try {
    return self.meanZ();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_rmsX(hep.aida.ICloud3D self) {
  try {
    return self.rmsX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_rmsY(hep.aida.ICloud3D self) {
  try {
    return self.rmsY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ICloud3D_rmsZ(hep.aida.ICloud3D self) {
  try {
    return self.rmsZ();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud3D_convert__SWIG_0(hep.aida.ICloud3D self, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY, int nBinsZ, double lowerEdgeZ, double upperEdgeZ) {
  try {
    self.convert(nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY, nBinsZ, lowerEdgeZ, upperEdgeZ);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud3D_convert__SWIG_1(hep.aida.ICloud3D self, double[] binEdgesX, double[] binEdgesY, double[] binEdgesZ) {
  try {
    self.convert(binEdgesX, binEdgesY, binEdgesZ);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ICloud3D_histogram(hep.aida.ICloud3D self) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.histogram());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ICloud3D_fillHistogram(hep.aida.ICloud3D self, long hist) {
  try {
    self.fillHistogram(new IHistogram3D(hist, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IProfile_title(hep.aida.IProfile self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile_setTitle(hep.aida.IProfile self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IProfile_annotation(hep.aida.IProfile self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile_dimension(hep.aida.IProfile self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile_reset(hep.aida.IProfile self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile_entries(hep.aida.IProfile self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile_allEntries(hep.aida.IProfile self) {
  try {
    return self.allEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile_extraEntries(hep.aida.IProfile self) {
  try {
    return self.extraEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile_sumBinHeights(hep.aida.IProfile self) {
  try {
    return self.sumBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile_sumAllBinHeights(hep.aida.IProfile self) {
  try {
    return self.sumAllBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile_sumExtraBinHeights(hep.aida.IProfile self) {
  try {
    return self.sumExtraBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile_minBinHeight(hep.aida.IProfile self) {
  try {
    return self.minBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile_maxBinHeight(hep.aida.IProfile self) {
  try {
    return self.maxBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IProfile1D_title(hep.aida.IProfile1D self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile1D_setTitle(hep.aida.IProfile1D self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IProfile1D_annotation(hep.aida.IProfile1D self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile1D_dimension(hep.aida.IProfile1D self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile1D_reset(hep.aida.IProfile1D self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile1D_entries(hep.aida.IProfile1D self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile1D_allEntries(hep.aida.IProfile1D self) {
  try {
    return self.allEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile1D_extraEntries(hep.aida.IProfile1D self) {
  try {
    return self.extraEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_sumBinHeights(hep.aida.IProfile1D self) {
  try {
    return self.sumBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_sumAllBinHeights(hep.aida.IProfile1D self) {
  try {
    return self.sumAllBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_sumExtraBinHeights(hep.aida.IProfile1D self) {
  try {
    return self.sumExtraBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_minBinHeight(hep.aida.IProfile1D self) {
  try {
    return self.minBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_maxBinHeight(hep.aida.IProfile1D self) {
  try {
    return self.maxBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile1D_fill__SWIG_0(hep.aida.IProfile1D self, double x, double y, double weight) {
  try {
    self.fill(x, y, weight);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile1D_fill__SWIG_1(hep.aida.IProfile1D self, double x, double y) {
  try {
    self.fill(x, y);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_binMean(hep.aida.IProfile1D self, int index) {
  try {
    return self.binMean(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile1D_binEntries(hep.aida.IProfile1D self, int index) {
  try {
    return self.binEntries(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_binHeight(hep.aida.IProfile1D self, int index) {
  try {
    return self.binHeight(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_binError(hep.aida.IProfile1D self, int index) {
  try {
    return self.binError(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_binRms(hep.aida.IProfile1D self, int index) {
  try {
    return self.binRms(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_mean(hep.aida.IProfile1D self) {
  try {
    return self.mean();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile1D_rms(hep.aida.IProfile1D self) {
  try {
    return self.rms();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IProfile1D_axis(hep.aida.IProfile1D self) {
  try {
    return IAxis.getCPtr((hep.aida.IAxis)self.axis());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile1D_coordToIndex(hep.aida.IProfile1D self, double coord) {
  try {
    return self.coordToIndex(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile1D_add(hep.aida.IProfile1D self, long profile) {
  try {
    self.add(new IProfile1D(profile, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IProfile2D_title(hep.aida.IProfile2D self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile2D_setTitle(hep.aida.IProfile2D self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IProfile2D_annotation(hep.aida.IProfile2D self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile2D_dimension(hep.aida.IProfile2D self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile2D_reset(hep.aida.IProfile2D self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile2D_entries(hep.aida.IProfile2D self) {
  try {
    return self.entries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile2D_allEntries(hep.aida.IProfile2D self) {
  try {
    return self.allEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile2D_extraEntries(hep.aida.IProfile2D self) {
  try {
    return self.extraEntries();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_sumBinHeights(hep.aida.IProfile2D self) {
  try {
    return self.sumBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_sumAllBinHeights(hep.aida.IProfile2D self) {
  try {
    return self.sumAllBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_sumExtraBinHeights(hep.aida.IProfile2D self) {
  try {
    return self.sumExtraBinHeights();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_minBinHeight(hep.aida.IProfile2D self) {
  try {
    return self.minBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_maxBinHeight(hep.aida.IProfile2D self) {
  try {
    return self.maxBinHeight();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile2D_fill__SWIG_0(hep.aida.IProfile2D self, double x, double y, double z, double weight) {
  try {
    self.fill(x, y, z, weight);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile2D_fill__SWIG_1(hep.aida.IProfile2D self, double x, double y, double z) {
  try {
    self.fill(x, y, z);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_binMeanX(hep.aida.IProfile2D self, int indexX, int indexY) {
  try {
    return self.binMeanX(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_binMeanY(hep.aida.IProfile2D self, int indexX, int indexY) {
  try {
    return self.binMeanY(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile2D_binEntries(hep.aida.IProfile2D self, int indexX, int indexY) {
  try {
    return self.binEntries(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile2D_binEntriesX(hep.aida.IProfile2D self, int indexX) {
  try {
    return self.binEntriesX(indexX);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile2D_binEntriesY(hep.aida.IProfile2D self, int indexY) {
  try {
    return self.binEntriesY(indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_binHeight(hep.aida.IProfile2D self, int indexX, int indexY) {
  try {
    return self.binHeight(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_binHeightX(hep.aida.IProfile2D self, int indexX) {
  try {
    return self.binHeightX(indexX);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_binHeightY(hep.aida.IProfile2D self, int indexY) {
  try {
    return self.binHeightY(indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_binError(hep.aida.IProfile2D self, int indexX, int indexY) {
  try {
    return self.binError(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_binRms(hep.aida.IProfile2D self, int indexX, int indexY) {
  try {
    return self.binRms(indexX, indexY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_meanX(hep.aida.IProfile2D self) {
  try {
    return self.meanX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_meanY(hep.aida.IProfile2D self) {
  try {
    return self.meanY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_rmsX(hep.aida.IProfile2D self) {
  try {
    return self.rmsX();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IProfile2D_rmsY(hep.aida.IProfile2D self) {
  try {
    return self.rmsY();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IProfile2D_xAxis(hep.aida.IProfile2D self) {
  try {
    return IAxis.getCPtr((hep.aida.IAxis)self.xAxis());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IProfile2D_yAxis(hep.aida.IProfile2D self) {
  try {
    return IAxis.getCPtr((hep.aida.IAxis)self.yAxis());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile2D_coordToIndexX(hep.aida.IProfile2D self, double coordX) {
  try {
    return self.coordToIndexX(coordX);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IProfile2D_coordToIndexY(hep.aida.IProfile2D self, double coordY) {
  try {
    return self.coordToIndexY(coordY);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IProfile2D_add(hep.aida.IProfile2D self, long h) {
  try {
    self.add(new IProfile2D(h, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IHistogramFactory_destroy(hep.aida.IHistogramFactory self, long hist) {
  try {
    self.destroy(new IBaseHistogram(hist, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud1D__SWIG_0(hep.aida.IHistogramFactory self, String path, String title, int nMax, String options) {
  try {
    return ICloud1D.getCPtr((hep.aida.ICloud1D)self.createCloud1D(path, title, nMax, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud1D__SWIG_1(hep.aida.IHistogramFactory self, String path, String title, int nMax) {
  try {
    return ICloud1D.getCPtr((hep.aida.ICloud1D)self.createCloud1D(path, title, nMax));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud1D__SWIG_2(hep.aida.IHistogramFactory self, String path, String title) {
  try {
    return ICloud1D.getCPtr((hep.aida.ICloud1D)self.createCloud1D(path, title));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud1D__SWIG_3(hep.aida.IHistogramFactory self, String pathAndTitle) {
  try {
    return ICloud1D.getCPtr((hep.aida.ICloud1D)self.createCloud1D(pathAndTitle));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCopy__SWIG_0(hep.aida.IHistogramFactory self, String path, long cloud) {
  try {
    return ICloud1D.getCPtr((hep.aida.ICloud1D)self.createCopy(path, new ICloud1D(cloud, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud2D__SWIG_0(hep.aida.IHistogramFactory self, String path, String title, int nMax, String options) {
  try {
    return ICloud2D.getCPtr((hep.aida.ICloud2D)self.createCloud2D(path, title, nMax, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud2D__SWIG_1(hep.aida.IHistogramFactory self, String path, String title, int nMax) {
  try {
    return ICloud2D.getCPtr((hep.aida.ICloud2D)self.createCloud2D(path, title, nMax));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud2D__SWIG_2(hep.aida.IHistogramFactory self, String path, String title) {
  try {
    return ICloud2D.getCPtr((hep.aida.ICloud2D)self.createCloud2D(path, title));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud2D__SWIG_3(hep.aida.IHistogramFactory self, String pathAndTitle) {
  try {
    return ICloud2D.getCPtr((hep.aida.ICloud2D)self.createCloud2D(pathAndTitle));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCopy__SWIG_1(hep.aida.IHistogramFactory self, String path, long cloud) {
  try {
    return ICloud2D.getCPtr((hep.aida.ICloud2D)self.createCopy(path, new ICloud2D(cloud, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud3D__SWIG_0(hep.aida.IHistogramFactory self, String path, String title, int nMax, String options) {
  try {
    return ICloud3D.getCPtr((hep.aida.ICloud3D)self.createCloud3D(path, title, nMax, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud3D__SWIG_1(hep.aida.IHistogramFactory self, String path, String title, int nMax) {
  try {
    return ICloud3D.getCPtr((hep.aida.ICloud3D)self.createCloud3D(path, title, nMax));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud3D__SWIG_2(hep.aida.IHistogramFactory self, String path, String title) {
  try {
    return ICloud3D.getCPtr((hep.aida.ICloud3D)self.createCloud3D(path, title));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCloud3D__SWIG_3(hep.aida.IHistogramFactory self, String pathAndTitle) {
  try {
    return ICloud3D.getCPtr((hep.aida.ICloud3D)self.createCloud3D(pathAndTitle));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCopy__SWIG_2(hep.aida.IHistogramFactory self, String path, long cloud) {
  try {
    return ICloud3D.getCPtr((hep.aida.ICloud3D)self.createCopy(path, new ICloud3D(cloud, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram1D__SWIG_0(hep.aida.IHistogramFactory self, String path, String title, int nBins, double lowerEdge, double upperEdge, String options) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.createHistogram1D(path, title, nBins, lowerEdge, upperEdge, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram1D__SWIG_1(hep.aida.IHistogramFactory self, String path, String title, int nBins, double lowerEdge, double upperEdge) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.createHistogram1D(path, title, nBins, lowerEdge, upperEdge));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram1D__SWIG_2(hep.aida.IHistogramFactory self, String pathAndTitle, int nBins, double lowerEdge, double upperEdge) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.createHistogram1D(pathAndTitle, nBins, lowerEdge, upperEdge));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram1D__SWIG_3(hep.aida.IHistogramFactory self, String path, String title, double[] binEdges, String options) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.createHistogram1D(path, title, binEdges, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram1D__SWIG_4(hep.aida.IHistogramFactory self, String path, String title, double[] binEdges) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.createHistogram1D(path, title, binEdges));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCopy__SWIG_3(hep.aida.IHistogramFactory self, String path, long hist) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.createCopy(path, new IHistogram1D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram2D__SWIG_0(hep.aida.IHistogramFactory self, String path, String title, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY, String options) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.createHistogram2D(path, title, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram2D__SWIG_1(hep.aida.IHistogramFactory self, String path, String title, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.createHistogram2D(path, title, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram2D__SWIG_2(hep.aida.IHistogramFactory self, String pathAndTitle, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.createHistogram2D(pathAndTitle, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram2D__SWIG_3(hep.aida.IHistogramFactory self, String path, String title, double[] binEdgesX, double[] binEdgesY, String options) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.createHistogram2D(path, title, binEdgesX, binEdgesY, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram2D__SWIG_4(hep.aida.IHistogramFactory self, String path, String title, double[] binEdgesX, double[] binEdgesY) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.createHistogram2D(path, title, binEdgesX, binEdgesY));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCopy__SWIG_4(hep.aida.IHistogramFactory self, String copy, long hist) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.createCopy(copy, new IHistogram2D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram3D__SWIG_0(hep.aida.IHistogramFactory self, String path, String title, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY, int nBinsZ, double lowerEdgeZ, double upperEdgeZ, String options) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.createHistogram3D(path, title, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY, nBinsZ, lowerEdgeZ, upperEdgeZ, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram3D__SWIG_1(hep.aida.IHistogramFactory self, String path, String title, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY, int nBinsZ, double lowerEdgeZ, double upperEdgeZ) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.createHistogram3D(path, title, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY, nBinsZ, lowerEdgeZ, upperEdgeZ));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram3D__SWIG_2(hep.aida.IHistogramFactory self, String pathAndTitle, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY, int nBinsZ, double lowerEdgeZ, double upperEdgeZ) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.createHistogram3D(pathAndTitle, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY, nBinsZ, lowerEdgeZ, upperEdgeZ));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram3D__SWIG_3(hep.aida.IHistogramFactory self, String path, String title, double[] binEdgesX, double[] binEdgesY, double[] binEdgesZ, String options) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.createHistogram3D(path, title, binEdgesX, binEdgesY, binEdgesZ, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createHistogram3D__SWIG_4(hep.aida.IHistogramFactory self, String path, String title, double[] binEdgesX, double[] binEdgesY, double[] binEdgesZ) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.createHistogram3D(path, title, binEdgesX, binEdgesY, binEdgesZ));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCopy__SWIG_5(hep.aida.IHistogramFactory self, String path, long hist) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.createCopy(path, new IHistogram3D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_0(hep.aida.IHistogramFactory self, String path, String title, int nBins, double lowerEdge, double upperEdge, String options) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(path, title, nBins, lowerEdge, upperEdge, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_1(hep.aida.IHistogramFactory self, String path, String title, int nBins, double lowerEdge, double upperEdge) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(path, title, nBins, lowerEdge, upperEdge));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_2(hep.aida.IHistogramFactory self, String path, String title, int nBins, double lowerEdge, double upperEdge, double lowerValue, double upperValue, String options) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(path, title, nBins, lowerEdge, upperEdge, lowerValue, upperValue, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_3(hep.aida.IHistogramFactory self, String path, String title, int nBins, double lowerEdge, double upperEdge, double lowerValue, double upperValue) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(path, title, nBins, lowerEdge, upperEdge, lowerValue, upperValue));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_4(hep.aida.IHistogramFactory self, String path, String title, double[] binEdges, String options) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(path, title, binEdges, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_5(hep.aida.IHistogramFactory self, String path, String title, double[] binEdges) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(path, title, binEdges));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_6(hep.aida.IHistogramFactory self, String path, String title, double[] binEdges, double lowerValue, double upperValue, String options) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(path, title, binEdges, lowerValue, upperValue, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_7(hep.aida.IHistogramFactory self, String path, String title, double[] binEdges, double lowerValue, double upperValue) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(path, title, binEdges, lowerValue, upperValue));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_8(hep.aida.IHistogramFactory self, String pathAndTitle, int nBins, double lowerEdge, double upperEdge) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(pathAndTitle, nBins, lowerEdge, upperEdge));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile1D__SWIG_9(hep.aida.IHistogramFactory self, String pathAndTitle, int nBins, double lowerEdge, double upperEdge, double lowerValue, double upperValue) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createProfile1D(pathAndTitle, nBins, lowerEdge, upperEdge, lowerValue, upperValue));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCopy__SWIG_6(hep.aida.IHistogramFactory self, String path, long profile) {
  try {
    return IProfile1D.getCPtr((hep.aida.IProfile1D)self.createCopy(path, new IProfile1D(profile, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_0(hep.aida.IHistogramFactory self, String path, String title, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY, String options) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(path, title, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_1(hep.aida.IHistogramFactory self, String path, String title, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(path, title, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_2(hep.aida.IHistogramFactory self, String path, String title, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY, double lowerValue, double upperValue, String options) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(path, title, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY, lowerValue, upperValue, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_3(hep.aida.IHistogramFactory self, String path, String title, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY, double lowerValue, double upperValue) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(path, title, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY, lowerValue, upperValue));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_4(hep.aida.IHistogramFactory self, String path, String title, double[] binEdgesX, double[] binEdgesY, String options) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(path, title, binEdgesX, binEdgesY, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_5(hep.aida.IHistogramFactory self, String path, String title, double[] binEdgesX, double[] binEdgesY) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(path, title, binEdgesX, binEdgesY));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_6(hep.aida.IHistogramFactory self, String path, String title, double[] binEdgesX, double[] binEdgesY, double lowerValue, double upperValue, String options) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(path, title, binEdgesX, binEdgesY, lowerValue, upperValue, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_7(hep.aida.IHistogramFactory self, String path, String title, double[] binEdgesX, double[] binEdgesY, double lowerValue, double upperValue) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(path, title, binEdgesX, binEdgesY, lowerValue, upperValue));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_8(hep.aida.IHistogramFactory self, String pathAndTitle, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(pathAndTitle, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createProfile2D__SWIG_9(hep.aida.IHistogramFactory self, String pathAndTitle, int nBinsX, double lowerEdgeX, double upperEdgeX, int nBinsY, double lowerEdgeY, double upperEdgeY, double lowerValue, double upperValue) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createProfile2D(pathAndTitle, nBinsX, lowerEdgeX, upperEdgeX, nBinsY, lowerEdgeY, upperEdgeY, lowerValue, upperValue));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_createCopy__SWIG_7(hep.aida.IHistogramFactory self, String path, long profile) {
  try {
    return IProfile2D.getCPtr((hep.aida.IProfile2D)self.createCopy(path, new IProfile2D(profile, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_add__SWIG_0(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.add(path, new IHistogram1D(hist1, false), new IHistogram1D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_subtract__SWIG_0(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.subtract(path, new IHistogram1D(hist1, false), new IHistogram1D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_multiply__SWIG_0(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.multiply(path, new IHistogram1D(hist1, false), new IHistogram1D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_divide__SWIG_0(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.divide(path, new IHistogram1D(hist1, false), new IHistogram1D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_add__SWIG_1(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.add(path, new IHistogram2D(hist1, false), new IHistogram2D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_subtract__SWIG_1(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.subtract(path, new IHistogram2D(hist1, false), new IHistogram2D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_multiply__SWIG_1(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.multiply(path, new IHistogram2D(hist1, false), new IHistogram2D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_divide__SWIG_1(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.divide(path, new IHistogram2D(hist1, false), new IHistogram2D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_add__SWIG_2(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.add(path, new IHistogram3D(hist1, false), new IHistogram3D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_subtract__SWIG_2(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.subtract(path, new IHistogram3D(hist1, false), new IHistogram3D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_multiply__SWIG_2(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.multiply(path, new IHistogram3D(hist1, false), new IHistogram3D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_divide__SWIG_2(hep.aida.IHistogramFactory self, String path, long hist1, long hist2) {
  try {
    return IHistogram3D.getCPtr((hep.aida.IHistogram3D)self.divide(path, new IHistogram3D(hist1, false), new IHistogram3D(hist2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_projectionX(hep.aida.IHistogramFactory self, String path, long hist) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.projectionX(path, new IHistogram2D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_projectionY(hep.aida.IHistogramFactory self, String path, long hist) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.projectionY(path, new IHistogram2D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_sliceX__SWIG_0(hep.aida.IHistogramFactory self, String path, long hist, int index) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.sliceX(path, new IHistogram2D(hist, false), index));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_sliceY__SWIG_0(hep.aida.IHistogramFactory self, String path, long hist, int index) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.sliceY(path, new IHistogram2D(hist, false), index));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_sliceX__SWIG_1(hep.aida.IHistogramFactory self, String path, long hist, int index1, int index2) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.sliceX(path, new IHistogram2D(hist, false), index1, index2));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_sliceY__SWIG_1(hep.aida.IHistogramFactory self, String path, long hist, int index1, int index2) {
  try {
    return IHistogram1D.getCPtr((hep.aida.IHistogram1D)self.sliceY(path, new IHistogram2D(hist, false), index1, index2));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_projectionXY(hep.aida.IHistogramFactory self, String path, long hist) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.projectionXY(path, new IHistogram3D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_projectionXZ(hep.aida.IHistogramFactory self, String path, long hist) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.projectionXZ(path, new IHistogram3D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_projectionYZ(hep.aida.IHistogramFactory self, String path, long hist) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.projectionYZ(path, new IHistogram3D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_sliceXY(hep.aida.IHistogramFactory self, String path, long hist, int index1, int index2) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.sliceXY(path, new IHistogram3D(hist, false), index1, index2));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_sliceXZ(hep.aida.IHistogramFactory self, String path, long hist, int index1, int index2) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.sliceXZ(path, new IHistogram3D(hist, false), index1, index2));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IHistogramFactory_sliceYZ(hep.aida.IHistogramFactory self, String path, long hist, int index1, int index2) {
  try {
    return IHistogram2D.getCPtr((hep.aida.IHistogram2D)self.sliceYZ(path, new IHistogram3D(hist, false), index1, index2));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IDataPoint_dimension(hep.aida.IDataPoint self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPoint_coordinate(hep.aida.IDataPoint self, int coord) {
  try {
    return IMeasurement.getCPtr((hep.aida.IMeasurement)self.coordinate(coord));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSet_annotation(hep.aida.IDataPointSet self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IDataPointSet_title(hep.aida.IDataPointSet self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSet_setTitle(hep.aida.IDataPointSet self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IDataPointSet_dimension(hep.aida.IDataPointSet self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSet_clear(hep.aida.IDataPointSet self) {
  try {
    self.clear();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IDataPointSet_size(hep.aida.IDataPointSet self) {
  try {
    return self.size();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSet_setCoordinate__SWIG_0(hep.aida.IDataPointSet self, int coord, double[] val, double[] err) {
  try {
    self.setCoordinate(coord, val, err);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSet_setCoordinate__SWIG_1(hep.aida.IDataPointSet self, int coord, double[] val, double[] errp, double[] errm) {
  try {
    self.setCoordinate(coord, val, errp, errm);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSet_point(hep.aida.IDataPointSet self, int index) {
  try {
    return IDataPoint.getCPtr((hep.aida.IDataPoint)self.point(index));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSet_addPoint__SWIG_0(hep.aida.IDataPointSet self) {
  try {
    return IDataPoint.getCPtr((hep.aida.IDataPoint)self.addPoint());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSet_addPoint__SWIG_1(hep.aida.IDataPointSet self, long point) {
  try {
    self.addPoint(new IDataPoint(point, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSet_removePoint(hep.aida.IDataPointSet self, int index) {
  try {
    self.removePoint(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IDataPointSet_lowerExtent(hep.aida.IDataPointSet self, int coord) {
  try {
    return self.lowerExtent(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IDataPointSet_upperExtent(hep.aida.IDataPointSet self, int coord) {
  try {
    return self.upperExtent(coord);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSet_scale(hep.aida.IDataPointSet self, double scaleFactor) {
  try {
    self.scale(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSet_scaleValues(hep.aida.IDataPointSet self, double scaleFactor) {
  try {
    self.scaleValues(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSet_scaleErrors(hep.aida.IDataPointSet self, double scaleFactor) {
  try {
    self.scaleErrors(scaleFactor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_0(hep.aida.IDataPointSetFactory self, String path, String title, int dimOfPoints) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, title, dimOfPoints));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_1(hep.aida.IDataPointSetFactory self, String pathAndTitle, int dimOfPoints) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(pathAndTitle, dimOfPoints));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createY__SWIG_0(hep.aida.IDataPointSetFactory self, String path, String title, double[] y, double[] ey) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createY(path, title, y, ey));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createY__SWIG_1(hep.aida.IDataPointSetFactory self, String path, String title, double[] y, double[] eyp, double[] eym) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createY(path, title, y, eyp, eym));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createY__SWIG_2(hep.aida.IDataPointSetFactory self, String pathAndTitle, double[] y, double[] ey) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createY(pathAndTitle, y, ey));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createY__SWIG_3(hep.aida.IDataPointSetFactory self, String pathAndTitle, double[] y, double[] eyp, double[] eym) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createY(pathAndTitle, y, eyp, eym));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createX__SWIG_0(hep.aida.IDataPointSetFactory self, String path, String title, double[] x, double[] ex) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createX(path, title, x, ex));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createX__SWIG_1(hep.aida.IDataPointSetFactory self, String path, String title, double[] x, double[] exp, double[] exm) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createX(path, title, x, exp, exm));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createX__SWIG_2(hep.aida.IDataPointSetFactory self, String pathAndTitle, double[] x, double[] ex) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createX(pathAndTitle, x, ex));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createX__SWIG_3(hep.aida.IDataPointSetFactory self, String pathAndTitle, double[] x, double[] exp, double[] exm) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createX(pathAndTitle, x, exp, exm));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createXY__SWIG_0(hep.aida.IDataPointSetFactory self, String path, String title, double[] x, double[] y, double[] exp, double[] eyp, double[] exm, double[] eym) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createXY(path, title, x, y, exp, eyp, exm, eym));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createXY__SWIG_1(hep.aida.IDataPointSetFactory self, String path, String title, double[] x, double[] y, double[] ex, double[] ey) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createXY(path, title, x, y, ex, ey));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createXY__SWIG_2(hep.aida.IDataPointSetFactory self, String pathAndTitle, double[] x, double[] y, double[] exp, double[] eyp, double[] exm, double[] eym) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createXY(pathAndTitle, x, y, exp, eyp, exm, eym));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createXY__SWIG_3(hep.aida.IDataPointSetFactory self, String pathAndTitle, double[] x, double[] y, double[] ex, double[] ey) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createXY(pathAndTitle, x, y, ex, ey));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createXYZ__SWIG_0(hep.aida.IDataPointSetFactory self, String path, String title, double[] x, double[] y, double[] z, double[] exp, double[] eyp, double[] ezp, double[] exm, double[] eym, double[] ezm) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createXYZ(path, title, x, y, z, exp, eyp, ezp, exm, eym, ezm));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createXYZ__SWIG_1(hep.aida.IDataPointSetFactory self, String path, String title, double[] x, double[] y, double[] z, double[] ex, double[] ey, double[] ez) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createXYZ(path, title, x, y, z, ex, ey, ez));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createXYZ__SWIG_2(hep.aida.IDataPointSetFactory self, String pathAndTitle, double[] x, double[] y, double[] z, double[] exp, double[] eyp, double[] ezp, double[] exm, double[] eym, double[] ezm) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createXYZ(pathAndTitle, x, y, z, exp, eyp, ezp, exm, eym, ezm));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createXYZ__SWIG_3(hep.aida.IDataPointSetFactory self, String pathAndTitle, double[] x, double[] y, double[] z, double[] ex, double[] ey, double[] ez) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createXYZ(pathAndTitle, x, y, z, ex, ey, ez));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_createCopy(hep.aida.IDataPointSetFactory self, String path, long dataPointSet) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createCopy(path, new IDataPointSet(dataPointSet, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataPointSetFactory_destroy(hep.aida.IDataPointSetFactory self, long dataPointSet) {
  try {
    self.destroy(new IDataPointSet(dataPointSet, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_2(hep.aida.IDataPointSetFactory self, String path, long hist, String options) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IHistogram1D(hist, false), options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_3(hep.aida.IDataPointSetFactory self, String path, long hist) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IHistogram1D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_4(hep.aida.IDataPointSetFactory self, String path, long hist, String options) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IHistogram2D(hist, false), options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_5(hep.aida.IDataPointSetFactory self, String path, long hist) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IHistogram2D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_6(hep.aida.IDataPointSetFactory self, String path, long hist, String options) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IHistogram3D(hist, false), options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_7(hep.aida.IDataPointSetFactory self, String path, long hist) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IHistogram3D(hist, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_8(hep.aida.IDataPointSetFactory self, String path, long cloud, String options) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new ICloud1D(cloud, false), options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_9(hep.aida.IDataPointSetFactory self, String path, long cloud) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new ICloud1D(cloud, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_10(hep.aida.IDataPointSetFactory self, String path, long cloud, String options) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new ICloud2D(cloud, false), options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_11(hep.aida.IDataPointSetFactory self, String path, long cloud) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new ICloud2D(cloud, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_12(hep.aida.IDataPointSetFactory self, String path, long cloud, String options) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new ICloud3D(cloud, false), options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_13(hep.aida.IDataPointSetFactory self, String path, long cloud) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new ICloud3D(cloud, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_14(hep.aida.IDataPointSetFactory self, String path, long profile, String options) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IProfile1D(profile, false), options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_15(hep.aida.IDataPointSetFactory self, String path, long profile) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IProfile1D(profile, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_16(hep.aida.IDataPointSetFactory self, String path, long profile, String options) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IProfile2D(profile, false), options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_create__SWIG_17(hep.aida.IDataPointSetFactory self, String path, long profile) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.create(path, new IProfile2D(profile, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_add(hep.aida.IDataPointSetFactory self, String path, long dataPointSet1, long dataPointSet2) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.add(path, new IDataPointSet(dataPointSet1, false), new IDataPointSet(dataPointSet2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_subtract(hep.aida.IDataPointSetFactory self, String path, long dataPointSet1, long dataPointSet2) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.subtract(path, new IDataPointSet(dataPointSet1, false), new IDataPointSet(dataPointSet2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_multiply(hep.aida.IDataPointSetFactory self, String path, long dataPointSet1, long dataPointSet2) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.multiply(path, new IDataPointSet(dataPointSet1, false), new IDataPointSet(dataPointSet2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_divide(hep.aida.IDataPointSetFactory self, String path, long dataPointSet1, long dataPointSet2) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.divide(path, new IDataPointSet(dataPointSet1, false), new IDataPointSet(dataPointSet2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataPointSetFactory_weightedMean(hep.aida.IDataPointSetFactory self, String path, long dataPointSet1, long dataPointSet2) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.weightedMean(path, new IDataPointSet(dataPointSet1, false), new IDataPointSet(dataPointSet2, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITree_storeName(hep.aida.ITree self) {
  try {
    return self.storeName();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITree_find(hep.aida.ITree self, String path) {
  try {
    return IManagedObject.getCPtr((hep.aida.IManagedObject)self.find(path));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITree_findTree(hep.aida.ITree self, String path) {
  try {
    return ITree.getCPtr((hep.aida.ITree)self.findTree(path));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_cd(hep.aida.ITree self, String path) {
  try {
    self.cd(path);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITree_pwd(hep.aida.ITree self) {
  try {
    return self.pwd();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITree_listObjectNames__SWIG_0(hep.aida.ITree self, String path, boolean recursive) {
  try {
    return AIDAJNIUtil.toPtr(self.listObjectNames(path, recursive));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITree_listObjectNames__SWIG_1(hep.aida.ITree self, String path) {
  try {
    return AIDAJNIUtil.toPtr(self.listObjectNames(path));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITree_listObjectNames__SWIG_2(hep.aida.ITree self) {
  try {
    return AIDAJNIUtil.toPtr(self.listObjectNames());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITree_listObjectTypes__SWIG_0(hep.aida.ITree self, String path, boolean recursive) {
  try {
    return AIDAJNIUtil.toPtr(self.listObjectTypes(path, recursive));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITree_listObjectTypes__SWIG_1(hep.aida.ITree self, String path) {
  try {
    return AIDAJNIUtil.toPtr(self.listObjectTypes(path));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITree_listObjectTypes__SWIG_2(hep.aida.ITree self) {
  try {
    return AIDAJNIUtil.toPtr(self.listObjectTypes());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_mkdir(hep.aida.ITree self, String path) {
  try {
    self.mkdir(path);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_mkdirs(hep.aida.ITree self, String path) {
  try {
    self.mkdirs(path);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_rmdir(hep.aida.ITree self, String path) {
  try {
    self.rmdir(path);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_rm(hep.aida.ITree self, String path) {
  try {
    self.rm(path);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITree_findPath(hep.aida.ITree self, long object) {
  try {
    return self.findPath(new IManagedObject(object, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_mv(hep.aida.ITree self, String oldPath, String newPath) {
  try {
    self.mv(oldPath, newPath);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_commit(hep.aida.ITree self) {
  try {
    self.commit();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_setOverwrite__SWIG_0(hep.aida.ITree self, boolean overwrite) {
  try {
    self.setOverwrite(overwrite);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_setOverwrite__SWIG_1(hep.aida.ITree self) {
  try {
    self.setOverwrite();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_cp__SWIG_0(hep.aida.ITree self, String oldPath, String newPath, boolean recursive) {
  try {
    self.cp(oldPath, newPath, recursive);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_cp__SWIG_1(hep.aida.ITree self, String oldPath, String newPath) {
  try {
    self.cp(oldPath, newPath);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_symlink(hep.aida.ITree self, String path, String alias) {
  try {
    self.symlink(path, alias);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_mount(hep.aida.ITree self, String path, long tree, String treePath) {
  try {
    self.mount(path, new ITree(tree, false), treePath);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_unmount(hep.aida.ITree self, String path) {
  try {
    self.unmount(path);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITree_close(hep.aida.ITree self) {
  try {
    self.close();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITreeFactory_create__SWIG_0(hep.aida.ITreeFactory self) {
  try {
    return ITree.getCPtr((hep.aida.ITree)self.create());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITreeFactory_create__SWIG_1(hep.aida.ITreeFactory self, String storeName, String storeType, boolean readOnly, boolean createNew, String options) {
  try {
    return ITree.getCPtr((hep.aida.ITree)self.create(storeName, storeType, readOnly, createNew, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITreeFactory_create__SWIG_2(hep.aida.ITreeFactory self, String storeName, String storeType, boolean readOnly, boolean createNew) {
  try {
    return ITree.getCPtr((hep.aida.ITree)self.create(storeName, storeType, readOnly, createNew));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITreeFactory_create__SWIG_3(hep.aida.ITreeFactory self, String storeName, String storeType, boolean readOnly) {
  try {
    return ITree.getCPtr((hep.aida.ITree)self.create(storeName, storeType, readOnly));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITreeFactory_create__SWIG_4(hep.aida.ITreeFactory self, String storeName, String storeType) {
  try {
    return ITree.getCPtr((hep.aida.ITree)self.create(storeName, storeType));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITreeFactory_create__SWIG_5(hep.aida.ITreeFactory self, String storeName) {
  try {
    return ITree.getCPtr((hep.aida.ITree)self.create(storeName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFilter_initialize(hep.aida.IFilter self, long tuple) {
  try {
    self.initialize(new ITuple(tuple, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFilter_accept(hep.aida.IFilter self) {
  try {
    return self.accept();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFilter_expression(hep.aida.IFilter self) {
  try {
    return self.expression();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IEvaluator_initialize(hep.aida.IEvaluator self, long tuple) {
  try {
    self.initialize(new ITuple(tuple, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IEvaluator_evaluateDouble(hep.aida.IEvaluator self) {
  try {
    return self.evaluateDouble();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IEvaluator_expression(hep.aida.IEvaluator self) {
  try {
    return self.expression();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITuple_title(hep.aida.ITuple self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_setTitle(hep.aida.ITuple self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITuple_annotation(hep.aida.ITuple self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_0(hep.aida.ITuple self, int column, double value) {
  try {
    self.fill(column, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_1(hep.aida.ITuple self, int column, float value) {
  try {
    self.fill(column, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_2(hep.aida.ITuple self, int column, int value) {
  try {
    self.fill(column, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_3(hep.aida.ITuple self, int column, short value) {
  try {
    self.fill(column, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_4(hep.aida.ITuple self, int column, long value) {
  try {
    self.fill(column, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_5(hep.aida.ITuple self, int column, char value) {
  try {
    self.fill(column, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_6(hep.aida.ITuple self, int column, boolean value) {
  try {
    self.fill(column, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_7(hep.aida.ITuple self, int column, String value) {
  try {
    self.fill(column, value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_8(hep.aida.ITuple self, int column, long value) {
  try {
    self.fill(column, new ITupleEntry(value, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_9(hep.aida.ITuple self, double[] values) {
  try {
    self.fill(values);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_fill__SWIG_10(hep.aida.ITuple self, float[] values) {
  try {
    self.fill(values);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_addRow(hep.aida.ITuple self) {
  try {
    self.addRow();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_resetRow(hep.aida.ITuple self) {
  try {
    self.resetRow();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_reset(hep.aida.ITuple self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ITuple_rows(hep.aida.ITuple self) {
  try {
    return self.rows();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_start(hep.aida.ITuple self) {
  try {
    self.start();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_skip(hep.aida.ITuple self, int rows) {
  try {
    self.skip(rows);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITuple_next(hep.aida.ITuple self) {
  try {
    return self.next();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_setRow(hep.aida.ITuple self, int rowIndex) {
  try {
    self.setRow(rowIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ITuple_findColumn(hep.aida.ITuple self, String name) {
  try {
    return self.findColumn(name);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ITuple_getDouble(hep.aida.ITuple self, int column) {
  try {
    return self.getDouble(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static float SwigDirector_ITuple_getFloat(hep.aida.ITuple self, int column) {
  try {
    return self.getFloat(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ITuple_getInt(hep.aida.ITuple self, int column) {
  try {
    return self.getInt(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static short SwigDirector_ITuple_getShort(hep.aida.ITuple self, int column) {
  try {
    return self.getShort(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITuple_getLong(hep.aida.ITuple self, int column) {
  try {
    return self.getLong(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static char SwigDirector_ITuple_getChar(hep.aida.ITuple self, int column) {
  try {
    return self.getChar(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITuple_getBoolean(hep.aida.ITuple self, int column) {
  try {
    return self.getBoolean(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITuple_getString(hep.aida.ITuple self, int column) {
  try {
    return self.getString(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITuple_getObject(hep.aida.ITuple self, int column) {
  try {
    return ITupleEntry.getCPtr((hep.aida.ITupleEntry)self.getObject(column));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITuple_getTuple(hep.aida.ITuple self, int column) {
  try {
    return ITuple.getCPtr((hep.aida.ITuple)self.getTuple(column));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ITuple_columns(hep.aida.ITuple self) {
  try {
    return self.columns();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITuple_columnName(hep.aida.ITuple self, int column) {
  try {
    return self.columnName(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITuple_columnNames(hep.aida.ITuple self) {
  try {
    return AIDAJNIUtil.toPtr(self.columnNames());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITuple_columnType(hep.aida.ITuple self, int column) {
  try {
    return AIDAJNIUtil.convert(self.columnType(column));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITuple_columnTypes(hep.aida.ITuple self) {
  try {
    return AIDAJNIUtil.toPtr(self.columnTypes());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ITuple_columnMin(hep.aida.ITuple self, int column) {
  try {
    return self.columnMin(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ITuple_columnMax(hep.aida.ITuple self, int column) {
  try {
    return self.columnMax(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ITuple_columnMean(hep.aida.ITuple self, int column) {
  try {
    return self.columnMean(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ITuple_columnRms(hep.aida.ITuple self, int column) {
  try {
    return self.columnRms(column);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_0(hep.aida.ITuple self, long histogram, long evaluatorX) {
  try {
    self.project(new IHistogram1D(histogram, false), new IEvaluator(evaluatorX, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_1(hep.aida.ITuple self, long histogram, long evaluatorX, long filter) {
  try {
    self.project(new IHistogram1D(histogram, false), new IEvaluator(evaluatorX, false), new IFilter(filter, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_2(hep.aida.ITuple self, long histogram, long evaluatorX, long weight) {
  try {
    self.project(new IHistogram1D(histogram, false), new IEvaluator(evaluatorX, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_3(hep.aida.ITuple self, long histogram, long evaluatorX, long filter, long weight) {
  try {
    self.project(new IHistogram1D(histogram, false), new IEvaluator(evaluatorX, false), new IFilter(filter, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_4(hep.aida.ITuple self, long histogram, long evaluatorX, long evaluatorY) {
  try {
    self.project(new IHistogram2D(histogram, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_5(hep.aida.ITuple self, long histogram, long evaluatorX, long evaluatorY, long filter) {
  try {
    self.project(new IHistogram2D(histogram, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IFilter(filter, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_6(hep.aida.ITuple self, long histogram, long evaluatorX, long evaluatorY, long weight) {
  try {
    self.project(new IHistogram2D(histogram, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_7(hep.aida.ITuple self, long histogram, long evaluatorX, long evaluatorY, long filter, long weight) {
  try {
    self.project(new IHistogram2D(histogram, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IFilter(filter, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_8(hep.aida.ITuple self, long histogram, long evaluatorX, long evaluatorY, long evaluatorZ) {
  try {
    self.project(new IHistogram3D(histogram, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_9(hep.aida.ITuple self, long histogram, long evaluatorX, long evaluatorY, long evaluatorZ, long filter) {
  try {
    self.project(new IHistogram3D(histogram, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false), new IFilter(filter, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_10(hep.aida.ITuple self, long histogram, long evaluatorX, long evaluatorY, long evaluatorZ, long weight) {
  try {
    self.project(new IHistogram3D(histogram, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_11(hep.aida.ITuple self, long histogram, long evaluatorX, long evaluatorY, long evaluatorZ, long filter, long weight) {
  try {
    self.project(new IHistogram3D(histogram, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false), new IFilter(filter, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_12(hep.aida.ITuple self, long cloud, long evaluatorX) {
  try {
    self.project(new ICloud1D(cloud, false), new IEvaluator(evaluatorX, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_13(hep.aida.ITuple self, long cloud, long evaluatorX, long filter) {
  try {
    self.project(new ICloud1D(cloud, false), new IEvaluator(evaluatorX, false), new IFilter(filter, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_14(hep.aida.ITuple self, long cloud, long evaluatorX, long weight) {
  try {
    self.project(new ICloud1D(cloud, false), new IEvaluator(evaluatorX, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_15(hep.aida.ITuple self, long cloud, long evaluatorX, long filter, long weight) {
  try {
    self.project(new ICloud1D(cloud, false), new IEvaluator(evaluatorX, false), new IFilter(filter, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_16(hep.aida.ITuple self, long cloud, long evaluatorX, long evaluatorY) {
  try {
    self.project(new ICloud2D(cloud, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_17(hep.aida.ITuple self, long cloud, long evaluatorX, long evaluatorY, long filter) {
  try {
    self.project(new ICloud2D(cloud, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IFilter(filter, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_18(hep.aida.ITuple self, long cloud, long evaluatorX, long evaluatorY, long weight) {
  try {
    self.project(new ICloud2D(cloud, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_19(hep.aida.ITuple self, long cloud, long evaluatorX, long evaluatorY, long filter, long weight) {
  try {
    self.project(new ICloud2D(cloud, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IFilter(filter, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_20(hep.aida.ITuple self, long cloud, long evaluatorX, long evaluatorY, long evaluatorZ) {
  try {
    self.project(new ICloud3D(cloud, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_21(hep.aida.ITuple self, long cloud, long evaluatorX, long evaluatorY, long evaluatorZ, long filter) {
  try {
    self.project(new ICloud3D(cloud, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false), new IFilter(filter, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_22(hep.aida.ITuple self, long cloud, long evaluatorX, long evaluatorY, long evaluatorZ, long weight) {
  try {
    self.project(new ICloud3D(cloud, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_23(hep.aida.ITuple self, long cloud, long evaluatorX, long evaluatorY, long evaluatorZ, long filter, long weight) {
  try {
    self.project(new ICloud3D(cloud, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false), new IFilter(filter, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_24(hep.aida.ITuple self, long profile, long evaluatorX, long evaluatorY) {
  try {
    self.project(new IProfile1D(profile, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_25(hep.aida.ITuple self, long profile, long evaluatorX, long evaluatorY, long filter) {
  try {
    self.project(new IProfile1D(profile, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IFilter(filter, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_26(hep.aida.ITuple self, long profile, long evaluatorX, long evaluatorY, long weight) {
  try {
    self.project(new IProfile1D(profile, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_27(hep.aida.ITuple self, long profile, long evaluatorX, long evaluatorY, long filter, long weight) {
  try {
    self.project(new IProfile1D(profile, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IFilter(filter, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_28(hep.aida.ITuple self, long profile, long evaluatorX, long evaluatorY, long evaluatorZ) {
  try {
    self.project(new IProfile2D(profile, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_29(hep.aida.ITuple self, long profile, long evaluatorX, long evaluatorY, long evaluatorZ, long filter) {
  try {
    self.project(new IProfile2D(profile, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false), new IFilter(filter, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_30(hep.aida.ITuple self, long profile, long evaluatorX, long evaluatorY, long evaluatorZ, long weight) {
  try {
    self.project(new IProfile2D(profile, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITuple_project__SWIG_31(hep.aida.ITuple self, long profile, long evaluatorX, long evaluatorY, long evaluatorZ, long filter, long weight) {
  try {
    self.project(new IProfile2D(profile, false), new IEvaluator(evaluatorX, false), new IEvaluator(evaluatorY, false), new IEvaluator(evaluatorZ, false), new IFilter(filter, false), new IEvaluator(weight, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_create__SWIG_0(hep.aida.ITupleFactory self, String path, String title, long columnNames, long columnType, String options) {
  try {
    return ITuple.getCPtr((hep.aida.ITuple)self.create(path, title, AIDAJNIUtil.toStringArray(columnNames), AIDAJNIUtil.toClassArray(columnType), options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_create__SWIG_1(hep.aida.ITupleFactory self, String path, String title, long columnNames, long columnType) {
  try {
    return ITuple.getCPtr((hep.aida.ITuple)self.create(path, title, AIDAJNIUtil.toStringArray(columnNames), AIDAJNIUtil.toClassArray(columnType)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_create__SWIG_2(hep.aida.ITupleFactory self, String path, String title, String columns, String options) {
  try {
    return ITuple.getCPtr((hep.aida.ITuple)self.create(path, title, columns, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_create__SWIG_3(hep.aida.ITupleFactory self, String path, String title, String columns) {
  try {
    return ITuple.getCPtr((hep.aida.ITuple)self.create(path, title, columns));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_createChained__SWIG_0(hep.aida.ITupleFactory self, String path, String title, long set) {
  try {
    return ITuple.getCPtr((hep.aida.ITuple)self.createChained(path, title, AIDAJNIUtil.toITupleArray(set)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_createChained__SWIG_1(hep.aida.ITupleFactory self, String path, String title, long set) {
  try {
    return ITuple.getCPtr((hep.aida.ITuple)self.createChained(path, title, AIDAJNIUtil.toStringArray(set)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_createFiltered__SWIG_0(hep.aida.ITupleFactory self, String path, long tuple, long filter) {
  try {
    return ITuple.getCPtr((hep.aida.ITuple)self.createFiltered(path, new ITuple(tuple, false), new IFilter(filter, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_createFiltered__SWIG_1(hep.aida.ITupleFactory self, String path, long tuple, long filter, long columns) {
  try {
    return ITuple.getCPtr((hep.aida.ITuple)self.createFiltered(path, new ITuple(tuple, false), new IFilter(filter, false), AIDAJNIUtil.toStringArray(columns)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_createFilter__SWIG_0(hep.aida.ITupleFactory self, String expression) {
  try {
    return IFilter.getCPtr((hep.aida.IFilter)self.createFilter(expression));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_createFilter__SWIG_1(hep.aida.ITupleFactory self, String expression, int rowsToProcess, int startingRow) {
  try {
    return IFilter.getCPtr((hep.aida.IFilter)self.createFilter(expression, rowsToProcess, startingRow));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_createFilter__SWIG_2(hep.aida.ITupleFactory self, String expression, int rowsToProcess) {
  try {
    return IFilter.getCPtr((hep.aida.IFilter)self.createFilter(expression, rowsToProcess));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITupleFactory_createEvaluator(hep.aida.ITupleFactory self, String expression) {
  try {
    return IEvaluator.getCPtr((hep.aida.IEvaluator)self.createEvaluator(expression));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IMeasurement_value(hep.aida.IMeasurement self) {
  try {
    return self.value();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IMeasurement_errorPlus(hep.aida.IMeasurement self) {
  try {
    return self.errorPlus();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IMeasurement_errorMinus(hep.aida.IMeasurement self) {
  try {
    return self.errorMinus();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IMeasurement_setValue(hep.aida.IMeasurement self, double value) {
  try {
    self.setValue(value);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IMeasurement_setErrorPlus(hep.aida.IMeasurement self, double errorPlus) {
  try {
    self.setErrorPlus(errorPlus);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IMeasurement_setErrorMinus(hep.aida.IMeasurement self, double errorMinus) {
  try {
    self.setErrorMinus(errorMinus);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IRangeSet_lowerBounds(hep.aida.IRangeSet self) {
  try {
    return self.lowerBounds();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IRangeSet_upperBounds(hep.aida.IRangeSet self) {
  try {
    return self.upperBounds();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IRangeSet_include(hep.aida.IRangeSet self, double xMin, double xMax) {
  try {
    self.include(xMin, xMax);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IRangeSet_exclude(hep.aida.IRangeSet self, double xMin, double xMax) {
  try {
    self.exclude(xMin, xMax);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IRangeSet_includeAll(hep.aida.IRangeSet self) {
  try {
    self.includeAll();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IRangeSet_excludeAll(hep.aida.IRangeSet self) {
  try {
    self.excludeAll();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IRangeSet_isInRange(hep.aida.IRangeSet self, double point) {
  try {
    return self.isInRange(point);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IRangeSet_size(hep.aida.IRangeSet self) {
  try {
    return self.size();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IRangeSet_PLUS_INF(hep.aida.IRangeSet self) {
  try {
    return self.PLUS_INF();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IRangeSet_MINUS_INF(hep.aida.IRangeSet self) {
  try {
    return self.MINUS_INF();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create1DConnection__SWIG_0(hep.aida.IFitData self, long h) {
  try {
    self.create1DConnection(new IHistogram1D(h, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create1DConnection__SWIG_1(hep.aida.IFitData self, long c) {
  try {
    self.create1DConnection(new ICloud1D(c, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create1DConnection__SWIG_2(hep.aida.IFitData self, long p) {
  try {
    self.create1DConnection(new IProfile1D(p, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create1DConnection__SWIG_3(hep.aida.IFitData self, long dp, int xIndex, int valIndex) {
  try {
    self.create1DConnection(new IDataPointSet(dp, false), xIndex, valIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create2DConnection__SWIG_0(hep.aida.IFitData self, long h) {
  try {
    self.create2DConnection(new IHistogram2D(h, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create2DConnection__SWIG_1(hep.aida.IFitData self, long h, int xIndex, int yIndex) {
  try {
    self.create2DConnection(new IHistogram2D(h, false), xIndex, yIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create2DConnection__SWIG_2(hep.aida.IFitData self, long c) {
  try {
    self.create2DConnection(new ICloud2D(c, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create2DConnection__SWIG_3(hep.aida.IFitData self, long c, int xIndex, int yIndex) {
  try {
    self.create2DConnection(new ICloud2D(c, false), xIndex, yIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create2DConnection__SWIG_4(hep.aida.IFitData self, long p) {
  try {
    self.create2DConnection(new IProfile2D(p, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create2DConnection__SWIG_5(hep.aida.IFitData self, long p, int xIndex, int yIndex) {
  try {
    self.create2DConnection(new IProfile2D(p, false), xIndex, yIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create2DConnection__SWIG_6(hep.aida.IFitData self, long dp, int xIndex, int yIndex, int valIndex) {
  try {
    self.create2DConnection(new IDataPointSet(dp, false), xIndex, yIndex, valIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create3DConnection__SWIG_0(hep.aida.IFitData self, long h) {
  try {
    self.create3DConnection(new IHistogram3D(h, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create3DConnection__SWIG_1(hep.aida.IFitData self, long h, int xIndex, int yIndex, int zIndex) {
  try {
    self.create3DConnection(new IHistogram3D(h, false), xIndex, yIndex, zIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create3DConnection__SWIG_2(hep.aida.IFitData self, long c) {
  try {
    self.create3DConnection(new ICloud3D(c, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create3DConnection__SWIG_3(hep.aida.IFitData self, long c, int xIndex, int yIndex, int zIndex) {
  try {
    self.create3DConnection(new ICloud3D(c, false), xIndex, yIndex, zIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_create3DConnection__SWIG_4(hep.aida.IFitData self, long dp, int xIndex, int yIndex, int zIndex, int valIndex) {
  try {
    self.create3DConnection(new IDataPointSet(dp, false), xIndex, yIndex, zIndex, valIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_createConnection__SWIG_0(hep.aida.IFitData self, long t, long colNames) {
  try {
    self.createConnection(new ITuple(t, false), AIDAJNIUtil.toStringArray(colNames));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_createConnection__SWIG_1(hep.aida.IFitData self, long t, long evals) {
  try {
    self.createConnection(new ITuple(t, false), AIDAJNIUtil.toIEvaluatorArray(evals));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_createConnection__SWIG_2(hep.aida.IFitData self, long dp, int[] indeces, int valIndex) {
  try {
    self.createConnection(new IDataPointSet(dp, false), indeces, valIndex);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitData_reset(hep.aida.IFitData self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IFitData_dimension(hep.aida.IFitData self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFitData_dataDescription(hep.aida.IFitData self) {
  try {
    return self.dataDescription();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitData_range(hep.aida.IFitData self, int index) {
  try {
    return IRangeSet.getCPtr((hep.aida.IRangeSet)self.range(index));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFunction_title(hep.aida.IFunction self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFunction_setTitle(hep.aida.IFunction self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IFunction_value(hep.aida.IFunction self, double[] x) {
  try {
    return self.value(x);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IFunction_dimension(hep.aida.IFunction self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFunction_isEqual(hep.aida.IFunction self, long f) {
  try {
    return self.isEqual(new IFunction(f, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IFunction_gradient(hep.aida.IFunction self, double[] x) {
  try {
    return self.gradient(x);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFunction_providesGradient(hep.aida.IFunction self) {
  try {
    return self.providesGradient();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFunction_variableName(hep.aida.IFunction self, int i) {
  try {
    return self.variableName(i);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFunction_variableNames(hep.aida.IFunction self) {
  try {
    return AIDAJNIUtil.toPtr(self.variableNames());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFunction_setParameters(hep.aida.IFunction self, double[] params) {
  try {
    self.setParameters(params);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IFunction_parameters(hep.aida.IFunction self) {
  try {
    return self.parameters();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IFunction_numberOfParameters(hep.aida.IFunction self) {
  try {
    return self.numberOfParameters();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFunction_parameterNames(hep.aida.IFunction self) {
  try {
    return AIDAJNIUtil.toPtr(self.parameterNames());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFunction_setParameter(hep.aida.IFunction self, String name, double x) {
  try {
    self.setParameter(name, x);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IFunction_parameter(hep.aida.IFunction self, String name) {
  try {
    return self.parameter(name);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IFunction_indexOfParameter(hep.aida.IFunction self, String name) {
  try {
    return self.indexOfParameter(name);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFunction_annotation(hep.aida.IFunction self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFunction_codeletString(hep.aida.IFunction self) {
  try {
    return self.codeletString();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFitParameterSettings_name(hep.aida.IFitParameterSettings self) {
  try {
    return self.name();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IFitParameterSettings_stepSize(hep.aida.IFitParameterSettings self) {
  try {
    return self.stepSize();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IFitParameterSettings_upperBound(hep.aida.IFitParameterSettings self) {
  try {
    return self.upperBound();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IFitParameterSettings_lowerBound(hep.aida.IFitParameterSettings self) {
  try {
    return self.lowerBound();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFitParameterSettings_isBound(hep.aida.IFitParameterSettings self) {
  try {
    return self.isBound();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFitParameterSettings_isFixed(hep.aida.IFitParameterSettings self) {
  try {
    return self.isFixed();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitParameterSettings_setStepSize(hep.aida.IFitParameterSettings self, double step) {
  try {
    self.setStepSize(step);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitParameterSettings_setBounds(hep.aida.IFitParameterSettings self, double lo, double up) {
  try {
    self.setBounds(lo, up);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitParameterSettings_removeBounds(hep.aida.IFitParameterSettings self) {
  try {
    self.removeBounds();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitParameterSettings_setFixed(hep.aida.IFitParameterSettings self, boolean isFixed) {
  try {
    self.setFixed(isFixed);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitParameterSettings_setLowerBound(hep.aida.IFitParameterSettings self, double lowerBound) {
  try {
    self.setLowerBound(lowerBound);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitParameterSettings_setUpperBound(hep.aida.IFitParameterSettings self, double upperBound) {
  try {
    self.setUpperBound(upperBound);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitParameterSettings_reset(hep.aida.IFitParameterSettings self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFitResult_isValid(hep.aida.IFitResult self) {
  try {
    return self.isValid();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IFitResult_fitStatus(hep.aida.IFitResult self) {
  try {
    return self.fitStatus();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitResult_fittedFunction(hep.aida.IFitResult self) {
  try {
    return IFunction.getCPtr((hep.aida.IFunction)self.fittedFunction());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IFitResult_quality(hep.aida.IFitResult self) {
  try {
    return self.quality();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IFitResult_ndf(hep.aida.IFitResult self) {
  try {
    return self.ndf();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IFitResult_covMatrixElement(hep.aida.IFitResult self, int i, int j) {
  try {
    return self.covMatrixElement(i, j);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFitResult_fitMethodName(hep.aida.IFitResult self) {
  try {
    return self.fitMethodName();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFitResult_engineName(hep.aida.IFitResult self) {
  try {
    return self.engineName();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFitResult_dataDescription(hep.aida.IFitResult self) {
  try {
    return self.dataDescription();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitResult_constraints(hep.aida.IFitResult self) {
  try {
    return AIDAJNIUtil.toPtr(self.constraints());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitResult_fitParameterSettings(hep.aida.IFitResult self, String name) {
  try {
    return IFitParameterSettings.getCPtr((hep.aida.IFitParameterSettings)self.fitParameterSettings(name));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IFitResult_fittedParameters(hep.aida.IFitResult self) {
  try {
    return self.fittedParameters();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitResult_fittedParameterNames(hep.aida.IFitResult self) {
  try {
    return AIDAJNIUtil.toPtr(self.fittedParameterNames());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IFitResult_fittedParameter(hep.aida.IFitResult self, String name) {
  try {
    return self.fittedParameter(name);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IFitResult_errors(hep.aida.IFitResult self) {
  try {
    return self.errors();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IFitResult_errorsPlus(hep.aida.IFitResult self) {
  try {
    return self.errorsPlus();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IFitResult_errorsMinus(hep.aida.IFitResult self) {
  try {
    return self.errorsMinus();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fit__SWIG_0(hep.aida.IFitter self, long fitData, long func) {
  try {
    return IFitResult.getCPtr((hep.aida.IFitResult)self.fit(new IFitData(fitData, false), new IFunction(func, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fit__SWIG_1(hep.aida.IFitter self, long hist, long func) {
  try {
    return IFitResult.getCPtr((hep.aida.IFitResult)self.fit(new IBaseHistogram(hist, false), new IFunction(func, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fit__SWIG_2(hep.aida.IFitter self, long hist, String model) {
  try {
    return IFitResult.getCPtr((hep.aida.IFitResult)self.fit(new IBaseHistogram(hist, false), model));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fit__SWIG_3(hep.aida.IFitter self, long hist, String model, double[] initialParameters) {
  try {
    return IFitResult.getCPtr((hep.aida.IFitResult)self.fit(new IBaseHistogram(hist, false), model, initialParameters));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fit__SWIG_4(hep.aida.IFitter self, long dataPointSet, long f) {
  try {
    return IFitResult.getCPtr((hep.aida.IFitResult)self.fit(new IDataPointSet(dataPointSet, false), new IFunction(f, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fit__SWIG_5(hep.aida.IFitter self, long dataPointSet, String model) {
  try {
    return IFitResult.getCPtr((hep.aida.IFitResult)self.fit(new IDataPointSet(dataPointSet, false), model));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fit__SWIG_6(hep.aida.IFitter self, long dataPointSet, String model, double[] initialParameters) {
  try {
    return IFitResult.getCPtr((hep.aida.IFitResult)self.fit(new IDataPointSet(dataPointSet, false), model, initialParameters));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fit__SWIG_7(hep.aida.IFitter self, long d, String model) {
  try {
    return IFitResult.getCPtr((hep.aida.IFitResult)self.fit(new IFitData(d, false), model));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fit__SWIG_8(hep.aida.IFitter self, long d, String model, double[] initialParameters) {
  try {
    return IFitResult.getCPtr((hep.aida.IFitResult)self.fit(new IFitData(d, false), model, initialParameters));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitter_setEngine(hep.aida.IFitter self, String name) {
  try {
    self.setEngine(name);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFitter_engineName(hep.aida.IFitter self) {
  try {
    return self.engineName();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_fitParameterSettings(hep.aida.IFitter self, String name) {
  try {
    return IFitParameterSettings.getCPtr((hep.aida.IFitParameterSettings)self.fitParameterSettings(name));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_listParameterSettings(hep.aida.IFitter self) {
  try {
    return AIDAJNIUtil.toPtr(self.listParameterSettings());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitter_resetParameterSettings(hep.aida.IFitter self) {
  try {
    self.resetParameterSettings();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitter_setConstraint(hep.aida.IFitter self, String expr) {
  try {
    self.setConstraint(expr);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_constraints(hep.aida.IFitter self) {
  try {
    return AIDAJNIUtil.toPtr(self.constraints());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitter_resetConstraints(hep.aida.IFitter self) {
  try {
    self.resetConstraints();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitter_setFitMethod(hep.aida.IFitter self, String name) {
  try {
    self.setFitMethod(name);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFitter_fitMethodName(hep.aida.IFitter self) {
  try {
    return self.fitMethodName();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_createScan1D(hep.aida.IFitter self, long d, long f, String par, int npts, double pmin, double pmax) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createScan1D(new IFitData(d, false), new IFunction(f, false), par, npts, pmin, pmax));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitter_createContour(hep.aida.IFitter self, long d, long r, String par1, String par2, int npts, double up) {
  try {
    return IDataPointSet.getCPtr((hep.aida.IDataPointSet)self.createContour(new IFitData(d, false), new IFitResult(r, false), par1, par2, npts, up));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFitter_setUseFunctionGradient(hep.aida.IFitter self, boolean useGrad) {
  try {
    self.setUseFunctionGradient(useGrad);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFitter_useFunctionGradient(hep.aida.IFitter self) {
  try {
    return self.useFunctionGradient();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitFactory_createFitData(hep.aida.IFitFactory self) {
  try {
    return IFitData.getCPtr((hep.aida.IFitData)self.createFitData());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitFactory_createFitter__SWIG_0(hep.aida.IFitFactory self, String fitterType, String engineType, String options) {
  try {
    return IFitter.getCPtr((hep.aida.IFitter)self.createFitter(fitterType, engineType, options));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitFactory_createFitter__SWIG_1(hep.aida.IFitFactory self, String fitterType, String engineType) {
  try {
    return IFitter.getCPtr((hep.aida.IFitter)self.createFitter(fitterType, engineType));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitFactory_createFitter__SWIG_2(hep.aida.IFitFactory self, String fitterType) {
  try {
    return IFitter.getCPtr((hep.aida.IFitter)self.createFitter(fitterType));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFitFactory_createFitter__SWIG_3(hep.aida.IFitFactory self) {
  try {
    return IFitter.getCPtr((hep.aida.IFitter)self.createFitter());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IModelFunction_title(hep.aida.IModelFunction self) {
  try {
    return self.title();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IModelFunction_setTitle(hep.aida.IModelFunction self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IModelFunction_value(hep.aida.IModelFunction self, double[] x) {
  try {
    return self.value(x);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IModelFunction_dimension(hep.aida.IModelFunction self) {
  try {
    return self.dimension();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IModelFunction_isEqual(hep.aida.IModelFunction self, long f) {
  try {
    return self.isEqual(new IFunction(f, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IModelFunction_gradient(hep.aida.IModelFunction self, double[] x) {
  try {
    return self.gradient(x);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IModelFunction_providesGradient(hep.aida.IModelFunction self) {
  try {
    return self.providesGradient();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IModelFunction_variableName(hep.aida.IModelFunction self, int i) {
  try {
    return self.variableName(i);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IModelFunction_variableNames(hep.aida.IModelFunction self) {
  try {
    return AIDAJNIUtil.toPtr(self.variableNames());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IModelFunction_setParameters(hep.aida.IModelFunction self, double[] params) {
  try {
    self.setParameters(params);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IModelFunction_parameters(hep.aida.IModelFunction self) {
  try {
    return self.parameters();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IModelFunction_numberOfParameters(hep.aida.IModelFunction self) {
  try {
    return self.numberOfParameters();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IModelFunction_parameterNames(hep.aida.IModelFunction self) {
  try {
    return AIDAJNIUtil.toPtr(self.parameterNames());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IModelFunction_setParameter(hep.aida.IModelFunction self, String name, double x) {
  try {
    self.setParameter(name, x);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IModelFunction_parameter(hep.aida.IModelFunction self, String name) {
  try {
    return self.parameter(name);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IModelFunction_indexOfParameter(hep.aida.IModelFunction self, String name) {
  try {
    return self.indexOfParameter(name);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IModelFunction_annotation(hep.aida.IModelFunction self) {
  try {
    return IAnnotation.getCPtr((hep.aida.IAnnotation)self.annotation());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IModelFunction_codeletString(hep.aida.IModelFunction self) {
  try {
    return self.codeletString();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IModelFunction_providesNormalization(hep.aida.IModelFunction self) {
  try {
    return self.providesNormalization();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IModelFunction_normalize(hep.aida.IModelFunction self, boolean on) {
  try {
    self.normalize(on);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IModelFunction_isNormalized(hep.aida.IModelFunction self) {
  try {
    return self.isNormalized();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double[] SwigDirector_IModelFunction_parameterGradient(hep.aida.IModelFunction self, double[] x) {
  try {
    return self.parameterGradient(x);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IModelFunction_providesParameterGradient(hep.aida.IModelFunction self) {
  try {
    return self.providesParameterGradient();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IModelFunction_normalizationRange(hep.aida.IModelFunction self, int iAxis) {
  try {
    return IRangeSet.getCPtr((hep.aida.IRangeSet)self.normalizationRange(iAxis));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IModelFunction_includeNormalizationAll(hep.aida.IModelFunction self) {
  try {
    self.includeNormalizationAll();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IModelFunction_excludeNormalizationAll(hep.aida.IModelFunction self) {
  try {
    self.excludeNormalizationAll();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFunctionCatalog_add__SWIG_0(hep.aida.IFunctionCatalog self, String nameId, long f) {
  try {
    return self.add(nameId, new IFunction(f, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFunctionCatalog_add__SWIG_1(hep.aida.IFunctionCatalog self, String nameId, String codelet) {
  try {
    return self.add(nameId, codelet);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFunctionCatalog_list(hep.aida.IFunctionCatalog self) {
  try {
    return AIDAJNIUtil.toPtr(self.list());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFunctionCatalog_remove(hep.aida.IFunctionCatalog self, String nameId) {
  try {
    self.remove(nameId);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFunctionCatalog_storeAll(hep.aida.IFunctionCatalog self, String nameOnDisk) {
  try {
    self.storeAll(nameOnDisk);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFunctionCatalog_loadAll(hep.aida.IFunctionCatalog self, String nameOnDisk) {
  try {
    self.loadAll(nameOnDisk);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFunctionFactory_createFunctionByName(hep.aida.IFunctionFactory self, String path, String model) {
  try {
    return IFunction.getCPtr((hep.aida.IFunction)self.createFunctionByName(path, model));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFunctionFactory_createFunctionFromScript__SWIG_0(hep.aida.IFunctionFactory self, String name, int dim, String valexpr, String parameters, String description, String gradexpr) {
  try {
    return IFunction.getCPtr((hep.aida.IFunction)self.createFunctionFromScript(name, dim, valexpr, parameters, description, gradexpr));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFunctionFactory_createFunctionFromScript__SWIG_1(hep.aida.IFunctionFactory self, String name, int dim, String valexpr, String parameters, String description) {
  try {
    return IFunction.getCPtr((hep.aida.IFunction)self.createFunctionFromScript(name, dim, valexpr, parameters, description));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFunctionFactory_cloneFunction(hep.aida.IFunctionFactory self, String path, long f) {
  try {
    return IFunction.getCPtr((hep.aida.IFunction)self.cloneFunction(path, new IFunction(f, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFunctionFactory_catalog(hep.aida.IFunctionFactory self) {
  try {
    return IFunctionCatalog.getCPtr((hep.aida.IFunctionCatalog)self.catalog());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IBaseStyle_reset(hep.aida.IBaseStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IBaseStyle_setParameter__SWIG_0(hep.aida.IBaseStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IBaseStyle_setParameter__SWIG_1(hep.aida.IBaseStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IBaseStyle_parameterValue(hep.aida.IBaseStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IBaseStyle_availableParameters(hep.aida.IBaseStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IBaseStyle_availableParameterOptions(hep.aida.IBaseStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IBrushStyle_reset(hep.aida.IBrushStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IBrushStyle_setParameter__SWIG_0(hep.aida.IBrushStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IBrushStyle_setParameter__SWIG_1(hep.aida.IBrushStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IBrushStyle_parameterValue(hep.aida.IBrushStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IBrushStyle_availableParameters(hep.aida.IBrushStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IBrushStyle_availableParameterOptions(hep.aida.IBrushStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IBrushStyle_availableColors(hep.aida.IBrushStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableColors());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IBrushStyle_color(hep.aida.IBrushStyle self) {
  try {
    return self.color();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IBrushStyle_opacity(hep.aida.IBrushStyle self) {
  try {
    return self.opacity();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IBrushStyle_setColor(hep.aida.IBrushStyle self, String newColor) {
  try {
    return self.setColor(newColor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IBrushStyle_setOpacity(hep.aida.IBrushStyle self, double newOpacity) {
  try {
    return self.setOpacity(newOpacity);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ILineStyle_reset(hep.aida.ILineStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ILineStyle_setParameter__SWIG_0(hep.aida.ILineStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ILineStyle_setParameter__SWIG_1(hep.aida.ILineStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ILineStyle_parameterValue(hep.aida.ILineStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ILineStyle_availableParameters(hep.aida.ILineStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ILineStyle_availableParameterOptions(hep.aida.ILineStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ILineStyle_availableColors(hep.aida.ILineStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableColors());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ILineStyle_color(hep.aida.ILineStyle self) {
  try {
    return self.color();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ILineStyle_opacity(hep.aida.ILineStyle self) {
  try {
    return self.opacity();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ILineStyle_setColor(hep.aida.ILineStyle self, String newColor) {
  try {
    return self.setColor(newColor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ILineStyle_setOpacity(hep.aida.ILineStyle self, double newOpacity) {
  try {
    return self.setOpacity(newOpacity);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ILineStyle_availableLineTypes(hep.aida.ILineStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableLineTypes());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ILineStyle_lineType(hep.aida.ILineStyle self) {
  try {
    return self.lineType();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_ILineStyle_thickness(hep.aida.ILineStyle self) {
  try {
    return self.thickness();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ILineStyle_setLineType(hep.aida.ILineStyle self, String newLineType) {
  try {
    return self.setLineType(newLineType);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ILineStyle_setThickness(hep.aida.ILineStyle self, int newThickness) {
  try {
    return self.setThickness(newThickness);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITextStyle_reset(hep.aida.ITextStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setParameter__SWIG_0(hep.aida.ITextStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setParameter__SWIG_1(hep.aida.ITextStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITextStyle_parameterValue(hep.aida.ITextStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITextStyle_availableParameters(hep.aida.ITextStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITextStyle_availableParameterOptions(hep.aida.ITextStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITextStyle_availableColors(hep.aida.ITextStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableColors());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITextStyle_color(hep.aida.ITextStyle self) {
  try {
    return self.color();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ITextStyle_opacity(hep.aida.ITextStyle self) {
  try {
    return self.opacity();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setColor(hep.aida.ITextStyle self, String newColor) {
  try {
    return self.setColor(newColor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setOpacity(hep.aida.ITextStyle self, double newOpacity) {
  try {
    return self.setOpacity(newOpacity);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITextStyle_availableFonts(hep.aida.ITextStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableFonts());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_ITextStyle_fontSize(hep.aida.ITextStyle self) {
  try {
    return self.fontSize();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setFontSize(hep.aida.ITextStyle self, double size) {
  try {
    return self.setFontSize(size);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITextStyle_font(hep.aida.ITextStyle self) {
  try {
    return self.font();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setFont(hep.aida.ITextStyle self, String font) {
  try {
    return self.setFont(font);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_isBold(hep.aida.ITextStyle self) {
  try {
    return self.isBold();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_isItalic(hep.aida.ITextStyle self) {
  try {
    return self.isItalic();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_isUnderlined(hep.aida.ITextStyle self) {
  try {
    return self.isUnderlined();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setBold__SWIG_0(hep.aida.ITextStyle self, boolean bold) {
  try {
    return self.setBold(bold);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setBold__SWIG_1(hep.aida.ITextStyle self) {
  try {
    return self.setBold();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setItalic__SWIG_0(hep.aida.ITextStyle self, boolean italic) {
  try {
    return self.setItalic(italic);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setItalic__SWIG_1(hep.aida.ITextStyle self) {
  try {
    return self.setItalic();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setUnderlined__SWIG_0(hep.aida.ITextStyle self, boolean underlined) {
  try {
    return self.setUnderlined(underlined);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITextStyle_setUnderlined__SWIG_1(hep.aida.ITextStyle self) {
  try {
    return self.setUnderlined();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IAxisStyle_reset(hep.aida.IAxisStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IAxisStyle_setParameter__SWIG_0(hep.aida.IAxisStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IAxisStyle_setParameter__SWIG_1(hep.aida.IAxisStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IAxisStyle_parameterValue(hep.aida.IAxisStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAxisStyle_availableParameters(hep.aida.IAxisStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAxisStyle_availableParameterOptions(hep.aida.IAxisStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAxisStyle_lineStyle(hep.aida.IAxisStyle self) {
  try {
    return ILineStyle.getCPtr((hep.aida.ILineStyle)self.lineStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAxisStyle_tickLabelStyle(hep.aida.IAxisStyle self) {
  try {
    return ITextStyle.getCPtr((hep.aida.ITextStyle)self.tickLabelStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAxisStyle_labelStyle(hep.aida.IAxisStyle self) {
  try {
    return ITextStyle.getCPtr((hep.aida.ITextStyle)self.labelStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IAxisStyle_setlineStyle(hep.aida.IAxisStyle self, long lineStyle) {
  try {
    return self.setlineStyle(new ILineStyle(lineStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IAxisStyle_setTickLabelStyle(hep.aida.IAxisStyle self, long tickLabelStyle) {
  try {
    return self.setTickLabelStyle(new ITextStyle(tickLabelStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IAxisStyle_setLabelStyle(hep.aida.IAxisStyle self, long labelStyle) {
  try {
    return self.setLabelStyle(new ITextStyle(labelStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IAxisStyle_setLabel(hep.aida.IAxisStyle self, String label) {
  try {
    self.setLabel(label);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IFillStyle_reset(hep.aida.IFillStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFillStyle_setParameter__SWIG_0(hep.aida.IFillStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFillStyle_setParameter__SWIG_1(hep.aida.IFillStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFillStyle_parameterValue(hep.aida.IFillStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFillStyle_availableParameters(hep.aida.IFillStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFillStyle_availableParameterOptions(hep.aida.IFillStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFillStyle_availableColors(hep.aida.IFillStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableColors());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFillStyle_color(hep.aida.IFillStyle self) {
  try {
    return self.color();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IFillStyle_opacity(hep.aida.IFillStyle self) {
  try {
    return self.opacity();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFillStyle_setColor(hep.aida.IFillStyle self, String newColor) {
  try {
    return self.setColor(newColor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFillStyle_setOpacity(hep.aida.IFillStyle self, double newOpacity) {
  try {
    return self.setOpacity(newOpacity);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IFillStyle_availablePatterns(hep.aida.IFillStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availablePatterns());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IFillStyle_pattern(hep.aida.IFillStyle self) {
  try {
    return self.pattern();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IFillStyle_setPattern(hep.aida.IFillStyle self, String pattern) {
  try {
    return self.setPattern(pattern);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IMarkerStyle_reset(hep.aida.IMarkerStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IMarkerStyle_setParameter__SWIG_0(hep.aida.IMarkerStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IMarkerStyle_setParameter__SWIG_1(hep.aida.IMarkerStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IMarkerStyle_parameterValue(hep.aida.IMarkerStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IMarkerStyle_availableParameters(hep.aida.IMarkerStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IMarkerStyle_availableParameterOptions(hep.aida.IMarkerStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IMarkerStyle_availableColors(hep.aida.IMarkerStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableColors());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IMarkerStyle_color(hep.aida.IMarkerStyle self) {
  try {
    return self.color();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IMarkerStyle_opacity(hep.aida.IMarkerStyle self) {
  try {
    return self.opacity();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IMarkerStyle_setColor(hep.aida.IMarkerStyle self, String newColor) {
  try {
    return self.setColor(newColor);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IMarkerStyle_setOpacity(hep.aida.IMarkerStyle self, double newOpacity) {
  try {
    return self.setOpacity(newOpacity);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IMarkerStyle_availableShapes(hep.aida.IMarkerStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableShapes());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IMarkerStyle_shape(hep.aida.IMarkerStyle self) {
  try {
    return self.shape();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IMarkerStyle_setShape(hep.aida.IMarkerStyle self, String shape) {
  try {
    return self.setShape(shape);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IDataStyle_reset(hep.aida.IDataStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IDataStyle_setParameter__SWIG_0(hep.aida.IDataStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IDataStyle_setParameter__SWIG_1(hep.aida.IDataStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IDataStyle_parameterValue(hep.aida.IDataStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataStyle_availableParameters(hep.aida.IDataStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataStyle_availableParameterOptions(hep.aida.IDataStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataStyle_lineStyle(hep.aida.IDataStyle self) {
  try {
    return ILineStyle.getCPtr((hep.aida.ILineStyle)self.lineStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataStyle_markerStyle(hep.aida.IDataStyle self) {
  try {
    return IMarkerStyle.getCPtr((hep.aida.IMarkerStyle)self.markerStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IDataStyle_fillStyle(hep.aida.IDataStyle self) {
  try {
    return IFillStyle.getCPtr((hep.aida.IFillStyle)self.fillStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IDataStyle_setLineStyle(hep.aida.IDataStyle self, long lineStyle) {
  try {
    return self.setLineStyle(new ILineStyle(lineStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IDataStyle_setMarkerStyle(hep.aida.IDataStyle self, long markerStyle) {
  try {
    return self.setMarkerStyle(new IMarkerStyle(markerStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IDataStyle_setFillStyle(hep.aida.IDataStyle self, long fillStyle) {
  try {
    return self.setFillStyle(new IFillStyle(fillStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IInfoStyle_reset(hep.aida.IInfoStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IInfoStyle_setParameter__SWIG_0(hep.aida.IInfoStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IInfoStyle_setParameter__SWIG_1(hep.aida.IInfoStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IInfoStyle_parameterValue(hep.aida.IInfoStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IInfoStyle_availableParameters(hep.aida.IInfoStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IInfoStyle_availableParameterOptions(hep.aida.IInfoStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IInfoStyle_textStyle(hep.aida.IInfoStyle self) {
  try {
    return ITextStyle.getCPtr((hep.aida.ITextStyle)self.textStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IInfoStyle_setTextStyle(hep.aida.IInfoStyle self, long textStyle) {
  try {
    return self.setTextStyle(new ITextStyle(textStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_ITitleStyle_reset(hep.aida.ITitleStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITitleStyle_setParameter__SWIG_0(hep.aida.ITitleStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITitleStyle_setParameter__SWIG_1(hep.aida.ITitleStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_ITitleStyle_parameterValue(hep.aida.ITitleStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITitleStyle_availableParameters(hep.aida.ITitleStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITitleStyle_availableParameterOptions(hep.aida.ITitleStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_ITitleStyle_textStyle(hep.aida.ITitleStyle self) {
  try {
    return ITextStyle.getCPtr((hep.aida.ITextStyle)self.textStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_ITitleStyle_setTextStyle(hep.aida.ITitleStyle self, long textStyle) {
  try {
    return self.setTextStyle(new ITextStyle(textStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterStyle_reset(hep.aida.IPlotterStyle self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IPlotterStyle_setParameter__SWIG_0(hep.aida.IPlotterStyle self, String paramName, String options) {
  try {
    return self.setParameter(paramName, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IPlotterStyle_setParameter__SWIG_1(hep.aida.IPlotterStyle self, String paramName) {
  try {
    return self.setParameter(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IPlotterStyle_parameterValue(hep.aida.IPlotterStyle self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterStyle_availableParameters(hep.aida.IPlotterStyle self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterStyle_availableParameterOptions(hep.aida.IPlotterStyle self, String paramName) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(paramName));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterStyle_dataStyle(hep.aida.IPlotterStyle self) {
  try {
    return IDataStyle.getCPtr((hep.aida.IDataStyle)self.dataStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterStyle_xAxisStyle(hep.aida.IPlotterStyle self) {
  try {
    return IAxisStyle.getCPtr((hep.aida.IAxisStyle)self.xAxisStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterStyle_yAxisStyle(hep.aida.IPlotterStyle self) {
  try {
    return IAxisStyle.getCPtr((hep.aida.IAxisStyle)self.yAxisStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterStyle_zAxisStyle(hep.aida.IPlotterStyle self) {
  try {
    return IAxisStyle.getCPtr((hep.aida.IAxisStyle)self.zAxisStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterStyle_titleStyle(hep.aida.IPlotterStyle self) {
  try {
    return ITitleStyle.getCPtr((hep.aida.ITitleStyle)self.titleStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterStyle_infoStyle(hep.aida.IPlotterStyle self) {
  try {
    return IInfoStyle.getCPtr((hep.aida.IInfoStyle)self.infoStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IPlotterStyle_setDataStyle(hep.aida.IPlotterStyle self, long dataStyle) {
  try {
    return self.setDataStyle(new IDataStyle(dataStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IPlotterStyle_setAxisStyleX(hep.aida.IPlotterStyle self, long xAxisStyle) {
  try {
    return self.setAxisStyleX(new IAxisStyle(xAxisStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IPlotterStyle_setAxisStyleY(hep.aida.IPlotterStyle self, long yAxisStyle) {
  try {
    return self.setAxisStyleY(new IAxisStyle(yAxisStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IPlotterStyle_setAxisStyleZ(hep.aida.IPlotterStyle self, long zAxisStyle) {
  try {
    return self.setAxisStyleZ(new IAxisStyle(zAxisStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IPlotterStyle_setTitleStyle(hep.aida.IPlotterStyle self, long textStyle) {
  try {
    return self.setTitleStyle(new ITitleStyle(textStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IPlotterStyle_setInfoStyle(hep.aida.IPlotterStyle self, long infoStyle) {
  try {
    return self.setInfoStyle(new IInfoStyle(infoStyle, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IInfo_clear(hep.aida.IInfo self) {
  try {
    self.clear();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IInfo_addText(hep.aida.IInfo self, String text) {
  try {
    self.addText(text);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IInfo_addLegend__SWIG_0(hep.aida.IInfo self, long style, String description) {
  try {
    self.addLegend(new IMarkerStyle(style, false), description);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IInfo_addLegend__SWIG_1(hep.aida.IInfo self, long style, String description) {
  try {
    self.addLegend(new ILineStyle(style, false), description);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IInfo_addLegend__SWIG_2(hep.aida.IInfo self, long style, String description) {
  try {
    self.addLegend(new IFillStyle(style, false), description);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterLayout_reset(hep.aida.IPlotterLayout self) {
  try {
    self.reset();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static boolean SwigDirector_IPlotterLayout_setParameter(hep.aida.IPlotterLayout self, String paramName, double paramValue) {
  try {
    return self.setParameter(paramName, paramValue);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static double SwigDirector_IPlotterLayout_parameterValue(hep.aida.IPlotterLayout self, String paramName) {
  try {
    return self.parameterValue(paramName);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterLayout_availableParameters(hep.aida.IPlotterLayout self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_0(hep.aida.IPlotterRegion self, long histogram, String options) {
  try {
    self.plot(new IBaseHistogram(histogram, false), options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_1(hep.aida.IPlotterRegion self, long histogram) {
  try {
    self.plot(new IBaseHistogram(histogram, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_2(hep.aida.IPlotterRegion self, long histogram, long style, String options) {
  try {
    self.plot(new IBaseHistogram(histogram, false), new IPlotterStyle(style, false), options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_3(hep.aida.IPlotterRegion self, long histogram, long style) {
  try {
    self.plot(new IBaseHistogram(histogram, false), new IPlotterStyle(style, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_4(hep.aida.IPlotterRegion self, long function, String options) {
  try {
    self.plot(new IFunction(function, false), options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_5(hep.aida.IPlotterRegion self, long function) {
  try {
    self.plot(new IFunction(function, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_6(hep.aida.IPlotterRegion self, long function, long style, String options) {
  try {
    self.plot(new IFunction(function, false), new IPlotterStyle(style, false), options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_7(hep.aida.IPlotterRegion self, long function, long style) {
  try {
    self.plot(new IFunction(function, false), new IPlotterStyle(style, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_8(hep.aida.IPlotterRegion self, long dataPointSet, String options) {
  try {
    self.plot(new IDataPointSet(dataPointSet, false), options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_9(hep.aida.IPlotterRegion self, long dataPointSet) {
  try {
    self.plot(new IDataPointSet(dataPointSet, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_10(hep.aida.IPlotterRegion self, long dataPointSet, long style, String options) {
  try {
    self.plot(new IDataPointSet(dataPointSet, false), new IPlotterStyle(style, false), options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_plot__SWIG_11(hep.aida.IPlotterRegion self, long dataPointSet, long style) {
  try {
    self.plot(new IDataPointSet(dataPointSet, false), new IPlotterStyle(style, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_remove__SWIG_0(hep.aida.IPlotterRegion self, long histogram) {
  try {
    self.remove(new IBaseHistogram(histogram, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_remove__SWIG_1(hep.aida.IPlotterRegion self, long function) {
  try {
    self.remove(new IFunction(function, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_remove__SWIG_2(hep.aida.IPlotterRegion self, long dataPointSet) {
  try {
    self.remove(new IDataPointSet(dataPointSet, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_clear(hep.aida.IPlotterRegion self) {
  try {
    self.clear();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setParameter__SWIG_0(hep.aida.IPlotterRegion self, String parameter, String options) {
  try {
    self.setParameter(parameter, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setParameter__SWIG_1(hep.aida.IPlotterRegion self, String parameter) {
  try {
    self.setParameter(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IPlotterRegion_parameterValue(hep.aida.IPlotterRegion self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterRegion_availableParameterOptions(hep.aida.IPlotterRegion self, String parameter) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(parameter));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterRegion_availableParameters(hep.aida.IPlotterRegion self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterRegion_style(hep.aida.IPlotterRegion self) {
  try {
    return IPlotterStyle.getCPtr((hep.aida.IPlotterStyle)self.style());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setStyle(hep.aida.IPlotterRegion self, long style) {
  try {
    self.setStyle(new IPlotterStyle(style, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_applyStyle(hep.aida.IPlotterRegion self, long style) {
  try {
    self.applyStyle(new IPlotterStyle(style, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setTitle(hep.aida.IPlotterRegion self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setXLimits__SWIG_0(hep.aida.IPlotterRegion self, double min, double max) {
  try {
    self.setXLimits(min, max);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setXLimits__SWIG_1(hep.aida.IPlotterRegion self, double min) {
  try {
    self.setXLimits(min);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setXLimits__SWIG_2(hep.aida.IPlotterRegion self) {
  try {
    self.setXLimits();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setYLimits__SWIG_0(hep.aida.IPlotterRegion self, double min, double max) {
  try {
    self.setYLimits(min, max);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setYLimits__SWIG_1(hep.aida.IPlotterRegion self, double min) {
  try {
    self.setYLimits(min);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setYLimits__SWIG_2(hep.aida.IPlotterRegion self) {
  try {
    self.setYLimits();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setZLimits__SWIG_0(hep.aida.IPlotterRegion self, double min, double max) {
  try {
    self.setZLimits(min, max);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setZLimits__SWIG_1(hep.aida.IPlotterRegion self, double min) {
  try {
    self.setZLimits(min);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setZLimits__SWIG_2(hep.aida.IPlotterRegion self) {
  try {
    self.setZLimits();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterRegion_layout(hep.aida.IPlotterRegion self) {
  try {
    return IPlotterLayout.getCPtr((hep.aida.IPlotterLayout)self.layout());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotterRegion_setLayout(hep.aida.IPlotterRegion self, long layout) {
  try {
    self.setLayout(new IPlotterLayout(layout, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterRegion_info(hep.aida.IPlotterRegion self) {
  try {
    return IInfo.getCPtr((hep.aida.IInfo)self.info());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_createRegion__SWIG_0(hep.aida.IPlotter self, double x, double y, double w, double h) {
  try {
    return IPlotterRegion.getCPtr((hep.aida.IPlotterRegion)self.createRegion(x, y, w, h));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_createRegion__SWIG_1(hep.aida.IPlotter self, double x, double y, double w) {
  try {
    return IPlotterRegion.getCPtr((hep.aida.IPlotterRegion)self.createRegion(x, y, w));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_createRegion__SWIG_2(hep.aida.IPlotter self, double x, double y) {
  try {
    return IPlotterRegion.getCPtr((hep.aida.IPlotterRegion)self.createRegion(x, y));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_createRegion__SWIG_3(hep.aida.IPlotter self, double x) {
  try {
    return IPlotterRegion.getCPtr((hep.aida.IPlotterRegion)self.createRegion(x));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_createRegion__SWIG_4(hep.aida.IPlotter self) {
  try {
    return IPlotterRegion.getCPtr((hep.aida.IPlotterRegion)self.createRegion());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_createRegions__SWIG_0(hep.aida.IPlotter self, int columns, int rows, int index) {
  try {
    self.createRegions(columns, rows, index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_createRegions__SWIG_1(hep.aida.IPlotter self, int columns, int rows) {
  try {
    self.createRegions(columns, rows);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_createRegions__SWIG_2(hep.aida.IPlotter self, int columns) {
  try {
    self.createRegions(columns);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_createRegions__SWIG_3(hep.aida.IPlotter self) {
  try {
    self.createRegions();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_currentRegion(hep.aida.IPlotter self) {
  try {
    return IPlotterRegion.getCPtr((hep.aida.IPlotterRegion)self.currentRegion());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IPlotter_currentRegionNumber(hep.aida.IPlotter self) {
  try {
    return self.currentRegionNumber();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static int SwigDirector_IPlotter_numberOfRegions(hep.aida.IPlotter self) {
  try {
    return self.numberOfRegions();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_setCurrentRegionNumber(hep.aida.IPlotter self, int index) {
  try {
    self.setCurrentRegionNumber(index);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_next(hep.aida.IPlotter self) {
  try {
    return IPlotterRegion.getCPtr((hep.aida.IPlotterRegion)self.next());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_region(hep.aida.IPlotter self, int index) {
  try {
    return IPlotterRegion.getCPtr((hep.aida.IPlotterRegion)self.region(index));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_destroyRegions(hep.aida.IPlotter self) {
  try {
    self.destroyRegions();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_clearRegions(hep.aida.IPlotter self) {
  try {
    self.clearRegions();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_setParameter__SWIG_0(hep.aida.IPlotter self, String parameter, String options) {
  try {
    self.setParameter(parameter, options);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_setParameter__SWIG_1(hep.aida.IPlotter self, String parameter) {
  try {
    self.setParameter(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static String SwigDirector_IPlotter_parameterValue(hep.aida.IPlotter self, String parameter) {
  try {
    return self.parameterValue(parameter);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_availableParameterOptions(hep.aida.IPlotter self, String parameter) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameterOptions(parameter));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_availableParameters(hep.aida.IPlotter self) {
  try {
    return AIDAJNIUtil.toPtr(self.availableParameters());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_show(hep.aida.IPlotter self) {
  try {
    self.show();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_refresh(hep.aida.IPlotter self) {
  try {
    self.refresh();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_hide(hep.aida.IPlotter self) {
  try {
    self.hide();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_interact(hep.aida.IPlotter self) {
  try {
    self.interact();
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_writeToFile__SWIG_0(hep.aida.IPlotter self, String filename, String type) {
  try {
    self.writeToFile(filename, type);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_writeToFile__SWIG_1(hep.aida.IPlotter self, String filename) {
  try {
    self.writeToFile(filename);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_setTitle(hep.aida.IPlotter self, String title) {
  try {
    self.setTitle(title);
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotter_titleStyle(hep.aida.IPlotter self) {
  try {
    return ITitleStyle.getCPtr((hep.aida.ITitleStyle)self.titleStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static void SwigDirector_IPlotter_setTitleStyle(hep.aida.IPlotter self, long style) {
  try {
    self.setTitleStyle(new ITitleStyle(style, false));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_create__SWIG_0(hep.aida.IPlotterFactory self, String name) {
  try {
    return IPlotter.getCPtr((hep.aida.IPlotter)self.create(name));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_create__SWIG_1(hep.aida.IPlotterFactory self) {
  try {
    return IPlotter.getCPtr((hep.aida.IPlotter)self.create());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_createMarkerStyle(hep.aida.IPlotterFactory self) {
  try {
    return IMarkerStyle.getCPtr((hep.aida.IMarkerStyle)self.createMarkerStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_createTextStyle(hep.aida.IPlotterFactory self) {
  try {
    return ITextStyle.getCPtr((hep.aida.ITextStyle)self.createTextStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_createLineStyle(hep.aida.IPlotterFactory self) {
  try {
    return ILineStyle.getCPtr((hep.aida.ILineStyle)self.createLineStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_createFillStyle(hep.aida.IPlotterFactory self) {
  try {
    return IFillStyle.getCPtr((hep.aida.IFillStyle)self.createFillStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_createDataStyle(hep.aida.IPlotterFactory self) {
  try {
    return IDataStyle.getCPtr((hep.aida.IDataStyle)self.createDataStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_createAxisStyle(hep.aida.IPlotterFactory self) {
  try {
    return IAxisStyle.getCPtr((hep.aida.IAxisStyle)self.createAxisStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_createTitleStyle(hep.aida.IPlotterFactory self) {
  try {
    return ITitleStyle.getCPtr((hep.aida.ITitleStyle)self.createTitleStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IPlotterFactory_createPlotterStyle(hep.aida.IPlotterFactory self) {
  try {
    return IPlotterStyle.getCPtr((hep.aida.IPlotterStyle)self.createPlotterStyle());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAnalysisFactory_createTreeFactory(hep.aida.IAnalysisFactory self) {
  try {
    return ITreeFactory.getCPtr((hep.aida.ITreeFactory)self.createTreeFactory());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAnalysisFactory_createHistogramFactory(hep.aida.IAnalysisFactory self, long tree) {
  try {
    return IHistogramFactory.getCPtr((hep.aida.IHistogramFactory)self.createHistogramFactory(new ITree(tree, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAnalysisFactory_createDataPointSetFactory(hep.aida.IAnalysisFactory self, long tree) {
  try {
    return IDataPointSetFactory.getCPtr((hep.aida.IDataPointSetFactory)self.createDataPointSetFactory(new ITree(tree, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAnalysisFactory_createTupleFactory(hep.aida.IAnalysisFactory self, long tree) {
  try {
    return ITupleFactory.getCPtr((hep.aida.ITupleFactory)self.createTupleFactory(new ITree(tree, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAnalysisFactory_createFunctionFactory(hep.aida.IAnalysisFactory self, long tree) {
  try {
    return IFunctionFactory.getCPtr((hep.aida.IFunctionFactory)self.createFunctionFactory(new ITree(tree, false)));
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }
  public static long SwigDirector_IAnalysisFactory_createFitFactory(hep.aida.IAnalysisFactory self) {
  try {
    return IFitFactory.getCPtr((hep.aida.IFitFactory)self.createFitFactory());
  } catch (Exception e) {
    System.err.println("Unhandled exception (rethrown) "+e);
    throw new RuntimeException("Unhandled exception ", e);
  }
  }

  private final static native void swig_module_init();

  static {
    try {
       swig_module_init();
    } catch (UnsatisfiedLinkError e) {
       System.err.println("swig_module_init() from java ignored, will be initialized from C++");
    }
  }

}
