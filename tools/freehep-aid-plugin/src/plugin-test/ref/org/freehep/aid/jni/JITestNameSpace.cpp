// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================

#include <cstdlib>
#include <iostream>

#include "AIDTEST/ITestPrimitives.h"
#include "AIDTEST_Dev/ITestNameSpace.h"
#include "JITestInterface.h"
#include "JITestNameSpace.h"

using namespace AIDTEST::Dev;


JITestNameSpace::JITestNameSpace(JNIEnv *env, jobject object)
        : JITestInterface(env, object) {
    jclass cls = env->GetObjectClass(ref);

    returnPrimitivesOCLorg_freehep_aid_test_ITestPrimitivesEMethod = env->GetMethodID(cls, "returnPrimitives", "()Lorg/freehep/aid/test/ITestPrimitives;");
    if (returnPrimitivesOCLorg_freehep_aid_test_ITestPrimitivesEMethod == NULL) {
        std::cerr << "ITestNameSpace" << ": Could not find method: " << "returnPrimitives" << "()Lorg/freehep/aid/test/ITestPrimitives;" << std::endl;
    }

    instanceOCL_ITestNameSpaceEMethod = env->GetMethodID(cls, "instance", "()Lorg/freehep/aid/test/dev/ITestNameSpace;");
    if (instanceOCL_ITestNameSpaceEMethod == NULL) {
        std::cerr << "ITestNameSpace" << ": Could not find method: " << "instance" << "()Lorg/freehep/aid/test/dev/ITestNameSpace;" << std::endl;
    }

}

JITestNameSpace::~JITestNameSpace() {
}

ITestPrimitives JITestNameSpace::returnPrimitives() {
    ITestPrimitives result;
    // Call to Java
    jobject jniResult = (jobject)env->CallObjectMethod(ref, returnPrimitivesOCLorg_freehep_aid_test_ITestPrimitivesEMethod);
// WARNING no conversion for ITestPrimitives
    return result;
}

ITestNameSpace JITestNameSpace::instance() {
    ITestNameSpace result;
    // Call to Java
    jobject jniResult = (jobject)env->CallObjectMethod(ref, instanceOCL_ITestNameSpaceEMethod);
// WARNING no conversion for ITestNameSpace
    return result;
}
