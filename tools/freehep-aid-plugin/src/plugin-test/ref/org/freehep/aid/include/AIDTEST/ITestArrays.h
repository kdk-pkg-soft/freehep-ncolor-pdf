// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef AIDTEST_ITESTARRAYS_H
#define AIDTEST_ITESTARRAYS_H 1

// Copyright 2002, SLAC, Stanford University, U.S.A.
// AID - Compiler Test File

#include <stdexcept>
#include <string>
#include <vector>

#include "AID/AIDRef.h"

namespace AIDTEST {

/**
 * TestInterface to test the aid compiler.
 *
 * @author Mark Donszelmann
 */
class ITestArrays : virtual public AID::AIDRef {

public: 
    /// Destructor.
    virtual ~ITestArrays() { /* nop */; }

    /**
     * primitive array method
     *
     * @return double array
     */
    virtual std::vector<double>  returnDoubleArray() = 0;

    /**
     * primitive multi-array method
     *
     * @return multi double array
     */
    virtual std::vector<std::vector<double> >  returnMultiDoubleArray() = 0;

    /**
     * Method with array/vector return
     *
     * @param path path to objects
     * @param recursive list objects recursively
     * @return list of object names
     */
    virtual std::vector<std::string>  listObjectNames(const std::string & path = ".", bool recursive = false) const = 0;

    /**
     * Method throwing exception
     *
     * @param path path to create
     * @throws IllegalArgumentException in case of argument error
     */
    virtual void mkdir(std::vector<int>  dummy) throw (std::invalid_argument)  = 0;

    /**
     * Method throwing exception
     *
     * @param path path to create
     * @throws IllegalArgumentException in case of argument error
     */
    virtual void mkdir(std::vector<std::vector<int> >  dummy) throw (std::invalid_argument)  = 0;

    /**
     * Method throwing exception
     *
     * @param path path to create
     * @throws IllegalArgumentException in case of argument error
     */
    virtual void mkdir(std::vector<std::vector<std::string> >  dummy) throw (std::invalid_argument)  = 0;

    /**
     * Method throwing exception
     *
     * @param path path to create
     * @throws IllegalArgumentException in case of argument error
     */
    virtual void mkdir(std::vector<std::string *>  dummy) throw (std::invalid_argument)  = 0;

    /**
     * Method throwing exception
     *
     * @param path path to create
     * @throws IllegalArgumentException in case of argument error
     */
    virtual void mkdir2(std::vector<std::string>  & dummy) throw (std::invalid_argument)  = 0;
}; // class
} // namespace AIDTEST
#endif /* ifndef AIDTEST_ITESTARRAYS_H */
