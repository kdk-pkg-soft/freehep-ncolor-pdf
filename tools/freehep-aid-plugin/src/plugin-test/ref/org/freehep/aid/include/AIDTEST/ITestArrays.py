""" AID-GENERATED
=========================================================================
This class was generated by AID - Abstract Interface Definition          
DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
=========================================================================
"""

"""
// Copyright 2002, SLAC, Stanford University, U.S.A.
// AID - Compiler Test File
"""

from types import IntType
from types import ListType

class ITestArrays: 
    """
    /**
     * TestInterface to test the aid compiler.
     *
     * @author Mark Donszelmann
     */
    """

    def listObjectNames(self, path = ".", recursive = False):
        """
            /**
             * Method with array/vector return
             *
             * @param path path to objects
             * @param recursive list objects recursively
             * @return list of object names
             */
        """

        raise NotImplementedError

    def mkdir2(self, dummy):
        """
            /**
             * Method throwing exception
             *
             * @param path path to create
             * @raises IllegalArgumentException in case of argument error
             */
        """

        raise NotImplementedError

    def returnMultiDoubleArray(self):
        """
            /**
             * primitive multi-array method
             *
             * @return multi FloatType array
             */
        """

        raise NotImplementedError

    def returnDoubleArray(self):
        """
            /**
             * primitive array method
             *
             * @return FloatType array
             */
        """

        raise NotImplementedError

    def mkdir_IntTypeListTypeListType(self, dummy):
        """
            /**
             * Method throwing exception
             *
             * @param path path to create
             * @raises IllegalArgumentException in case of argument error
             */
        """

        raise NotImplementedError

    def mkdir_IntTypeListType(self, dummy):
        """
            /**
             * Method throwing exception
             *
             * @param path path to create
             * @raises IllegalArgumentException in case of argument error
             */
        """

        raise NotImplementedError

    def mkdir_StringTypesListTypeListType(self, dummy):
        """
            /**
             * Method throwing exception
             *
             * @param path path to create
             * @raises IllegalArgumentException in case of argument error
             */
        """

        raise NotImplementedError

    def mkdir_StringTypesListType(self, dummy):
        """
            /**
             * Method throwing exception
             *
             * @param path path to create
             * @raises IllegalArgumentException in case of argument error
             */
        """

        raise NotImplementedError

    def mkdir(self, arg1 = None):
        """Dispatch method for the 'mkdir' routine.
        This method takes a maximum number of arguments = 1
        Look at the individual methods with name 'mkdir_...' for documentation.
        @throws TypeError if number of parameters incorrect or types incompatible.
        """

        if isinstance(arg1, ListType) and (((len(arg1) > 0) and isinstance(arg1[0], IntTypeListType)) or (len(arg1) == 0)):
            self.mkdir_IntTypeListTypeListType(arg1)
        elif isinstance(arg1, ListType) and (((len(arg1) > 0) and isinstance(arg1[0], IntType)) or (len(arg1) == 0)):
            self.mkdir_IntTypeListType(arg1)
        elif isinstance(arg1, ListType) and (((len(arg1) > 0) and isinstance(arg1[0], StringTypesListType)) or (len(arg1) == 0)):
            self.mkdir_StringTypesListTypeListType(arg1)
        elif isinstance(arg1, ListType) and (((len(arg1) > 0) and isinstance(arg1[0], StringTypes)) or (len(arg1) == 0)):
            self.mkdir_StringTypesListType(arg1)
        else:
            raise TypeError

# end of class or interface

