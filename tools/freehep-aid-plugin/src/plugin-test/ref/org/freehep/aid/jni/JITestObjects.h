// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef AIDTEST_JITESTOBJECTS_H
#define AIDTEST_JITESTOBJECTS_H 1

// Copyright 2002, SLAC, Stanford University, U.S.A.
// AID - Compiler Test File

#include <iostream>
#include <jni.h>
#include <string>
#include <vector>

#include "AID/JAIDRef.h"
#include "AIDTEST/ITestObjects.h"

namespace AIDTEST {

/**
 * TestInterface to test the aid compiler.
 *
 * @author Mark Donszelmann
 */
class JITestObjects: public JAIDRef, public virtual ITestObjects {

private: 
    jmethodID returnObjectOCLjava_lang_StringEMethod;
    jmethodID returnReferenceOCLjava_lang_StringEMethod;
    std::string returnReferenceOCLjava_lang_StringEResult;
    jmethodID returnPointerOCLjava_lang_StringEMethod;
    std::string returnPointerOCLjava_lang_StringEResult;
    jmethodID returnColorOCLjava_awt_ColorEMethod;
    jmethodID returnConstReferenceOCLjava_lang_StringEMethod;
    std::string returnConstReferenceOCLjava_lang_StringEResult;
    jmethodID returnConstReferenceConstOCLjava_lang_StringEMethod;
    std::string returnConstReferenceConstOCLjava_lang_StringEResult;
    jmethodID returnConstReferenceThrowsOCLjava_lang_StringEMethod;
    std::string returnConstReferenceThrowsOCLjava_lang_StringEResult;
    jmethodID returnConstReferenceConstThrowsOCLjava_lang_StringEMethod;
    std::string returnConstReferenceConstThrowsOCLjava_lang_StringEResult;
    jmethodID findOLjava_lang_StringECLjava_lang_StringEMethod;
    std::string findOLjava_lang_StringECLjava_lang_StringEResult;
    jmethodID findOLjava_awt_ColorECLjava_lang_StringEMethod;
    std::string findOLjava_awt_ColorECLjava_lang_StringEResult;
    jmethodID cdOLjava_lang_StringECZMethod;
    jmethodID lsOLjava_lang_StringEZLjava_io_OutputStreamECVMethod;
    jmethodID mkdirOLjava_lang_StringECVMethod;
    jmethodID mvOLjava_lang_StringELjava_lang_StringECVMethod;

protected:
    inline JITestObjects() { };
    inline JITestObjects(const JITestObjects& r) { };
    inline JITestObjects& operator=(const JITestObjects&) { return *this; };

public: 
    /**
     * Default JNI Constructor
     */
    JITestObjects(JNIEnv *env, jobject object);

    /// Destructor.
    virtual ~JITestObjects();

    /**
     * return string method
     *
     * @return name
     */
    virtual std::string returnObject();

    /**
     * return string reference method
     *
     * @return name
     */
    virtual std::string & returnReference();

    /**
     * return string pointer method
     *
     * @return name
     */
    virtual std::string * returnPointer();

    /**
     * return Color method
     *
     * @return name
     */
    virtual std::vector<double> returnColor();

    /**
     * return const string reference method
     *
     * @return name
     */
    virtual const std::string & returnConstReference();

    /**
     * return const string reference const method
     *
     * @return name
     */
    virtual const std::string & returnConstReferenceConst();

    /**
     * return const string reference method throwing exceptions
     *
     * @return name
     */
    virtual const std::string & returnConstReferenceThrows();

    /**
     * return const string reference const method throwing exceptions
     *
     * @return name of something
     */
    virtual const std::string & returnConstReferenceConstThrows();

    /**
     * Method with 1 parameter
     *
     * @param path path to find
     * @return name
     */
    virtual std::string * find(const std::string & path);

    /**
     * Method with 1 parameter
     *
     * @param path path to find
     * @return name
     */
    virtual std::string * find(std::vector<double> color);

    /**
     * Method with 1 default parameter
     *
     * @param path to change directory to
     * @return true on succes
     */
    virtual bool cd(const std::string & path);

    /**
     * Method with 3 default parameters and special init values
     *
     * @param path path to list
     * @param recursive list files recursively
     * @param os output stream to list file to
     */
    virtual void ls(const std::string & path, bool recursive, std::ostream & os);

    /**
     * Method throwing exception
     *
     * @param path path to create
     * @return false in case of argument error
     */
    virtual bool mkdir(const std::string & path);

    /**
     * Method with 2 parameters of which 1 default.
     *
     * @param oldPath old path for file
     * @param newPath new path for file
     */
    virtual void mv(const std::string & oldPath, const std::string & newPath);
}; // class
}; // namespace AIDTEST
#endif /* ifndef AIDTEST_JITESTOBJECTS_H */
