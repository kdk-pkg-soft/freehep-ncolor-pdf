// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================

#include <cstdlib>
#include <iostream>

#include "AID/JAIDRef.h"
#include "JITestPrimitives.h"

using namespace AIDTEST;


JITestPrimitives::JITestPrimitives(JNIEnv *env, jobject object)
        : JAIDRef(env, object) {
    jclass cls = env->GetObjectClass(ref);

    returnBooleanOCZMethod = env->GetMethodID(cls, "returnBoolean", "()Z");
    if (returnBooleanOCZMethod == NULL) {
        std::cerr << "ITestPrimitives" << ": Could not find method: " << "returnBoolean" << "()Z" << std::endl;
    }

    returnIntOCIMethod = env->GetMethodID(cls, "returnInt", "()I");
    if (returnIntOCIMethod == NULL) {
        std::cerr << "ITestPrimitives" << ": Could not find method: " << "returnInt" << "()I" << std::endl;
    }

    returnDoubleOCDMethod = env->GetMethodID(cls, "returnDouble", "()D");
    if (returnDoubleOCDMethod == NULL) {
        std::cerr << "ITestPrimitives" << ": Could not find method: " << "returnDouble" << "()D" << std::endl;
    }

    returnFloatOCFMethod = env->GetMethodID(cls, "returnFloat", "()F");
    if (returnFloatOCFMethod == NULL) {
        std::cerr << "ITestPrimitives" << ": Could not find method: " << "returnFloat" << "()F" << std::endl;
    }

}

JITestPrimitives::~JITestPrimitives() {
}

bool JITestPrimitives::returnBoolean() {
    bool result;
    // Call to Java
    jboolean jniResult = (jboolean)env->CallBooleanMethod(ref, returnBooleanOCZMethod);
    result = jniResult;
    return result;
}

int JITestPrimitives::returnInt() {
    int result;
    // Call to Java
    jint jniResult = (jint)env->CallIntMethod(ref, returnIntOCIMethod);
    result = jniResult;
    return result;
}

double JITestPrimitives::returnDouble() {
    double result;
    // Call to Java
    jdouble jniResult = (jdouble)env->CallDoubleMethod(ref, returnDoubleOCDMethod);
    result = jniResult;
    return result;
}

float JITestPrimitives::returnFloat() {
    float result;
    // Call to Java
    jfloat jniResult = (jfloat)env->CallFloatMethod(ref, returnFloatOCFMethod);
    result = jniResult;
    return result;
}
