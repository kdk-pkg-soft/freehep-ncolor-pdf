// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef AIDTEST_ITESTOBJECTS_H
#define AIDTEST_ITESTOBJECTS_H 1

// Copyright 2002, SLAC, Stanford University, U.S.A.
// AID - Compiler Test File

#include <ios>
#include <iostream>
#include <stdexcept>
#include <string>
#include <vector>

#include "AID/AIDRef.h"

namespace AIDTEST {

class ITestInterface;

/**
 * TestInterface to test the aid compiler.
 *
 * @author Mark Donszelmann
 */
class ITestObjects : virtual public AID::AIDRef {

public: 
    /// Destructor.
    virtual ~ITestObjects() { /* nop */; }

    /**
     * return string method
     *
     * @return name
     */
    virtual std::string returnObject() = 0;

    /**
     * return string reference method
     *
     * @return name
     */
    virtual std::string & returnReference() = 0;

    /**
     * return string pointer method
     *
     * @return name
     */
    virtual std::string * returnPointer() = 0;

    /**
     * return Color method
     *
     * @return name
     */
    virtual std::vector<double> returnColor() = 0;

    /**
     * return const string reference method
     *
     * @return name
     */
    virtual const std::string & returnConstReference() = 0;

    /**
     * return const string reference const method
     *
     * @return name
     */
    virtual const std::string & returnConstReferenceConst() const = 0;

    /**
     * return const string reference method throwing exceptions
     *
     * @throws IllegalArgumentException in case of argument error
     * @throws IOException in case of IO error
     * @return name
     */
    virtual const std::string & returnConstReferenceThrows() throw (ios::ios_base::failure, std::invalid_argument)  = 0;

    /**
     * return const string reference const method throwing exceptions
     *
     * @throws IllegalArgumentException in case of argument error
     * @return name of something
     */
    virtual const std::string & returnConstReferenceConstThrows() const throw (std::invalid_argument)  = 0;

    /**
     * Method with 1 parameter
     *
     * @param path path to find
     * @return name
     */
    virtual std::string * find(const std::string & path) = 0;

    /**
     * Method with 1 parameter
     *
     * @param path path to find
     * @return name
     */
    virtual ITestInterface * find(std::vector<double> color) = 0;

    /**
     * Method with 1 default parameter
     *
     * @param path to change directory to
     * @return true on succes
     */
    virtual bool cd(const std::string & path = "~") = 0;

    /**
     * Method with 3 default parameters and special init values
     *
     * @param path path to list
     * @param recursive list files recursively
     * @param os output stream to list file to
     */
    virtual void ls(const std::string & path = ".", bool recursive = false, std::ostream & os = std::cout) const = 0;

    /**
     * Method throwing exception
     *
     * @param path path to create
     * @throws IllegalArgumentException in case of argument error
     */
    virtual void mkdir(const std::string & path) throw (std::invalid_argument)  = 0;

    /**
     * Method with 2 parameters of which 1 default.
     *
     * @param oldPath old path for file
     * @param newPath new path for file
     */
    virtual void mv(const std::string & oldPath, const std::string & newPath = "dummy") = 0;
}; // class
} // namespace AIDTEST
#endif /* ifndef AIDTEST_ITESTOBJECTS_H */
